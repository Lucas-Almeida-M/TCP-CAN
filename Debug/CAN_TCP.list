
CAN_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016af0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003864  08016cf0  08016cf0  00026cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a554  0801a554  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a554  0801a554  0002a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a55c  0801a55c  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a55c  0801a55c  0002a55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a560  0801a560  0002a560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801a564  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801a5f8  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801a698  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ee64  200001d4  0801a738  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000f038  0801a738  0003f038  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032e02  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007e03  00000000  00000000  00063004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022e0  00000000  00000000  0006ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002130  00000000  00000000  0006d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000143a8  00000000  00000000  0006f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039820  00000000  00000000  000835c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e832  00000000  00000000  000bcde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001db612  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000098ec  00000000  00000000  001db664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08016cd8 	.word	0x08016cd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08016cd8 	.word	0x08016cd8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_CAN1_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_CAN1_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_CAN1_Init+0x64>)
 80005f0:	2206      	movs	r2, #6
 80005f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_CAN1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_CAN1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_CAN1_Init+0x64>)
 8000602:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000606:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_CAN1_Init+0x64>)
 800060a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800060e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_CAN1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_CAN1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_CAN1_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_CAN1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_CAN1_Init+0x64>)
 8000636:	f000 fe67 	bl	8001308 <HAL_CAN_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 fa0e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001f0 	.word	0x200001f0
 800064c:	40006400 	.word	0x40006400

08000650 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <HAL_CAN_MspInit+0x8c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d12f      	bne.n	80006d2 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_CAN_MspInit+0x90>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006a2:	2303      	movs	r3, #3
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006b2:	2309      	movs	r3, #9
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <HAL_CAN_MspInit+0x94>)
 80006be:	f002 fc7d 	bl	8002fbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2014      	movs	r0, #20
 80006c8:	f001 fa00 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006cc:	2014      	movs	r0, #20
 80006ce:	f001 fa19 	bl	8001b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40006400 	.word	0x40006400
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <vApplicationGetIdleTaskMemory+0x2c>)
 80006f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <vApplicationGetIdleTaskMemory+0x30>)
 80006fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000021c 	.word	0x2000021c
 8000718:	200002d0 	.word	0x200002d0

0800071c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_FREERTOS_Init+0x30>)
 8000724:	1d3c      	adds	r4, r7, #4
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fcd5 	bl	80050e8 <osThreadCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <MX_FREERTOS_Init+0x34>)
 8000742:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bdb0      	pop	{r4, r5, r7, pc}
 800074c:	08016cfc 	.word	0x08016cfc
 8000750:	20000218 	.word	0x20000218

08000754 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b62      	ldr	r3, [pc, #392]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a61      	ldr	r2, [pc, #388]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b5f      	ldr	r3, [pc, #380]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	4b5c      	ldr	r3, [pc, #368]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a5b      	ldr	r2, [pc, #364]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b59      	ldr	r3, [pc, #356]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a55      	ldr	r2, [pc, #340]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4f      	ldr	r2, [pc, #316]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4d      	ldr	r3, [pc, #308]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	4b4a      	ldr	r3, [pc, #296]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a49      	ldr	r2, [pc, #292]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b47      	ldr	r3, [pc, #284]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b41      	ldr	r3, [pc, #260]	; (80008f4 <MX_GPIO_Init+0x1a0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000800:	483d      	ldr	r0, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x1a4>)
 8000802:	f002 fd87 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	483c      	ldr	r0, [pc, #240]	; (80008fc <MX_GPIO_Init+0x1a8>)
 800080c:	f002 fd82 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4836      	ldr	r0, [pc, #216]	; (8000900 <MX_GPIO_Init+0x1ac>)
 8000828:	f002 fbc8 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800082c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	482c      	ldr	r0, [pc, #176]	; (80008f8 <MX_GPIO_Init+0x1a4>)
 8000846:	f002 fbb9 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800084a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800085c:	2307      	movs	r3, #7
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <MX_GPIO_Init+0x1b0>)
 8000868:	f002 fba8 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086c:	2340      	movs	r3, #64	; 0x40
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_GPIO_Init+0x1a8>)
 8000884:	f002 fb9a 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <MX_GPIO_Init+0x1a8>)
 800089c:	f002 fb8e 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b2:	230a      	movs	r3, #10
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_GPIO_Init+0x1b4>)
 80008be:	f002 fb7d 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0x1b4>)
 80008d8:	f002 fb70 	bl	8002fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2105      	movs	r1, #5
 80008e0:	2028      	movs	r0, #40	; 0x28
 80008e2:	f001 f8f3 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e6:	2028      	movs	r0, #40	; 0x28
 80008e8:	f001 f90c 	bl	8001b04 <HAL_NVIC_EnableIRQ>

}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40020000 	.word	0x40020000

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fca8 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f80a 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f7ff ff1c 	bl	8000754 <MX_GPIO_Init>
  MX_CAN1_Init();
 800091c:	f7ff fe62 	bl	80005e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000920:	f7ff fefc 	bl	800071c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000924:	f004 fbc9 	bl	80050ba <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	e7fe      	b.n	8000928 <main+0x1c>
	...

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f015 f846 	bl	80159cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <SystemClock_Config+0xd4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <SystemClock_Config+0xd4>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <SystemClock_Config+0xd4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <SystemClock_Config+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <SystemClock_Config+0xd8>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <SystemClock_Config+0xd8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	2310      	movs	r3, #16
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000994:	2308      	movs	r3, #8
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000998:	23d8      	movs	r3, #216	; 0xd8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fd59 	bl	8003464 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009b8:	f000 f852 	bl	8000a60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009bc:	f002 fd02 	bl	80033c4 <HAL_PWREx_EnableOverDrive>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009c6:	f000 f84b 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2107      	movs	r1, #7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 ffe9 	bl	80039c0 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009f4:	f000 f834 	bl	8000a60 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3750      	adds	r7, #80	; 0x50
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
//	CanPacket *canPack;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8000a14:	f002 fc97 	bl	8003346 <HAL_GPIO_TogglePin>
//	netconn_write(&com1, &canPack, sizeof(canPack), NETCONN_COPY);
//	if(xQueueSend(CanMessageProcess_Handler , &canPack, 100 ) == pdPASS )
//	{
//
//	}
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40020400 	.word	0x40020400

08000a24 <StartDefaultTask>:


void StartDefaultTask(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f003 fcea 	bl	8004404 <MX_LWIP_Init>
  tcpserver_init();
 8000a30:	f000 fa74 	bl	8000f1c <tcpserver_init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f004 fba3 	bl	8005180 <osDelay>
 8000a3a:	e7fb      	b.n	8000a34 <StartDefaultTask+0x10>

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 fc17 	bl	8001280 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010000 	.word	0x40010000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f001 f80f 	bl	8001acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_InitTick+0xd0>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 020c 	add.w	r2, r7, #12
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 f976 	bl	8003de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000af4:	f003 f960 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8000af8:	4603      	mov	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <HAL_InitTick+0xd4>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_InitTick+0xdc>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b32:	4818      	ldr	r0, [pc, #96]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b34:	f003 f986 	bl	8003e44 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d11b      	bne.n	8000b7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <HAL_InitTick+0xd8>)
 8000b48:	f003 f9de 	bl	8003f08 <HAL_TIM_Base_Start_IT>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d111      	bne.n	8000b7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 ffd2 	bl	8001b04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	d808      	bhi.n	8000b78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b66:	2200      	movs	r2, #0
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 ffae 	bl	8001acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0xe0>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e002      	b.n	8000b7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	200004f8 	.word	0x200004f8
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <CAN1_RX0_IRQHandler+0x10>)
 8000bd2:	f000 fc94 	bl	80014fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001f0 	.word	0x200001f0

08000be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000be6:	f003 fa07 	bl	8003ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200004f8 	.word	0x200004f8

08000bf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bfc:	f002 fbbe 	bl	800337c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <ETH_IRQHandler+0x10>)
 8000c0a:	f001 fb03 	bl	8002214 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20005710 	.word	0x20005710

08000c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return 1;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_kill>:

int _kill(int pid, int sig)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <_kill+0x20>)
 8000c34:	2216      	movs	r2, #22
 8000c36:	601a      	str	r2, [r3, #0]
  return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	2000f034 	.word	0x2000f034

08000c4c <_exit>:

void _exit (int status)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ffe5 	bl	8000c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c5e:	e7fe      	b.n	8000c5e <_exit+0x12>

08000c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e00a      	b.n	8000c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c72:	f3af 8000 	nop.w
 8000c76:	4601      	mov	r1, r0
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf0      	blt.n	8000c72 <_read+0x12>
  }

  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
  }
  return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_close>:

int _close(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_isatty>:

int _isatty(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d205      	bcs.n	8000d78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <_sbrk+0x6c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20080000 	.word	0x20080000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	20000544 	.word	0x20000544
 8000da4:	2000f038 	.word	0x2000f038
 8000da8:	2000f034 	.word	0x2000f034

08000dac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <tcp_thread>:
extern struct netconn com1;


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	6078      	str	r0, [r7, #4]
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f007 f9bb 	bl	8008158 <netconn_new_with_proto_and_callback>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <tcp_thread+0x124>)
 8000de6:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000de8:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <tcp_thread+0x124>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d07d      	beq.n	8000eec <tcp_thread+0x11c>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 15);
 8000df0:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <tcp_thread+0x124>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	220f      	movs	r2, #15
 8000df6:	4940      	ldr	r1, [pc, #256]	; (8000ef8 <tcp_thread+0x128>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 fa67 	bl	80082cc <netconn_bind>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d16b      	bne.n	8000ee2 <tcp_thread+0x112>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <tcp_thread+0x124>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fa93 	bl	800833c <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <tcp_thread+0x124>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4938      	ldr	r1, [pc, #224]	; (8000efc <tcp_thread+0x12c>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 fab9 	bl	8008394 <netconn_accept>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f3      	bne.n	8000e16 <tcp_thread+0x46>
				{
					com1 = *newconn;
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <tcp_thread+0x12c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <tcp_thread+0x130>)
 8000e34:	4614      	mov	r4, r2
 8000e36:	461d      	mov	r5, r3
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e44:	e884 0003 	stmia.w	r4, {r0, r1}

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000e48:	e037      	b.n	8000eba <tcp_thread+0xea>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <tcp_thread+0x134>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <tcp_thread+0x138>)
 8000e52:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <tcp_thread+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	899a      	ldrh	r2, [r3, #12]
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <tcp_thread+0x13c>)
 8000e5c:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <tcp_thread+0x134>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6859      	ldr	r1, [r3, #4]
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <tcp_thread+0x134>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	895b      	ldrh	r3, [r3, #10]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4827      	ldr	r0, [pc, #156]	; (8000f10 <tcp_thread+0x140>)
 8000e72:	f014 ffc6 	bl	8015e02 <strncpy>

							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000e76:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <tcp_thread+0x140>)
 8000e78:	4926      	ldr	r1, [pc, #152]	; (8000f14 <tcp_thread+0x144>)
 8000e7a:	4827      	ldr	r0, [pc, #156]	; (8000f18 <tcp_thread+0x148>)
 8000e7c:	f014 ff5e 	bl	8015d3c <siprintf>
 8000e80:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <tcp_thread+0x12c>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4922      	ldr	r1, [pc, #136]	; (8000f18 <tcp_thread+0x148>)
 8000e90:	f007 fd02 	bl	8008898 <netconn_write_partly>
							memset (msg, '\0', 1000);  // clear the buffer
 8000e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e98:	2100      	movs	r1, #0
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <tcp_thread+0x140>)
 8000e9c:	f014 fd96 	bl	80159cc <memset>
						}
						while (netbuf_next(buf) >0);
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <tcp_thread+0x134>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fa17 	bl	800a2d8 <netbuf_next>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	dcd6      	bgt.n	8000e5e <tcp_thread+0x8e>

						netbuf_delete(buf);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <tcp_thread+0x134>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 f9ef 	bl	800a298 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <tcp_thread+0x12c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4911      	ldr	r1, [pc, #68]	; (8000f04 <tcp_thread+0x134>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f007 fc6f 	bl	80087a4 <netconn_recv>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0be      	beq.n	8000e4a <tcp_thread+0x7a>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <tcp_thread+0x12c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fde3 	bl	8008a9c <netconn_close>
					netconn_delete(newconn);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <tcp_thread+0x12c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 f9da 	bl	8008294 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8000ee0:	e799      	b.n	8000e16 <tcp_thread+0x46>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <tcp_thread+0x124>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 f9d4 	bl	8008294 <netconn_delete>
		}
	}
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef4:	20000548 	.word	0x20000548
 8000ef8:	0801a3f0 	.word	0x0801a3f0
 8000efc:	2000054c 	.word	0x2000054c
 8000f00:	200004d0 	.word	0x200004d0
 8000f04:	20000550 	.word	0x20000550
 8000f08:	20000554 	.word	0x20000554
 8000f0c:	20000558 	.word	0x20000558
 8000f10:	2000055c 	.word	0x2000055c
 8000f14:	08016d18 	.word	0x08016d18
 8000f18:	20000944 	.word	0x20000944

08000f1c <tcpserver_init>:


void tcpserver_init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
  int a = sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <tcpserver_init+0x2c>)
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <tcpserver_init+0x30>)
 8000f30:	f014 fbaa 	bl	8015688 <sys_thread_new>
 8000f34:	4603      	mov	r3, r0
 8000f36:	607b      	str	r3, [r7, #4]
HAL_Delay(10);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f000 f9c1 	bl	80012c0 <HAL_Delay>
  //  xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask)
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08000dd1 	.word	0x08000dd1
 8000f4c:	08016d38 	.word	0x08016d38

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ff17 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f014 fcbd 	bl	80158fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fcc3 	bl	800090c <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000f94:	0801a564 	.word	0x0801a564
  ldr r2, =_sbss
 8000f98:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000f9c:	2000f038 	.word	0x2000f038

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <LAN8742_RegisterBusIO+0x28>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <LAN8742_RegisterBusIO+0x28>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <LAN8742_RegisterBusIO+0x28>
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e014      	b.n	8000ffa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d17c      	bne.n	8001120 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2220      	movs	r2, #32
 8001038:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e01c      	b.n	800107a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f107 0208 	add.w	r2, r7, #8
 8001048:	2112      	movs	r1, #18
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	4798      	blx	r3
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	da03      	bge.n	800105c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001054:	f06f 0304 	mvn.w	r3, #4
 8001058:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800105a:	e00b      	b.n	8001074 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	d105      	bne.n	8001074 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
         break;
 8001072:	e005      	b.n	8001080 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b1f      	cmp	r3, #31
 800107e:	d9df      	bls.n	8001040 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b1f      	cmp	r3, #31
 8001086:	d902      	bls.n	800108e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001088:	f06f 0302 	mvn.w	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d145      	bne.n	8001120 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a0:	2100      	movs	r1, #0
 80010a2:	4798      	blx	r3
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db37      	blt.n	800111a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6810      	ldr	r0, [r2, #0]
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	2100      	movs	r1, #0
 80010b8:	4798      	blx	r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db28      	blt.n	8001112 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010ca:	e01c      	b.n	8001106 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4798      	blx	r3
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010de:	d80e      	bhi.n	80010fe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6810      	ldr	r0, [r2, #0]
 80010e8:	f107 0208 	add.w	r2, r7, #8
 80010ec:	2100      	movs	r1, #0
 80010ee:	4798      	blx	r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da07      	bge.n	8001106 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80010f6:	f06f 0304 	mvn.w	r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
                 break;
 80010fc:	e010      	b.n	8001120 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80010fe:	f06f 0301 	mvn.w	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
               break;
 8001104:	e00c      	b.n	8001120 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1dd      	bne.n	80010cc <LAN8742_Init+0xc6>
 8001110:	e006      	b.n	8001120 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001112:	f06f 0304 	mvn.w	r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e002      	b.n	8001120 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800111a:	f06f 0303 	mvn.w	r3, #3
 800111e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d112      	bne.n	800114c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4798      	blx	r3
 800112c:	4603      	mov	r3, r0
 800112e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001130:	bf00      	nop
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4798      	blx	r3
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001144:	d9f5      	bls.n	8001132 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800114c:	693b      	ldr	r3, [r7, #16]
 }
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6810      	ldr	r0, [r2, #0]
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	2101      	movs	r1, #1
 8001170:	4798      	blx	r3
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	da02      	bge.n	800117e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001178:	f06f 0304 	mvn.w	r3, #4
 800117c:	e06e      	b.n	800125c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6810      	ldr	r0, [r2, #0]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	2101      	movs	r1, #1
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	da02      	bge.n	800119a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001194:	f06f 0304 	mvn.w	r3, #4
 8001198:	e060      	b.n	800125c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011a4:	2301      	movs	r3, #1
 80011a6:	e059      	b.n	800125c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6810      	ldr	r0, [r2, #0]
 80011b0:	f107 020c 	add.w	r2, r7, #12
 80011b4:	2100      	movs	r1, #0
 80011b6:	4798      	blx	r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da02      	bge.n	80011c4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011be:	f06f 0304 	mvn.w	r3, #4
 80011c2:	e04b      	b.n	800125c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d11b      	bne.n	8001206 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <LAN8742_GetLinkState+0x90>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011e2:	2302      	movs	r3, #2
 80011e4:	e03a      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e033      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011fe:	2304      	movs	r3, #4
 8001200:	e02c      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001202:	2305      	movs	r3, #5
 8001204:	e02a      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6810      	ldr	r0, [r2, #0]
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	211f      	movs	r1, #31
 8001214:	4798      	blx	r3
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	da02      	bge.n	8001222 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800121c:	f06f 0304 	mvn.w	r3, #4
 8001220:	e01c      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800122c:	2306      	movs	r3, #6
 800122e:	e015      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 031c 	and.w	r3, r3, #28
 8001236:	2b18      	cmp	r3, #24
 8001238:	d101      	bne.n	800123e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800123a:	2302      	movs	r3, #2
 800123c:	e00e      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f003 031c 	and.w	r3, r3, #28
 8001244:	2b08      	cmp	r3, #8
 8001246:	d101      	bne.n	800124c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001248:	2303      	movs	r3, #3
 800124a:	e007      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 031c 	and.w	r3, r3, #28
 8001252:	2b14      	cmp	r3, #20
 8001254:	d101      	bne.n	800125a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001256:	2304      	movs	r3, #4
 8001258:	e000      	b.n	800125c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800125a:	2305      	movs	r3, #5
    }				
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 fc24 	bl	8001ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	200f      	movs	r0, #15
 8001270:	f7ff fc24 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fbfa 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000d2c 	.word	0x20000d2c

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000d2c 	.word	0x20000d2c

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0ed      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f992 	bl	8000650 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff ffb4 	bl	80012a8 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001342:	e012      	b.n	800136a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001344:	f7ff ffb0 	bl	80012a8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0c5      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0e5      	beq.n	8001344 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0202 	bic.w	r2, r2, #2
 8001386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff ff8e 	bl	80012a8 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138e:	e012      	b.n	80013b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001390:	f7ff ff8a 	bl	80012a8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d90b      	bls.n	80013b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2205      	movs	r2, #5
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e09f      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e5      	bne.n	8001390 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e007      	b.n	80013ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e5b      	ldrb	r3, [r3, #25]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e007      	b.n	8001418 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001416:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e9b      	ldrb	r3, [r3, #26]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0210 	bic.w	r2, r2, #16
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e007      	b.n	800146c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0210 	orr.w	r2, r2, #16
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7f1b      	ldrb	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e007      	b.n	8001496 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7f5b      	ldrb	r3, [r3, #29]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e007      	b.n	80014c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	ea42 0103 	orr.w	r1, r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b08a      	sub	sp, #40	; 0x28
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d07c      	beq.n	800163e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f983 	bl	800186c <HAL_CAN_TxMailbox0CompleteCallback>
 8001566:	e016      	b.n	8001596 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
 800157a:	e00c      	b.n	8001596 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e002      	b.n	8001596 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f989 	bl	80018a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d024      	beq.n	80015ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f963 	bl	8001880 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ba:	e016      	b.n	80015ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e00c      	b.n	80015ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	e002      	b.n	80015ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f969 	bl	80018bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d024      	beq.n	800163e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f943 	bl	8001894 <HAL_CAN_TxMailbox2CompleteCallback>
 800160e:	e016      	b.n	800163e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
 8001622:	e00c      	b.n	800163e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	e002      	b.n	800163e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f949 	bl	80018d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00c      	beq.n	8001662 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2210      	movs	r2, #16
 8001660:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2208      	movs	r2, #8
 800167c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f930 	bl	80018e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff f9b3 	bl	8000a08 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2210      	movs	r2, #16
 80016c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2208      	movs	r2, #8
 80016e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f912 	bl	800190c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f8f9 	bl	80018f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2210      	movs	r2, #16
 8001720:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8fc 	bl	8001920 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2208      	movs	r2, #8
 8001742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8f5 	bl	8001934 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07b      	beq.n	800184c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d072      	beq.n	8001844 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d043      	beq.n	8001844 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03e      	beq.n	8001844 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017cc:	2b60      	cmp	r3, #96	; 0x60
 80017ce:	d02b      	beq.n	8001828 <HAL_CAN_IRQHandler+0x32a>
 80017d0:	2b60      	cmp	r3, #96	; 0x60
 80017d2:	d82e      	bhi.n	8001832 <HAL_CAN_IRQHandler+0x334>
 80017d4:	2b50      	cmp	r3, #80	; 0x50
 80017d6:	d022      	beq.n	800181e <HAL_CAN_IRQHandler+0x320>
 80017d8:	2b50      	cmp	r3, #80	; 0x50
 80017da:	d82a      	bhi.n	8001832 <HAL_CAN_IRQHandler+0x334>
 80017dc:	2b40      	cmp	r3, #64	; 0x40
 80017de:	d019      	beq.n	8001814 <HAL_CAN_IRQHandler+0x316>
 80017e0:	2b40      	cmp	r3, #64	; 0x40
 80017e2:	d826      	bhi.n	8001832 <HAL_CAN_IRQHandler+0x334>
 80017e4:	2b30      	cmp	r3, #48	; 0x30
 80017e6:	d010      	beq.n	800180a <HAL_CAN_IRQHandler+0x30c>
 80017e8:	2b30      	cmp	r3, #48	; 0x30
 80017ea:	d822      	bhi.n	8001832 <HAL_CAN_IRQHandler+0x334>
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d002      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x2f8>
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d005      	beq.n	8001800 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017f4:	e01d      	b.n	8001832 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fe:	e019      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001808:	e014      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001812:	e00f      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181c:	e00a      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001826:	e005      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001830:	e000      	b.n	8001834 <HAL_CAN_IRQHandler+0x336>
            break;
 8001832:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001842:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2204      	movs	r2, #4
 800184a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f872 	bl	8001948 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0000 	.word	0x05fa0000

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff4c 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ade:	f7ff ff61 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7ff ffb1 	bl	8001a50 <NVIC_EncodePriority>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff80 	bl	80019fc <__NVIC_SetPriority>
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff54 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06a      	b.n	8001c08 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2223      	movs	r2, #35	; 0x23
 8001b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f003 f875 	bl	8004c34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_ETH_Init+0xf0>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_ETH_Init+0xf4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b98:	f7ff fb86 	bl	80012a8 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b9e:	e011      	b.n	8001bc4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ba0:	f7ff fb82 	bl	80012a8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bae:	d909      	bls.n	8001bc4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	22e0      	movs	r2, #224	; 0xe0
 8001bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e021      	b.n	8001c08 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e4      	bne.n	8001ba0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 ff4c 	bl	8002a74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fff3 	bl	8002bc8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 f849 	bl	8002c7a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 ffb1 	bl	8002b58 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40013800 	.word	0x40013800

08001c18 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d17b      	bne.n	8001d22 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2223      	movs	r2, #35	; 0x23
 8001c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_ETH_Start_IT+0x114>)
 8001c56:	430b      	orrs	r3, r1
 8001c58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001c6c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f9fc 	bl	8002074 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff fb13 	bl	80012c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0204 	orr.w	r2, r2, #4
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fb00 	bl	80012c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fd74 	bl	80027b6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ce4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfc:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	69d9      	ldr	r1, [r3, #28]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_ETH_Start_IT+0x118>)
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d14:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2223      	movs	r2, #35	; 0x23
 8001d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	00020060 	.word	0x00020060
 8001d30:	0001a0c1 	.word	0x0001a0c1

08001d34 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d42:	2b23      	cmp	r3, #35	; 0x23
 8001d44:	d16e      	bne.n	8001e24 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2223      	movs	r2, #35	; 0x23
 8001d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	69d9      	ldr	r1, [r3, #28]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_ETH_Stop_IT+0xfc>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d64:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d94:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0204 	bic.w	r2, r2, #4
 8001da4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff fa86 	bl	80012c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fcfa 	bl	80027b6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fa70 	bl	80012c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00e      	b.n	8001e0c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	3212      	adds	r2, #18
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d9ed      	bls.n	8001dee <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	fffe5f3e 	.word	0xfffe5f3e

08001e34 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e045      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5e:	2b23      	cmp	r3, #35	; 0x23
 8001e60:	d13f      	bne.n	8001ee2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 ff70 	bl	8002d54 <ETH_Prepare_Tx_Descriptors>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02a      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e8e:	f3bf 8f4f 	dsb	sy
}
 8001e92:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d904      	bls.n	8001eb0 <HAL_ETH_Transmit_IT+0x7c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	1f1a      	subs	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2304      	movs	r3, #4
 8001ece:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2300      	movs	r3, #0
 8001edc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0a8      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	2b23      	cmp	r3, #35	; 0x23
 8001f20:	d001      	beq.n	8001f26 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0a1      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	3212      	adds	r2, #18
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f3c:	f1c3 0304 	rsb	r3, r3, #4
 8001f40:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f42:	e06a      	b.n	800201a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_ETH_ReadData+0x88>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d040      	beq.n	8001ff6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001fa8:	3b04      	subs	r3, #4
 8001faa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f002 fff9 	bl	8004fcc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	441a      	add	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d902      	bls.n	8002008 <HAL_ETH_ReadData+0x11c>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b04      	subs	r3, #4
 8002006:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	3212      	adds	r2, #18
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db06      	blt.n	8002030 <HAL_ETH_ReadData+0x144>
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d202      	bcs.n	8002030 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d089      	beq.n	8001f44 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f815 	bl	8002074 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002080:	2301      	movs	r3, #1
 8002082:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002088:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	3212      	adds	r2, #18
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800209a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800209c:	e040      	b.n	8002120 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d112      	bne.n	80020cc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 ff5e 	bl	8004f6c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	74fb      	strb	r3, [r7, #19]
 80020ba:	e007      	b.n	80020cc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	461a      	mov	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d026      	beq.n	8002120 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <ETH_UpdateDescriptor+0xe4>)
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	e003      	b.n	80020ea <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80020e8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020ea:	f3bf 8f5f 	dmb	sy
}
 80020ee:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d902      	bls.n	800210e <ETH_UpdateDescriptor+0x9a>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3b04      	subs	r3, #4
 800210c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	3212      	adds	r2, #18
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	617b      	str	r3, [r7, #20]
      desccount--;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <ETH_UpdateDescriptor+0xb8>
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1b8      	bne.n	800209e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	d00c      	beq.n	8002150 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	461a      	mov	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	80004600 	.word	0x80004600

0800215c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3318      	adds	r3, #24
 8002168:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800217a:	e03f      	b.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3b01      	subs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3304      	adds	r3, #4
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	3301      	adds	r3, #1
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d028      	beq.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db1b      	blt.n	80021f8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3304      	adds	r3, #4
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 ff3f 	bl	8005050 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	3304      	adds	r3, #4
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f6:	e001      	b.n	80021fc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_ETH_ReleaseTxPacket+0xac>
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1b9      	bne.n	800217c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d112      	bne.n	8002254 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d109      	bne.n	8002254 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_ETH_IRQHandler+0x178>)
 800224c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f002 fa54 	bl	80046fc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d113      	bne.n	800228e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10a      	bne.n	800228e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002286:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f002 fa47 	bl	800471c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d14c      	bne.n	800233c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b4:	d142      	bne.n	800233c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f043 0208 	orr.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d8:	d11a      	bne.n	8002310 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_ETH_IRQHandler+0x17c>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002304:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	22e0      	movs	r2, #224	; 0xe0
 800230a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800230e:	e012      	b.n	8002336 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	f248 6380 	movw	r3, #34432	; 0x8680
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232e:	461a      	mov	r2, r3
 8002330:	f248 6380 	movw	r3, #34432	; 0x8680
 8002334:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f002 fa00 	bl	800473c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d10e      	bne.n	8002368 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f81c 	bl	8002398 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_ETH_IRQHandler+0x180>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_ETH_IRQHandler+0x180>)
 8002376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800237a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f815 	bl	80023ac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	00010040 	.word	0x00010040
 8002390:	007e2000 	.word	0x007e2000
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 031c 	and.w	r3, r3, #28
 80023dc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	02db      	lsls	r3, r3, #11
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002410:	f7fe ff4a 	bl	80012a8 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002416:	e00d      	b.n	8002434 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002418:	f7fe ff46 	bl	80012a8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d301      	bcc.n	800242c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e010      	b.n	800244e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ec      	bne.n	8002418 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 031c 	and.w	r3, r3, #28
 8002472:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	02db      	lsls	r3, r3, #11
 8002478:	b29b      	uxth	r3, r3
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7fe fefa 	bl	80012a8 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024b6:	e00d      	b.n	80024d4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80024b8:	f7fe fef6 	bl	80012a8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d301      	bcc.n	80024cc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e009      	b.n	80024e0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ec      	bne.n	80024b8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d9      	b.n	80026b0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	b29a      	uxth	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e00b      	b.n	80026e8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d105      	bne.n	80026e6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f88f 	bl	8002800 <ETH_SetMACConfig>

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 031c 	bic.w	r3, r3, #28
 8002706:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002708:	f001 fb4a 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 800270c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d908      	bls.n	8002728 <HAL_ETH_SetMDIOClockRange+0x38>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d804      	bhi.n	8002728 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e027      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d908      	bls.n	8002742 <HAL_ETH_SetMDIOClockRange+0x52>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d204      	bcs.n	8002742 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f043 030c 	orr.w	r3, r3, #12
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e01a      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d303      	bcc.n	8002752 <HAL_ETH_SetMDIOClockRange+0x62>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d911      	bls.n	8002776 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d908      	bls.n	800276c <HAL_ETH_SetMDIOClockRange+0x7c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d804      	bhi.n	800276c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e005      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 0310 	orr.w	r3, r3, #16
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e000      	b.n	8002778 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002776:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	611a      	str	r2, [r3, #16]
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	01312cff 	.word	0x01312cff
 800278c:	02160ebf 	.word	0x02160ebf
 8002790:	03938700 	.word	0x03938700
 8002794:	05f5e0ff 	.word	0x05f5e0ff
 8002798:	08f0d17f 	.word	0x08f0d17f

0800279c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7fe fd6a 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027f6:	6193      	str	r3, [r2, #24]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <ETH_SetMACConfig+0x15c>)
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7c1b      	ldrb	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <ETH_SetMACConfig+0x28>
 8002822:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002826:	e000      	b.n	800282a <ETH_SetMACConfig+0x2a>
 8002828:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7c5b      	ldrb	r3, [r3, #17]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <ETH_SetMACConfig+0x38>
 8002832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002836:	e000      	b.n	800283a <ETH_SetMACConfig+0x3a>
 8002838:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800283a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7fdb      	ldrb	r3, [r3, #31]
 8002846:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002848:	431a      	orrs	r2, r3
                        macconf->Speed |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800284e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	7f92      	ldrb	r2, [r2, #30]
 8002854:	2a00      	cmp	r2, #0
 8002856:	d102      	bne.n	800285e <ETH_SetMACConfig+0x5e>
 8002858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285c:	e000      	b.n	8002860 <ETH_SetMACConfig+0x60>
 800285e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002860:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	7f1b      	ldrb	r3, [r3, #28]
 8002866:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002868:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800286e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002876:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800287e:	2a00      	cmp	r2, #0
 8002880:	d102      	bne.n	8002888 <ETH_SetMACConfig+0x88>
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	e000      	b.n	800288a <ETH_SetMACConfig+0x8a>
 8002888:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800288a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	7bdb      	ldrb	r3, [r3, #15]
 8002890:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002892:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002898:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028a0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028a2:	4313      	orrs	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe fd00 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d101      	bne.n	80028ee <ETH_SetMACConfig+0xee>
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	e000      	b.n	80028f0 <ETH_SetMACConfig+0xf0>
 80028ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028fe:	2a01      	cmp	r2, #1
 8002900:	d101      	bne.n	8002906 <ETH_SetMACConfig+0x106>
 8002902:	2208      	movs	r2, #8
 8002904:	e000      	b.n	8002908 <ETH_SetMACConfig+0x108>
 8002906:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002908:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002910:	2a01      	cmp	r2, #1
 8002912:	d101      	bne.n	8002918 <ETH_SetMACConfig+0x118>
 8002914:	2204      	movs	r2, #4
 8002916:	e000      	b.n	800291a <ETH_SetMACConfig+0x11a>
 8002918:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800291a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002922:	2a01      	cmp	r2, #1
 8002924:	d101      	bne.n	800292a <ETH_SetMACConfig+0x12a>
 8002926:	2202      	movs	r2, #2
 8002928:	e000      	b.n	800292c <ETH_SetMACConfig+0x12c>
 800292a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800292c:	4313      	orrs	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002944:	2001      	movs	r0, #1
 8002946:	f7fe fcbb 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	ff20810f 	.word	0xff20810f

08002960 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <ETH_SetDMAConfig+0x110>)
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	7b1b      	ldrb	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <ETH_SetDMAConfig+0x2c>
 8002986:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800298a:	e000      	b.n	800298e <ETH_SetDMAConfig+0x2e>
 800298c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	7b5b      	ldrb	r3, [r3, #13]
 8002992:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002994:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	7f52      	ldrb	r2, [r2, #29]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d102      	bne.n	80029a4 <ETH_SetDMAConfig+0x44>
 800299e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029a2:	e000      	b.n	80029a6 <ETH_SetDMAConfig+0x46>
 80029a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7b9b      	ldrb	r3, [r3, #14]
 80029ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	7f1b      	ldrb	r3, [r3, #28]
 80029ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7f9b      	ldrb	r3, [r3, #30]
 80029c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029d4:	4313      	orrs	r3, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	461a      	mov	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7fe fc62 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a04:	461a      	mov	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fe fc33 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	f8de3f23 	.word	0xf8de3f23

08002a74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0a6      	sub	sp, #152	; 0x98
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe86 	bl	8002800 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b28:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b34:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ff08 	bl	8002960 <ETH_SetDMAConfig>
}
 8002b50:	bf00      	nop
 8002b52:	3798      	adds	r7, #152	; 0x98
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3305      	adds	r3, #5
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	3204      	adds	r2, #4
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <ETH_MACAddressConfig+0x68>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3303      	adds	r3, #3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	061a      	lsls	r2, r3, #24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3301      	adds	r3, #1
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <ETH_MACAddressConfig+0x6c>)
 8002baa:	4413      	add	r3, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40028040 	.word	0x40028040
 8002bc4:	40028044 	.word	0x40028044

08002bc8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e03e      	b.n	8002c54 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68d9      	ldr	r1, [r3, #12]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	3206      	adds	r2, #6
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d80c      	bhi.n	8002c38 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e004      	b.n	8002c42 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d9bd      	bls.n	8002bd6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e046      	b.n	8002d16 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6919      	ldr	r1, [r3, #16]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	3212      	adds	r2, #18
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d80c      	bhi.n	8002d06 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6919      	ldr	r1, [r3, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e004      	b.n	8002d10 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d9b5      	bls.n	8002c88 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	60da      	str	r2, [r3, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b08d      	sub	sp, #52	; 0x34
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3318      	adds	r3, #24
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d7e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d96:	d007      	beq.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0ff      	b.n	8002fac <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	3301      	adds	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4b7d      	ldr	r3, [pc, #500]	; (8002fb8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0320 	and.w	r3, r3, #32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e2e:	f3bf 8f5f 	dmb	sy
}
 8002e32:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e40:	e082      	b.n	8002f48 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d902      	bls.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ea2:	d007      	beq.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d029      	beq.n	8002f08 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec6:	e019      	b.n	8002efc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ec8:	f3bf 8f5f 	dmb	sy
}
 8002ecc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	3301      	adds	r3, #1
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d902      	bls.n	8002eec <ETH_Prepare_Tx_Descriptors+0x198>
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	3b04      	subs	r3, #4
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	3301      	adds	r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3e1      	bcc.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e051      	b.n	8002fac <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f36:	f3bf 8f5f 	dmb	sy
}
 8002f3a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f af78 	bne.w	8002e42 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e005      	b.n	8002f72 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	3304      	adds	r3, #4
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f92:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002fa6:	b662      	cpsie	i
}
 8002fa8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3734      	adds	r7, #52	; 0x34
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	ffffe000 	.word	0xffffe000

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e175      	b.n	80032c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8164 	bne.w	80032c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d005      	beq.n	8003012 <HAL_GPIO_Init+0x56>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d130      	bne.n	8003074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	2203      	movs	r2, #3
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0201 	and.w	r2, r3, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b03      	cmp	r3, #3
 800307e:	d017      	beq.n	80030b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d123      	bne.n	8003104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	08da      	lsrs	r2, r3, #3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3208      	adds	r2, #8
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	08da      	lsrs	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3208      	adds	r2, #8
 80030fe:	69b9      	ldr	r1, [r7, #24]
 8003100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	2203      	movs	r2, #3
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80be 	beq.w	80032c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_GPIO_Init+0x324>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_GPIO_Init+0x324>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800315e:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <HAL_GPIO_Init+0x328>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_GPIO_Init+0x32c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d037      	beq.n	80031fa <HAL_GPIO_Init+0x23e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_GPIO_Init+0x330>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_GPIO_Init+0x23a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d02b      	beq.n	80031f2 <HAL_GPIO_Init+0x236>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a55      	ldr	r2, [pc, #340]	; (80032f4 <HAL_GPIO_Init+0x338>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d025      	beq.n	80031ee <HAL_GPIO_Init+0x232>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_GPIO_Init+0x33c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01f      	beq.n	80031ea <HAL_GPIO_Init+0x22e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_GPIO_Init+0x340>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x22a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_GPIO_Init+0x344>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x226>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_GPIO_Init+0x348>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x222>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_GPIO_Init+0x34c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x21e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4f      	ldr	r2, [pc, #316]	; (800330c <HAL_GPIO_Init+0x350>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x21a>
 80031d2:	2309      	movs	r3, #9
 80031d4:	e012      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031d6:	230a      	movs	r3, #10
 80031d8:	e010      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00e      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031de:	2307      	movs	r3, #7
 80031e0:	e00c      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e2:	2306      	movs	r3, #6
 80031e4:	e00a      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x240>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	; (80032e4 <HAL_GPIO_Init+0x328>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_GPIO_Init+0x354>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <HAL_GPIO_Init+0x354>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_GPIO_Init+0x354>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_GPIO_Init+0x354>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a14      	ldr	r2, [pc, #80]	; (8003310 <HAL_GPIO_Init+0x354>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f ae86 	bls.w	8002fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40021c00 	.word	0x40021c00
 8003308:	40022000 	.word	0x40022000
 800330c:	40022400 	.word	0x40022400
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43d9      	mvns	r1, r3
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	400b      	ands	r3, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d006      	beq.n	80033a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f806 	bl	80033ac <HAL_GPIO_EXTI_Callback>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_PWREx_EnableOverDrive+0x98>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f2:	f7fd ff59 	bl	80012a8 <HAL_GetTick>
 80033f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033f8:	e009      	b.n	800340e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033fa:	f7fd ff55 	bl	80012a8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003408:	d901      	bls.n	800340e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e022      	b.n	8003454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341a:	d1ee      	bne.n	80033fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003426:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003428:	f7fd ff3e 	bl	80012a8 <HAL_GetTick>
 800342c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800342e:	e009      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003430:	f7fd ff3a 	bl	80012a8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800343e:	d901      	bls.n	8003444 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e007      	b.n	8003454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003450:	d1ee      	bne.n	8003430 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000

08003464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e29b      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	4b96      	ldr	r3, [pc, #600]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b04      	cmp	r3, #4
 8003492:	d00c      	beq.n	80034ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003494:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d112      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62>
 80034a0:	4b90      	ldr	r3, [pc, #576]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ae:	4b8d      	ldr	r3, [pc, #564]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06c      	beq.n	8003594 <HAL_RCC_OscConfig+0x130>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d168      	bne.n	8003594 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e275      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x7a>
 80034d0:	4b84      	ldr	r3, [pc, #528]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a83      	ldr	r2, [pc, #524]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e02e      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x9c>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b7c      	ldr	r3, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7b      	ldr	r2, [pc, #492]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80034f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0xc0>
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xd8>
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6e      	ldr	r2, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6b      	ldr	r2, [pc, #428]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd feb0 	bl	80012a8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fd feac 	bl	80012a8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e229      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xe8>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fe9c 	bl	80012a8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fe98 	bl	80012a8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e215      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x110>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d069      	beq.n	8003676 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x190>
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x17a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1e9      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	493d      	ldr	r1, [pc, #244]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e040      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fe4e 	bl	80012a8 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7fd fe4a 	bl	80012a8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1c7      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4929      	ldr	r1, [pc, #164]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
 8003642:	e018      	b.n	8003676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fe2a 	bl	80012a8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd fe26 	bl	80012a8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1a3      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d038      	beq.n	80036f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fd fe07 	bl	80012a8 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fd fe03 	bl	80012a8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e180      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x23a>
 80036bc:	e01a      	b.n	80036f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_RCC_OscConfig+0x280>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd fded 	bl	80012a8 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fd fde9 	bl	80012a8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d903      	bls.n	80036e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e166      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
 80036e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	4b92      	ldr	r3, [pc, #584]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ee      	bne.n	80036d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a4 	beq.w	800384a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a88      	ldr	r2, [pc, #544]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b86      	ldr	r3, [pc, #536]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372a:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003736:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fd fdb1 	bl	80012a8 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fd fdad 	bl	80012a8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e12a      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375c:	4b76      	ldr	r3, [pc, #472]	; (8003938 <HAL_RCC_OscConfig+0x4d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x31a>
 8003770:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a6f      	ldr	r2, [pc, #444]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e02d      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x33c>
 8003786:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a67      	ldr	r2, [pc, #412]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x35e>
 80037a8:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a5e      	ldr	r2, [pc, #376]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x376>
 80037c2:	4b5c      	ldr	r3, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a5b      	ldr	r2, [pc, #364]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fd fd61 	bl	80012a8 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd fd5d 	bl	80012a8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0d8      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x386>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd fd4b 	bl	80012a8 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fd fd47 	bl	80012a8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0c2      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80ae 	beq.w	80039b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d06d      	beq.n	800393c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d14b      	bne.n	8003900 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b32      	ldr	r3, [pc, #200]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a31      	ldr	r2, [pc, #196]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 800386e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fd18 	bl	80012a8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fd14 	bl	80012a8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e091      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69da      	ldr	r2, [r3, #28]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	019b      	lsls	r3, r3, #6
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	3b01      	subs	r3, #1
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	491b      	ldr	r1, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a18      	ldr	r2, [pc, #96]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fce6 	bl	80012a8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd fce2 	bl	80012a8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e05f      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x47c>
 80038fe:	e057      	b.n	80039b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fccc 	bl	80012a8 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fcc8 	bl	80012a8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e045      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x4b0>
 8003932:	e03d      	b.n	80039b0 <HAL_RCC_OscConfig+0x54c>
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_RCC_OscConfig+0x558>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d030      	beq.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d129      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d122      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003972:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d119      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d10f      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d0      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d8:	4b6a      	ldr	r3, [pc, #424]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d910      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b67      	ldr	r3, [pc, #412]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 020f 	bic.w	r2, r3, #15
 80039ee:	4965      	ldr	r1, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d115      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e073      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06b      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0203 	bic.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4936      	ldr	r1, [pc, #216]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fd fbf8 	bl	80012a8 <HAL_GetTick>
 8003ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f7fd fbf4 	bl	80012a8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e053      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 020c 	and.w	r2, r3, #12
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1eb      	bne.n	8003abc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d210      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 020f 	bic.w	r2, r3, #15
 8003afa:	4922      	ldr	r1, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1cc>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1d0>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc ffa2 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0801a2b8 	.word	0x0801a2b8
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b094      	sub	sp, #80	; 0x50
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80e1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e0db      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd0:	e0db      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd6:	e0d8      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003be2:	4b6d      	ldr	r3, [pc, #436]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4621      	mov	r1, r4
 8003c24:	1a51      	subs	r1, r2, r1
 8003c26:	6139      	str	r1, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	018b      	lsls	r3, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c46:	4651      	mov	r1, sl
 8003c48:	018a      	lsls	r2, r1, #6
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c50:	4659      	mov	r1, fp
 8003c52:	eb63 0901 	sbc.w	r9, r3, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6a:	4690      	mov	r8, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	eb18 0303 	adds.w	r3, r8, r3
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	462b      	mov	r3, r5
 8003c78:	eb49 0303 	adc.w	r3, r9, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	028b      	lsls	r3, r1, #10
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c94:	4621      	mov	r1, r4
 8003c96:	028a      	lsls	r2, r1, #10
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca8:	f7fc fb1a 	bl	80002e0 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e058      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce2:	0150      	lsls	r0, r2, #5
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d08:	ebb2 040a 	subs.w	r4, r2, sl
 8003d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	00eb      	lsls	r3, r5, #3
 8003d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1e:	00e2      	lsls	r2, r4, #3
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4643      	mov	r3, r8
 8003d26:	18e3      	adds	r3, r4, r3
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	eb45 0303 	adc.w	r3, r5, r3
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	61fa      	str	r2, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	f7fc fac0 	bl	80002e0 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3750      	adds	r7, #80	; 0x50
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400

08003da0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000000 	.word	0x20000000

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0b5b      	lsrs	r3, r3, #13
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	0801a2c8 	.word	0x0801a2c8

08003de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	220f      	movs	r2, #15
 8003dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0203 	and.w	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	08db      	lsrs	r3, r3, #3
 8003e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_RCC_GetClockConfig+0x60>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40023c00 	.word	0x40023c00

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e049      	b.n	8003eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f841 	bl	8003ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 fa00 	bl	8004288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d001      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e054      	b.n	8003fca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a26      	ldr	r2, [pc, #152]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d01d      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <HAL_TIM_Base_Start_IT+0xe4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x80>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d115      	bne.n	8003fb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xec>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d015      	beq.n	8003fc6 <HAL_TIM_Base_Start_IT+0xbe>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d011      	beq.n	8003fc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	e008      	b.n	8003fc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e000      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40001800 	.word	0x40001800
 8003ff4:	00010007 	.word	0x00010007

08003ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b02      	cmp	r3, #2
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0202 	mvn.w	r2, #2
 8004024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f905 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8f7 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f908 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0204 	mvn.w	r2, #4
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8db 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8cd 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8de 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0208 	mvn.w	r2, #8
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8b1 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8a3 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f8b4 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b10      	cmp	r3, #16
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0210 	mvn.w	r2, #16
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2208      	movs	r2, #8
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f887 	bl	800424a <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f879 	bl	8004236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f88a 	bl	800425e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0201 	mvn.w	r2, #1
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fc60 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f91a 	bl	80043dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d10e      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d107      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f90d 	bl	80043f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f838 	bl	8004272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d10e      	bne.n	800422e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b20      	cmp	r3, #32
 800421c:	d107      	bne.n	800422e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0220 	mvn.w	r2, #32
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8cd 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a40      	ldr	r2, [pc, #256]	; (800439c <TIM_Base_SetConfig+0x114>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d00f      	beq.n	80042c8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3d      	ldr	r2, [pc, #244]	; (80043a0 <TIM_Base_SetConfig+0x118>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <TIM_Base_SetConfig+0x11c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3b      	ldr	r2, [pc, #236]	; (80043a8 <TIM_Base_SetConfig+0x120>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <TIM_Base_SetConfig+0x124>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d108      	bne.n	80042da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2f      	ldr	r2, [pc, #188]	; (800439c <TIM_Base_SetConfig+0x114>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d02b      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d027      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <TIM_Base_SetConfig+0x118>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d023      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2b      	ldr	r2, [pc, #172]	; (80043a4 <TIM_Base_SetConfig+0x11c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01f      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <TIM_Base_SetConfig+0x120>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01b      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a29      	ldr	r2, [pc, #164]	; (80043ac <TIM_Base_SetConfig+0x124>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d017      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <TIM_Base_SetConfig+0x128>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <TIM_Base_SetConfig+0x12c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_Base_SetConfig+0x130>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0x134>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <TIM_Base_SetConfig+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a23      	ldr	r2, [pc, #140]	; (80043c4 <TIM_Base_SetConfig+0x13c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <TIM_Base_SetConfig+0x114>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0xf8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <TIM_Base_SetConfig+0x124>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d103      	bne.n	8004388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	615a      	str	r2, [r3, #20]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40010400 	.word	0x40010400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800
 80043bc:	40001800 	.word	0x40001800
 80043c0:	40001c00 	.word	0x40001c00
 80043c4:	40002000 	.word	0x40002000

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800440a:	4b96      	ldr	r3, [pc, #600]	; (8004664 <MX_LWIP_Init+0x260>)
 800440c:	22c0      	movs	r2, #192	; 0xc0
 800440e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004410:	4b94      	ldr	r3, [pc, #592]	; (8004664 <MX_LWIP_Init+0x260>)
 8004412:	22a8      	movs	r2, #168	; 0xa8
 8004414:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004416:	4b93      	ldr	r3, [pc, #588]	; (8004664 <MX_LWIP_Init+0x260>)
 8004418:	2200      	movs	r2, #0
 800441a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 153;
 800441c:	4b91      	ldr	r3, [pc, #580]	; (8004664 <MX_LWIP_Init+0x260>)
 800441e:	2299      	movs	r2, #153	; 0x99
 8004420:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004422:	4b91      	ldr	r3, [pc, #580]	; (8004668 <MX_LWIP_Init+0x264>)
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004428:	4b8f      	ldr	r3, [pc, #572]	; (8004668 <MX_LWIP_Init+0x264>)
 800442a:	22ff      	movs	r2, #255	; 0xff
 800442c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800442e:	4b8e      	ldr	r3, [pc, #568]	; (8004668 <MX_LWIP_Init+0x264>)
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004434:	4b8c      	ldr	r3, [pc, #560]	; (8004668 <MX_LWIP_Init+0x264>)
 8004436:	2200      	movs	r2, #0
 8004438:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800443a:	4b8c      	ldr	r3, [pc, #560]	; (800466c <MX_LWIP_Init+0x268>)
 800443c:	22c0      	movs	r2, #192	; 0xc0
 800443e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004440:	4b8a      	ldr	r3, [pc, #552]	; (800466c <MX_LWIP_Init+0x268>)
 8004442:	22a8      	movs	r2, #168	; 0xa8
 8004444:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <MX_LWIP_Init+0x268>)
 8004448:	2200      	movs	r2, #0
 800444a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800444c:	4b87      	ldr	r3, [pc, #540]	; (800466c <MX_LWIP_Init+0x268>)
 800444e:	2201      	movs	r2, #1
 8004450:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004452:	2100      	movs	r1, #0
 8004454:	2000      	movs	r0, #0
 8004456:	f006 f8dd 	bl	800a614 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800445a:	4b82      	ldr	r3, [pc, #520]	; (8004664 <MX_LWIP_Init+0x260>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	061a      	lsls	r2, r3, #24
 8004460:	4b80      	ldr	r3, [pc, #512]	; (8004664 <MX_LWIP_Init+0x260>)
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <MX_LWIP_Init+0x260>)
 800446a:	789b      	ldrb	r3, [r3, #2]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	4313      	orrs	r3, r2
 8004470:	4a7c      	ldr	r2, [pc, #496]	; (8004664 <MX_LWIP_Init+0x260>)
 8004472:	78d2      	ldrb	r2, [r2, #3]
 8004474:	4313      	orrs	r3, r2
 8004476:	061a      	lsls	r2, r3, #24
 8004478:	4b7a      	ldr	r3, [pc, #488]	; (8004664 <MX_LWIP_Init+0x260>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	0619      	lsls	r1, r3, #24
 800447e:	4b79      	ldr	r3, [pc, #484]	; (8004664 <MX_LWIP_Init+0x260>)
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4319      	orrs	r1, r3
 8004486:	4b77      	ldr	r3, [pc, #476]	; (8004664 <MX_LWIP_Init+0x260>)
 8004488:	789b      	ldrb	r3, [r3, #2]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	430b      	orrs	r3, r1
 800448e:	4975      	ldr	r1, [pc, #468]	; (8004664 <MX_LWIP_Init+0x260>)
 8004490:	78c9      	ldrb	r1, [r1, #3]
 8004492:	430b      	orrs	r3, r1
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800449a:	431a      	orrs	r2, r3
 800449c:	4b71      	ldr	r3, [pc, #452]	; (8004664 <MX_LWIP_Init+0x260>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	0619      	lsls	r1, r3, #24
 80044a2:	4b70      	ldr	r3, [pc, #448]	; (8004664 <MX_LWIP_Init+0x260>)
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	4319      	orrs	r1, r3
 80044aa:	4b6e      	ldr	r3, [pc, #440]	; (8004664 <MX_LWIP_Init+0x260>)
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	430b      	orrs	r3, r1
 80044b2:	496c      	ldr	r1, [pc, #432]	; (8004664 <MX_LWIP_Init+0x260>)
 80044b4:	78c9      	ldrb	r1, [r1, #3]
 80044b6:	430b      	orrs	r3, r1
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044be:	431a      	orrs	r2, r3
 80044c0:	4b68      	ldr	r3, [pc, #416]	; (8004664 <MX_LWIP_Init+0x260>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	0619      	lsls	r1, r3, #24
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <MX_LWIP_Init+0x260>)
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	4319      	orrs	r1, r3
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <MX_LWIP_Init+0x260>)
 80044d0:	789b      	ldrb	r3, [r3, #2]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	430b      	orrs	r3, r1
 80044d6:	4963      	ldr	r1, [pc, #396]	; (8004664 <MX_LWIP_Init+0x260>)
 80044d8:	78c9      	ldrb	r1, [r1, #3]
 80044da:	430b      	orrs	r3, r1
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	4313      	orrs	r3, r2
 80044e0:	4a63      	ldr	r2, [pc, #396]	; (8004670 <MX_LWIP_Init+0x26c>)
 80044e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80044e4:	4b60      	ldr	r3, [pc, #384]	; (8004668 <MX_LWIP_Init+0x264>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	061a      	lsls	r2, r3, #24
 80044ea:	4b5f      	ldr	r3, [pc, #380]	; (8004668 <MX_LWIP_Init+0x264>)
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	431a      	orrs	r2, r3
 80044f2:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <MX_LWIP_Init+0x264>)
 80044f4:	789b      	ldrb	r3, [r3, #2]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a5b      	ldr	r2, [pc, #364]	; (8004668 <MX_LWIP_Init+0x264>)
 80044fc:	78d2      	ldrb	r2, [r2, #3]
 80044fe:	4313      	orrs	r3, r2
 8004500:	061a      	lsls	r2, r3, #24
 8004502:	4b59      	ldr	r3, [pc, #356]	; (8004668 <MX_LWIP_Init+0x264>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	0619      	lsls	r1, r3, #24
 8004508:	4b57      	ldr	r3, [pc, #348]	; (8004668 <MX_LWIP_Init+0x264>)
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	4319      	orrs	r1, r3
 8004510:	4b55      	ldr	r3, [pc, #340]	; (8004668 <MX_LWIP_Init+0x264>)
 8004512:	789b      	ldrb	r3, [r3, #2]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	430b      	orrs	r3, r1
 8004518:	4953      	ldr	r1, [pc, #332]	; (8004668 <MX_LWIP_Init+0x264>)
 800451a:	78c9      	ldrb	r1, [r1, #3]
 800451c:	430b      	orrs	r3, r1
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004524:	431a      	orrs	r2, r3
 8004526:	4b50      	ldr	r3, [pc, #320]	; (8004668 <MX_LWIP_Init+0x264>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	0619      	lsls	r1, r3, #24
 800452c:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <MX_LWIP_Init+0x264>)
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	4319      	orrs	r1, r3
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <MX_LWIP_Init+0x264>)
 8004536:	789b      	ldrb	r3, [r3, #2]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	430b      	orrs	r3, r1
 800453c:	494a      	ldr	r1, [pc, #296]	; (8004668 <MX_LWIP_Init+0x264>)
 800453e:	78c9      	ldrb	r1, [r1, #3]
 8004540:	430b      	orrs	r3, r1
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004548:	431a      	orrs	r2, r3
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <MX_LWIP_Init+0x264>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	0619      	lsls	r1, r3, #24
 8004550:	4b45      	ldr	r3, [pc, #276]	; (8004668 <MX_LWIP_Init+0x264>)
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	4319      	orrs	r1, r3
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <MX_LWIP_Init+0x264>)
 800455a:	789b      	ldrb	r3, [r3, #2]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	430b      	orrs	r3, r1
 8004560:	4941      	ldr	r1, [pc, #260]	; (8004668 <MX_LWIP_Init+0x264>)
 8004562:	78c9      	ldrb	r1, [r1, #3]
 8004564:	430b      	orrs	r3, r1
 8004566:	0e1b      	lsrs	r3, r3, #24
 8004568:	4313      	orrs	r3, r2
 800456a:	4a42      	ldr	r2, [pc, #264]	; (8004674 <MX_LWIP_Init+0x270>)
 800456c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <MX_LWIP_Init+0x268>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	061a      	lsls	r2, r3, #24
 8004574:	4b3d      	ldr	r3, [pc, #244]	; (800466c <MX_LWIP_Init+0x268>)
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	4b3b      	ldr	r3, [pc, #236]	; (800466c <MX_LWIP_Init+0x268>)
 800457e:	789b      	ldrb	r3, [r3, #2]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	4313      	orrs	r3, r2
 8004584:	4a39      	ldr	r2, [pc, #228]	; (800466c <MX_LWIP_Init+0x268>)
 8004586:	78d2      	ldrb	r2, [r2, #3]
 8004588:	4313      	orrs	r3, r2
 800458a:	061a      	lsls	r2, r3, #24
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <MX_LWIP_Init+0x268>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	0619      	lsls	r1, r3, #24
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <MX_LWIP_Init+0x268>)
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	4319      	orrs	r1, r3
 800459a:	4b34      	ldr	r3, [pc, #208]	; (800466c <MX_LWIP_Init+0x268>)
 800459c:	789b      	ldrb	r3, [r3, #2]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	430b      	orrs	r3, r1
 80045a2:	4932      	ldr	r1, [pc, #200]	; (800466c <MX_LWIP_Init+0x268>)
 80045a4:	78c9      	ldrb	r1, [r1, #3]
 80045a6:	430b      	orrs	r3, r1
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ae:	431a      	orrs	r2, r3
 80045b0:	4b2e      	ldr	r3, [pc, #184]	; (800466c <MX_LWIP_Init+0x268>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	0619      	lsls	r1, r3, #24
 80045b6:	4b2d      	ldr	r3, [pc, #180]	; (800466c <MX_LWIP_Init+0x268>)
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	4319      	orrs	r1, r3
 80045be:	4b2b      	ldr	r3, [pc, #172]	; (800466c <MX_LWIP_Init+0x268>)
 80045c0:	789b      	ldrb	r3, [r3, #2]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	430b      	orrs	r3, r1
 80045c6:	4929      	ldr	r1, [pc, #164]	; (800466c <MX_LWIP_Init+0x268>)
 80045c8:	78c9      	ldrb	r1, [r1, #3]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045d2:	431a      	orrs	r2, r3
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <MX_LWIP_Init+0x268>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	0619      	lsls	r1, r3, #24
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <MX_LWIP_Init+0x268>)
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	4319      	orrs	r1, r3
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <MX_LWIP_Init+0x268>)
 80045e4:	789b      	ldrb	r3, [r3, #2]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	430b      	orrs	r3, r1
 80045ea:	4920      	ldr	r1, [pc, #128]	; (800466c <MX_LWIP_Init+0x268>)
 80045ec:	78c9      	ldrb	r1, [r1, #3]
 80045ee:	430b      	orrs	r3, r1
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	4313      	orrs	r3, r2
 80045f4:	4a20      	ldr	r2, [pc, #128]	; (8004678 <MX_LWIP_Init+0x274>)
 80045f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <MX_LWIP_Init+0x278>)
 80045fa:	9302      	str	r3, [sp, #8]
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <MX_LWIP_Init+0x27c>)
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	2300      	movs	r3, #0
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <MX_LWIP_Init+0x274>)
 8004606:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <MX_LWIP_Init+0x270>)
 8004608:	4919      	ldr	r1, [pc, #100]	; (8004670 <MX_LWIP_Init+0x26c>)
 800460a:	481e      	ldr	r0, [pc, #120]	; (8004684 <MX_LWIP_Init+0x280>)
 800460c:	f006 fdcc 	bl	800b1a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004610:	481c      	ldr	r0, [pc, #112]	; (8004684 <MX_LWIP_Init+0x280>)
 8004612:	f006 ff7b 	bl	800b50c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004616:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <MX_LWIP_Init+0x280>)
 8004618:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004628:	4816      	ldr	r0, [pc, #88]	; (8004684 <MX_LWIP_Init+0x280>)
 800462a:	f006 ff7f 	bl	800b52c <netif_set_up>
 800462e:	e002      	b.n	8004636 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004630:	4814      	ldr	r0, [pc, #80]	; (8004684 <MX_LWIP_Init+0x280>)
 8004632:	f006 ffe7 	bl	800b604 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004636:	4914      	ldr	r1, [pc, #80]	; (8004688 <MX_LWIP_Init+0x284>)
 8004638:	4812      	ldr	r0, [pc, #72]	; (8004684 <MX_LWIP_Init+0x280>)
 800463a:	f007 f879 	bl	800b730 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <MX_LWIP_Init+0x288>)
 8004640:	1d3c      	adds	r4, r7, #4
 8004642:	461d      	mov	r5, r3
 8004644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800464c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	490c      	ldr	r1, [pc, #48]	; (8004684 <MX_LWIP_Init+0x280>)
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fd47 	bl	80050e8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bdb0      	pop	{r4, r5, r7, pc}
 8004662:	bf00      	nop
 8004664:	20000d70 	.word	0x20000d70
 8004668:	20000d74 	.word	0x20000d74
 800466c:	20000d78 	.word	0x20000d78
 8004670:	20000d64 	.word	0x20000d64
 8004674:	20000d68 	.word	0x20000d68
 8004678:	20000d6c 	.word	0x20000d6c
 800467c:	0800a525 	.word	0x0800a525
 8004680:	08004b89 	.word	0x08004b89
 8004684:	20000d30 	.word	0x20000d30
 8004688:	08004691 	.word	0x08004691
 800468c:	08016d4c 	.word	0x08016d4c

08004690 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80046b6:	2320      	movs	r3, #32
 80046b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046ba:	f3bf 8f4f 	dsb	sy
}
 80046be:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80046c0:	e00b      	b.n	80046da <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80046c2:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dcf0      	bgt.n	80046c2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80046e0:	f3bf 8f4f 	dsb	sy
}
 80046e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046e6:	f3bf 8f6f 	isb	sy
}
 80046ea:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <HAL_ETH_RxCpltCallback+0x1c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fe69 	bl	80053e0 <osSemaphoreRelease>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20005708 	.word	0x20005708

0800471c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_ETH_TxCpltCallback+0x1c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fe59 	bl	80053e0 <osSemaphoreRelease>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2000570c 	.word	0x2000570c

0800473c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fe f829 	bl	800279c <HAL_ETH_GetDMAError>
 800474a:	4603      	mov	r3, r0
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d104      	bne.n	800475e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_ETH_ErrorCallback+0x2c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fe41 	bl	80053e0 <osSemaphoreRelease>
  }
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20005708 	.word	0x20005708

0800476c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b0a8      	sub	sp, #160	; 0xa0
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800478a:	2264      	movs	r2, #100	; 0x64
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f011 f91c 	bl	80159cc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004794:	4b85      	ldr	r3, [pc, #532]	; (80049ac <low_level_init+0x240>)
 8004796:	4a86      	ldr	r2, [pc, #536]	; (80049b0 <low_level_init+0x244>)
 8004798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 80047a6:	23e1      	movs	r3, #225	; 0xe1
 80047a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80047be:	4a7b      	ldr	r2, [pc, #492]	; (80049ac <low_level_init+0x240>)
 80047c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80047c6:	4b79      	ldr	r3, [pc, #484]	; (80049ac <low_level_init+0x240>)
 80047c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80047ce:	4b77      	ldr	r3, [pc, #476]	; (80049ac <low_level_init+0x240>)
 80047d0:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <low_level_init+0x248>)
 80047d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80047d4:	4b75      	ldr	r3, [pc, #468]	; (80049ac <low_level_init+0x240>)
 80047d6:	4a78      	ldr	r2, [pc, #480]	; (80049b8 <low_level_init+0x24c>)
 80047d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80047da:	4b74      	ldr	r3, [pc, #464]	; (80049ac <low_level_init+0x240>)
 80047dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80047e2:	4872      	ldr	r0, [pc, #456]	; (80049ac <low_level_init+0x240>)
 80047e4:	f7fd f99c 	bl	8001b20 <HAL_ETH_Init>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80047ee:	2238      	movs	r2, #56	; 0x38
 80047f0:	2100      	movs	r1, #0
 80047f2:	4872      	ldr	r0, [pc, #456]	; (80049bc <low_level_init+0x250>)
 80047f4:	f011 f8ea 	bl	80159cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80047f8:	4b70      	ldr	r3, [pc, #448]	; (80049bc <low_level_init+0x250>)
 80047fa:	2221      	movs	r2, #33	; 0x21
 80047fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80047fe:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <low_level_init+0x250>)
 8004800:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004804:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <low_level_init+0x250>)
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800480c:	486c      	ldr	r0, [pc, #432]	; (80049c0 <low_level_init+0x254>)
 800480e:	f006 fb85 	bl	800af1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2206      	movs	r2, #6
 8004816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800481a:	4b64      	ldr	r3, [pc, #400]	; (80049ac <low_level_init+0x240>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004826:	4b61      	ldr	r3, [pc, #388]	; (80049ac <low_level_init+0x240>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	785a      	ldrb	r2, [r3, #1]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004832:	4b5e      	ldr	r3, [pc, #376]	; (80049ac <low_level_init+0x240>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	789a      	ldrb	r2, [r3, #2]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800483e:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <low_level_init+0x240>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	78da      	ldrb	r2, [r3, #3]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800484a:	4b58      	ldr	r3, [pc, #352]	; (80049ac <low_level_init+0x240>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	791a      	ldrb	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004856:	4b55      	ldr	r3, [pc, #340]	; (80049ac <low_level_init+0x240>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	795a      	ldrb	r2, [r3, #5]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004868:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004870:	f043 030a 	orr.w	r3, r3, #10
 8004874:	b2da      	uxtb	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800487c:	2203      	movs	r2, #3
 800487e:	2100      	movs	r1, #0
 8004880:	2001      	movs	r0, #1
 8004882:	f001 f89d 	bl	80059c0 <xQueueGenericCreate>
 8004886:	4603      	mov	r3, r0
 8004888:	4a4e      	ldr	r2, [pc, #312]	; (80049c4 <low_level_init+0x258>)
 800488a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800488c:	2203      	movs	r2, #3
 800488e:	2100      	movs	r1, #0
 8004890:	2001      	movs	r0, #1
 8004892:	f001 f895 	bl	80059c0 <xQueueGenericCreate>
 8004896:	4603      	mov	r3, r0
 8004898:	4a4b      	ldr	r2, [pc, #300]	; (80049c8 <low_level_init+0x25c>)
 800489a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800489c:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <low_level_init+0x260>)
 800489e:	f107 0408 	add.w	r4, r7, #8
 80048a2:	461d      	mov	r5, r3
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fc16 	bl	80050e8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80048bc:	4944      	ldr	r1, [pc, #272]	; (80049d0 <low_level_init+0x264>)
 80048be:	4845      	ldr	r0, [pc, #276]	; (80049d4 <low_level_init+0x268>)
 80048c0:	f7fc fb6f 	bl	8000fa2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80048c4:	4843      	ldr	r0, [pc, #268]	; (80049d4 <low_level_init+0x268>)
 80048c6:	f7fc fb9e 	bl	8001006 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80048ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d165      	bne.n	800499e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048d2:	4840      	ldr	r0, [pc, #256]	; (80049d4 <low_level_init+0x268>)
 80048d4:	f7fc fc3f 	bl	8001156 <LAN8742_GetLinkState>
 80048d8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80048dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	dc06      	bgt.n	80048f2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f006 fef3 	bl	800b6d0 <netif_set_link_down>
      netif_set_down(netif);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f006 fe8a 	bl	800b604 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80048f0:	e057      	b.n	80049a2 <low_level_init+0x236>
      switch (PHYLinkState)
 80048f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048f6:	3b02      	subs	r3, #2
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d82b      	bhi.n	8004954 <low_level_init+0x1e8>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <low_level_init+0x198>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004915 	.word	0x08004915
 8004908:	08004927 	.word	0x08004927
 800490c:	08004937 	.word	0x08004937
 8004910:	08004947 	.word	0x08004947
        duplex = ETH_FULLDUPLEX_MODE;
 8004914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800491c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004924:	e01f      	b.n	8004966 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800492c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004934:	e017      	b.n	8004966 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800493a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800493e:	2300      	movs	r3, #0
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004944:	e00f      	b.n	8004966 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004952:	e008      	b.n	8004966 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800495c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004964:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800496a:	4619      	mov	r1, r3
 800496c:	480f      	ldr	r0, [pc, #60]	; (80049ac <low_level_init+0x240>)
 800496e:	f7fd fdbb 	bl	80024e8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800497e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	4809      	ldr	r0, [pc, #36]	; (80049ac <low_level_init+0x240>)
 8004986:	f7fd fe99 	bl	80026bc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800498a:	4808      	ldr	r0, [pc, #32]	; (80049ac <low_level_init+0x240>)
 800498c:	f7fd f944 	bl	8001c18 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f006 fdcb 	bl	800b52c <netif_set_up>
    netif_set_link_up(netif);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f006 fe66 	bl	800b668 <netif_set_link_up>
}
 800499c:	e001      	b.n	80049a2 <low_level_init+0x236>
    Error_Handler();
 800499e:	f7fc f85f 	bl	8000a60 <Error_Handler>
}
 80049a2:	bf00      	nop
 80049a4:	37a0      	adds	r7, #160	; 0xa0
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bdb0      	pop	{r4, r5, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20005710 	.word	0x20005710
 80049b0:	40028000 	.word	0x40028000
 80049b4:	20000134 	.word	0x20000134
 80049b8:	20000094 	.word	0x20000094
 80049bc:	200057c0 	.word	0x200057c0
 80049c0:	0801a2d0 	.word	0x0801a2d0
 80049c4:	20005708 	.word	0x20005708
 80049c8:	2000570c 	.word	0x2000570c
 80049cc:	08016d70 	.word	0x08016d70
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	200057f8 	.word	0x200057f8

080049d8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b092      	sub	sp, #72	; 0x48
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	2230      	movs	r2, #48	; 0x30
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f010 ffe7 	bl	80159cc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80049fe:	f107 030c 	add.w	r3, r7, #12
 8004a02:	2230      	movs	r2, #48	; 0x30
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f010 ffe0 	bl	80159cc <memset>

  for(q = p; q != NULL; q = q->next)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a10:	e045      	b.n	8004a9e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d902      	bls.n	8004a1e <low_level_output+0x46>
      return ERR_IF;
 8004a18:	f06f 030b 	mvn.w	r3, #11
 8004a1c:	e065      	b.n	8004aea <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3348      	adds	r3, #72	; 0x48
 8004a2e:	443b      	add	r3, r7
 8004a30:	3b3c      	subs	r3, #60	; 0x3c
 8004a32:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a36:	895b      	ldrh	r3, [r3, #10]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	3348      	adds	r3, #72	; 0x48
 8004a46:	443b      	add	r3, r7
 8004a48:	3b38      	subs	r3, #56	; 0x38
 8004a4a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a54:	1e5a      	subs	r2, r3, #1
 8004a56:	f107 000c 	add.w	r0, r7, #12
 8004a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	18c1      	adds	r1, r0, r3
 8004a66:	4613      	mov	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	3348      	adds	r3, #72	; 0x48
 8004a70:	443b      	add	r3, r7
 8004a72:	3b34      	subs	r3, #52	; 0x34
 8004a74:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3348      	adds	r3, #72	; 0x48
 8004a8a:	443b      	add	r3, r7
 8004a8c:	3b34      	subs	r3, #52	; 0x34
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a94:	3301      	adds	r3, #1
 8004a96:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1b6      	bne.n	8004a12 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	891b      	ldrh	r3, [r3, #8]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <low_level_output+0x11c>)
 8004aac:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004aae:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <low_level_output+0x11c>)
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004ab6:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <low_level_output+0x11c>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f007 fa8b 	bl	800bfd8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004ac2:	490c      	ldr	r1, [pc, #48]	; (8004af4 <low_level_output+0x11c>)
 8004ac4:	480c      	ldr	r0, [pc, #48]	; (8004af8 <low_level_output+0x120>)
 8004ac6:	f7fd f9b5 	bl	8001e34 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004aca:	bf00      	nop
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <low_level_output+0x124>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fc35 	bl	8005344 <osSemaphoreWait>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f5      	bne.n	8004acc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004ae0:	4805      	ldr	r0, [pc, #20]	; (8004af8 <low_level_output+0x120>)
 8004ae2:	f7fd fb3b 	bl	800215c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004ae6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3748      	adds	r7, #72	; 0x48
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200057c0 	.word	0x200057c0
 8004af8:	20005710 	.word	0x20005710
 8004afc:	2000570c 	.word	0x2000570c

08004b00 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <low_level_input+0x2c>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4805      	ldr	r0, [pc, #20]	; (8004b30 <low_level_input+0x30>)
 8004b1c:	f7fd f9e6 	bl	8001eec <HAL_ETH_ReadData>
  }

  return p;
 8004b20:	68fb      	ldr	r3, [r7, #12]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20005704 	.word	0x20005704
 8004b30:	20005710 	.word	0x20005710

08004b34 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <ethernetif_input+0x50>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fbf9 	bl	8005344 <osSemaphoreWait>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f5      	bne.n	8004b44 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004b58:	68b8      	ldr	r0, [r7, #8]
 8004b5a:	f7ff ffd1 	bl	8004b00 <low_level_input>
 8004b5e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	4798      	blx	r3
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f007 f988 	bl	800be8c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ea      	bne.n	8004b58 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b82:	e7df      	b.n	8004b44 <ethernetif_input+0x10>
 8004b84:	20005708 	.word	0x20005708

08004b88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <ethernetif_init+0x1c>
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <ethernetif_init+0x48>)
 8004b98:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004b9c:	490d      	ldr	r1, [pc, #52]	; (8004bd4 <ethernetif_init+0x4c>)
 8004b9e:	480e      	ldr	r0, [pc, #56]	; (8004bd8 <ethernetif_init+0x50>)
 8004ba0:	f010 fffc 	bl	8015b9c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2273      	movs	r2, #115	; 0x73
 8004ba8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2274      	movs	r2, #116	; 0x74
 8004bb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <ethernetif_init+0x54>)
 8004bb8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <ethernetif_init+0x58>)
 8004bbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fdd3 	bl	800476c <low_level_init>

  return ERR_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	08016d8c 	.word	0x08016d8c
 8004bd4:	08016da8 	.word	0x08016da8
 8004bd8:	08016db8 	.word	0x08016db8
 8004bdc:	08013659 	.word	0x08013659
 8004be0:	080049d9 	.word	0x080049d9

08004be4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	4809      	ldr	r0, [pc, #36]	; (8004c18 <pbuf_free_custom+0x34>)
 8004bf4:	f006 fa82 	bl	800b0fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <pbuf_free_custom+0x38>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <pbuf_free_custom+0x38>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <pbuf_free_custom+0x3c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fbe8 	bl	80053e0 <osSemaphoreRelease>
  }
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	0801a2d0 	.word	0x0801a2d0
 8004c1c:	20005704 	.word	0x20005704
 8004c20:	20005708 	.word	0x20005708

08004c24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c28:	f7fc fb3e 	bl	80012a8 <HAL_GetTick>
 8004c2c:	4603      	mov	r3, r0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a52      	ldr	r2, [pc, #328]	; (8004d9c <HAL_ETH_MspInit+0x168>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f040 809e 	bne.w	8004d94 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c58:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4a50      	ldr	r2, [pc, #320]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c62:	6313      	str	r3, [r2, #48]	; 0x30
 8004c64:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4a4a      	ldr	r2, [pc, #296]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7c:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4a44      	ldr	r2, [pc, #272]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c92:	6313      	str	r3, [r2, #48]	; 0x30
 8004c94:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca0:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4a3e      	ldr	r2, [pc, #248]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6313      	str	r3, [r2, #48]	; 0x30
 8004cac:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4a38      	ldr	r2, [pc, #224]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd0:	4b33      	ldr	r3, [pc, #204]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	4a32      	ldr	r2, [pc, #200]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cd6:	f043 0302 	orr.w	r3, r3, #2
 8004cda:	6313      	str	r3, [r2, #48]	; 0x30
 8004cdc:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_ETH_MspInit+0x16c>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d00:	2332      	movs	r3, #50	; 0x32
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d10:	230b      	movs	r3, #11
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4822      	ldr	r0, [pc, #136]	; (8004da4 <HAL_ETH_MspInit+0x170>)
 8004d1c:	f7fe f94e 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d20:	2386      	movs	r3, #134	; 0x86
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	2302      	movs	r3, #2
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d30:	230b      	movs	r3, #11
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d38:	4619      	mov	r1, r3
 8004d3a:	481b      	ldr	r0, [pc, #108]	; (8004da8 <HAL_ETH_MspInit+0x174>)
 8004d3c:	f7fe f93e 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d46:	2302      	movs	r3, #2
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d52:	230b      	movs	r3, #11
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4813      	ldr	r0, [pc, #76]	; (8004dac <HAL_ETH_MspInit+0x178>)
 8004d5e:	f7fe f92d 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d74:	230b      	movs	r3, #11
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	480c      	ldr	r0, [pc, #48]	; (8004db0 <HAL_ETH_MspInit+0x17c>)
 8004d80:	f7fe f91c 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004d84:	2200      	movs	r2, #0
 8004d86:	2105      	movs	r1, #5
 8004d88:	203d      	movs	r0, #61	; 0x3d
 8004d8a:	f7fc fe9f 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004d8e:	203d      	movs	r0, #61	; 0x3d
 8004d90:	f7fc feb8 	bl	8001b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d94:	bf00      	nop
 8004d96:	3738      	adds	r7, #56	; 0x38
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40028000 	.word	0x40028000
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40020800 	.word	0x40020800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40021800 	.word	0x40021800

08004db4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004db8:	4802      	ldr	r0, [pc, #8]	; (8004dc4 <ETH_PHY_IO_Init+0x10>)
 8004dba:	f7fd fc99 	bl	80026f0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20005710 	.word	0x20005710

08004dc8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return 0;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	68f9      	ldr	r1, [r7, #12]
 8004dea:	4807      	ldr	r0, [pc, #28]	; (8004e08 <ETH_PHY_IO_ReadReg+0x30>)
 8004dec:	f7fd fae8 	bl	80023c0 <HAL_ETH_ReadPHYRegister>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfa:	e000      	b.n	8004dfe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20005710 	.word	0x20005710

08004e0c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4807      	ldr	r0, [pc, #28]	; (8004e3c <ETH_PHY_IO_WriteReg+0x30>)
 8004e20:	f7fd fb19 	bl	8002456 <HAL_ETH_WritePHYRegister>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	e000      	b.n	8004e32 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20005710 	.word	0x20005710

08004e40 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e44:	f7fc fa30 	bl	80012a8 <HAL_GetTick>
 8004e48:	4603      	mov	r3, r0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b0a0      	sub	sp, #128	; 0x80
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	2264      	movs	r2, #100	; 0x64
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f010 fdb3 	bl	80159cc <memset>
  int32_t PHYLinkState = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e6e:	2300      	movs	r3, #0
 8004e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e72:	2300      	movs	r3, #0
 8004e74:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e7a:	483a      	ldr	r0, [pc, #232]	; (8004f64 <ethernet_link_thread+0x114>)
 8004e7c:	f7fc f96b 	bl	8001156 <LAN8742_GetLinkState>
 8004e80:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <ethernet_link_thread+0x5e>
 8004e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	dc09      	bgt.n	8004eae <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004e9a:	4833      	ldr	r0, [pc, #204]	; (8004f68 <ethernet_link_thread+0x118>)
 8004e9c:	f7fc ff4a 	bl	8001d34 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004ea0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ea2:	f006 fbaf 	bl	800b604 <netif_set_down>
    netif_set_link_down(netif);
 8004ea6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ea8:	f006 fc12 	bl	800b6d0 <netif_set_link_down>
 8004eac:	e055      	b.n	8004f5a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d14e      	bne.n	8004f5a <ethernet_link_thread+0x10a>
 8004ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	dd4b      	ble.n	8004f5a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec4:	3b02      	subs	r3, #2
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d82a      	bhi.n	8004f20 <ethernet_link_thread+0xd0>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <ethernet_link_thread+0x80>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ef3 	.word	0x08004ef3
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ee4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ef0:	e017      	b.n	8004f22 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004efa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004f00:	e00f      	b.n	8004f22 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f06:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004f10:	e007      	b.n	8004f22 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004f16:	2300      	movs	r3, #0
 8004f18:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004f1e:	e000      	b.n	8004f22 <ethernet_link_thread+0xd2>
    default:
      break;
 8004f20:	bf00      	nop
    }

    if(linkchanged)
 8004f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d018      	beq.n	8004f5a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	480e      	ldr	r0, [pc, #56]	; (8004f68 <ethernet_link_thread+0x118>)
 8004f30:	f7fd fada 	bl	80024e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f36:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	4619      	mov	r1, r3
 8004f42:	4809      	ldr	r0, [pc, #36]	; (8004f68 <ethernet_link_thread+0x118>)
 8004f44:	f7fd fbba 	bl	80026bc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004f48:	4807      	ldr	r0, [pc, #28]	; (8004f68 <ethernet_link_thread+0x118>)
 8004f4a:	f7fc fe65 	bl	8001c18 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004f4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f50:	f006 faec 	bl	800b52c <netif_set_up>
      netif_set_link_up(netif);
 8004f54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f56:	f006 fb87 	bl	800b668 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004f5a:	2064      	movs	r0, #100	; 0x64
 8004f5c:	f000 f910 	bl	8005180 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f60:	e78b      	b.n	8004e7a <ethernet_link_thread+0x2a>
 8004f62:	bf00      	nop
 8004f64:	200057f8 	.word	0x200057f8
 8004f68:	20005710 	.word	0x20005710

08004f6c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f74:	4812      	ldr	r0, [pc, #72]	; (8004fc0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004f76:	f006 f84d 	bl	800b014 <memp_malloc_pool>
 8004f7a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d014      	beq.n	8004fac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f103 0220 	add.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004f90:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f9a:	9201      	str	r2, [sp, #4]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2241      	movs	r2, #65	; 0x41
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f006 fdb7 	bl	800bb18 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004faa:	e005      	b.n	8004fb8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	0801a2d0 	.word	0x0801a2d0
 8004fc4:	08004be5 	.word	0x08004be5
 8004fc8:	20005704 	.word	0x20005704

08004fcc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3b20      	subs	r3, #32
 8004fea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	887a      	ldrh	r2, [r7, #2]
 8004ffc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e003      	b.n	8005016 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e009      	b.n	8005038 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	891a      	ldrh	r2, [r3, #8]
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	4413      	add	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f2      	bne.n	8005024 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fb2e 	bl	80046a4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005048:	bf00      	nop
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f006 ff17 	bl	800be8c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	4603      	mov	r3, r0
 800506e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005078:	2b84      	cmp	r3, #132	; 0x84
 800507a:	d005      	beq.n	8005088 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800507c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	3303      	adds	r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005088:	68fb      	ldr	r3, [r7, #12]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509c:	f3ef 8305 	mrs	r3, IPSR
 80050a0:	607b      	str	r3, [r7, #4]
  return(result);
 80050a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050be:	f001 fd89 	bl	8006bd4 <vTaskStartScheduler>
  
  return osOK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80050cc:	f7ff ffe3 	bl	8005096 <inHandlerMode>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80050d6:	f001 fea7 	bl	8006e28 <xTaskGetTickCountFromISR>
 80050da:	4603      	mov	r3, r0
 80050dc:	e002      	b.n	80050e4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80050de:	f001 fe93 	bl	8006e08 <xTaskGetTickCount>
 80050e2:	4603      	mov	r3, r0
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ea:	b089      	sub	sp, #36	; 0x24
 80050ec:	af04      	add	r7, sp, #16
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <osThreadCreate+0x54>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01c      	beq.n	800513c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685c      	ldr	r4, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681d      	ldr	r5, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691e      	ldr	r6, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ffa6 	bl	8005066 <makeFreeRtosPriority>
 800511a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005124:	9202      	str	r2, [sp, #8]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	9100      	str	r1, [sp, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	4632      	mov	r2, r6
 800512e:	4629      	mov	r1, r5
 8005130:	4620      	mov	r0, r4
 8005132:	f001 fb67 	bl	8006804 <xTaskCreateStatic>
 8005136:	4603      	mov	r3, r0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e01c      	b.n	8005176 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685c      	ldr	r4, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005148:	b29e      	uxth	r6, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff88 	bl	8005066 <makeFreeRtosPriority>
 8005156:	4602      	mov	r2, r0
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	9200      	str	r2, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4632      	mov	r2, r6
 8005164:	4629      	mov	r1, r5
 8005166:	4620      	mov	r0, r4
 8005168:	f001 fbaf 	bl	80068ca <xTaskCreate>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005180 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <osDelay+0x16>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	e000      	b.n	8005198 <osDelay+0x18>
 8005196:	2301      	movs	r3, #1
 8005198:	4618      	mov	r0, r3
 800519a:	f001 fce5 	bl	8006b68 <vTaskDelay>
  
  return osOK;
 800519e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4619      	mov	r1, r3
 80051be:	2001      	movs	r0, #1
 80051c0:	f000 fc91 	bl	8005ae6 <xQueueCreateMutexStatic>
 80051c4:	4603      	mov	r3, r0
 80051c6:	e003      	b.n	80051d0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80051c8:	2001      	movs	r0, #1
 80051ca:	f000 fc74 	bl	8005ab6 <xQueueCreateMutex>
 80051ce:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <osMutexWait+0x18>
    return osErrorParameter;
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	e03a      	b.n	8005266 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e009      	b.n	8005218 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <osMutexWait+0x40>
      ticks = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005218:	f7ff ff3d 	bl	8005096 <inHandlerMode>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d017      	beq.n	8005252 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005222:	f107 0308 	add.w	r3, r7, #8
 8005226:	461a      	mov	r2, r3
 8005228:	2100      	movs	r1, #0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 f8ac 	bl	8006388 <xQueueReceiveFromISR>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <osMutexWait+0x62>
      return osErrorOS;
 8005236:	23ff      	movs	r3, #255	; 0xff
 8005238:	e015      	b.n	8005266 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <osMutexWait+0x8c>
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <osMutexWait+0x98>)
 8005242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	e008      	b.n	8005264 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 ff83 	bl	8006160 <xQueueSemaphoreTake>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <osMutexWait+0x8c>
    return osErrorOS;
 8005260:	23ff      	movs	r3, #255	; 0xff
 8005262:	e000      	b.n	8005266 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005280:	2300      	movs	r3, #0
 8005282:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005284:	f7ff ff07 	bl	8005096 <inHandlerMode>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fde7 	bl	8005e68 <xQueueGiveFromISR>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d001      	beq.n	80052a4 <osMutexRelease+0x30>
      return osErrorOS;
 80052a0:	23ff      	movs	r3, #255	; 0xff
 80052a2:	e017      	b.n	80052d4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d013      	beq.n	80052d2 <osMutexRelease+0x5e>
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <osMutexRelease+0x68>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	e00a      	b.n	80052d2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80052bc:	2300      	movs	r3, #0
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fc2a 	bl	8005b1c <xQueueGenericSend>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80052ce:	23ff      	movs	r3, #255	; 0xff
 80052d0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00f      	beq.n	8005312 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10a      	bne.n	800530e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2203      	movs	r2, #3
 80052fe:	9200      	str	r2, [sp, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	2100      	movs	r1, #0
 8005304:	2001      	movs	r0, #1
 8005306:	f000 fad9 	bl	80058bc <xQueueGenericCreateStatic>
 800530a:	4603      	mov	r3, r0
 800530c:	e016      	b.n	800533c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	e014      	b.n	800533c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d110      	bne.n	800533a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005318:	2203      	movs	r2, #3
 800531a:	2100      	movs	r1, #0
 800531c:	2001      	movs	r0, #1
 800531e:	f000 fb4f 	bl	80059c0 <xQueueGenericCreate>
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <osSemaphoreCreate+0x56>
 800532a:	2300      	movs	r3, #0
 800532c:	2200      	movs	r2, #0
 800532e:	2100      	movs	r1, #0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fbf3 	bl	8005b1c <xQueueGenericSend>
      return sema;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	e000      	b.n	800533c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800533a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	e03a      	b.n	80053d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d103      	bne.n	8005370 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e009      	b.n	8005384 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d006      	beq.n	8005384 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <osSemaphoreWait+0x40>
      ticks = 1;
 8005380:	2301      	movs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005384:	f7ff fe87 	bl	8005096 <inHandlerMode>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800538e:	f107 0308 	add.w	r3, r7, #8
 8005392:	461a      	mov	r2, r3
 8005394:	2100      	movs	r1, #0
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fff6 	bl	8006388 <xQueueReceiveFromISR>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d001      	beq.n	80053a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80053a2:	23ff      	movs	r3, #255	; 0xff
 80053a4:	e015      	b.n	80053d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <osSemaphoreWait+0x8c>
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <osSemaphoreWait+0x98>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	e008      	b.n	80053d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fecd 	bl	8006160 <xQueueSemaphoreTake>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80053cc:	23ff      	movs	r3, #255	; 0xff
 80053ce:	e000      	b.n	80053d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80053f0:	f7ff fe51 	bl	8005096 <inHandlerMode>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fd31 	bl	8005e68 <xQueueGiveFromISR>
 8005406:	4603      	mov	r3, r0
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800540c:	23ff      	movs	r3, #255	; 0xff
 800540e:	e017      	b.n	8005440 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d013      	beq.n	800543e <osSemaphoreRelease+0x5e>
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <osSemaphoreRelease+0x68>)
 8005418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	e00a      	b.n	800543e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005428:	2300      	movs	r3, #0
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fb74 	bl	8005b1c <xQueueGenericSend>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d001      	beq.n	800543e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800543a:	23ff      	movs	r3, #255	; 0xff
 800543c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005454:	f7ff fe1f 	bl	8005096 <inHandlerMode>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800545e:	2382      	movs	r3, #130	; 0x82
 8005460:	e003      	b.n	800546a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f856 	bl	8006514 <vQueueDelete>

  return osOK; 
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005472:	b590      	push	{r4, r7, lr}
 8005474:	b085      	sub	sp, #20
 8005476:	af02      	add	r7, sp, #8
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d011      	beq.n	80054a8 <osMessageCreate+0x36>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2400      	movs	r4, #0
 800549e:	9400      	str	r4, [sp, #0]
 80054a0:	f000 fa0c 	bl	80058bc <xQueueGenericCreateStatic>
 80054a4:	4603      	mov	r3, r0
 80054a6:	e008      	b.n	80054ba <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	4619      	mov	r1, r3
 80054b4:	f000 fa84 	bl	80059c0 <xQueueGenericCreate>
 80054b8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}
	...

080054c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <osMessagePut+0x1e>
    ticks = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80054e2:	f7ff fdd8 	bl	8005096 <inHandlerMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d018      	beq.n	800551e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054ec:	f107 0210 	add.w	r2, r7, #16
 80054f0:	f107 0108 	add.w	r1, r7, #8
 80054f4:	2300      	movs	r3, #0
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fc16 	bl	8005d28 <xQueueGenericSendFromISR>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <osMessagePut+0x42>
      return osErrorOS;
 8005502:	23ff      	movs	r3, #255	; 0xff
 8005504:	e018      	b.n	8005538 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <osMessagePut+0x72>
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <osMessagePut+0x7c>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	e00b      	b.n	8005536 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800551e:	f107 0108 	add.w	r1, r7, #8
 8005522:	2300      	movs	r3, #0
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 faf8 	bl	8005b1c <xQueueGenericSend>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <osMessagePut+0x72>
      return osErrorOS;
 8005532:	23ff      	movs	r3, #255	; 0xff
 8005534:	e000      	b.n	8005538 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b08b      	sub	sp, #44	; 0x2c
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	617b      	str	r3, [r7, #20]
    return event;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	461c      	mov	r4, r3
 8005566:	f107 0314 	add.w	r3, r7, #20
 800556a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800556e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005572:	e054      	b.n	800561e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005574:	2300      	movs	r3, #0
 8005576:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d103      	bne.n	800558c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	e009      	b.n	80055a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <osMessageGet+0x5c>
      ticks = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80055a0:	f7ff fd79 	bl	8005096 <inHandlerMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01c      	beq.n	80055e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80055aa:	f107 0220 	add.w	r2, r7, #32
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f000 fee6 	bl	8006388 <xQueueReceiveFromISR>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80055c2:	2310      	movs	r3, #16
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e001      	b.n	80055cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01d      	beq.n	800560e <osMessageGet+0xca>
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <osMessageGet+0xe4>)
 80055d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	e014      	b.n	800560e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	3304      	adds	r3, #4
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	4619      	mov	r1, r3
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f000 fcd0 	bl	8005f94 <xQueueReceive>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d102      	bne.n	8005600 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80055fa:	2310      	movs	r3, #16
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e006      	b.n	800560e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <osMessageGet+0xc6>
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <osMessageGet+0xc8>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	461c      	mov	r4, r3
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800561a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	372c      	adds	r7, #44	; 0x2c
 8005622:	46bd      	mov	sp, r7
 8005624:	bd90      	pop	{r4, r7, pc}
 8005626:	bf00      	nop
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005634:	f7ff fd2f 	bl	8005096 <inHandlerMode>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 ff48 	bl	80064d4 <uxQueueMessagesWaitingFromISR>
 8005644:	4603      	mov	r3, r0
 8005646:	e003      	b.n	8005650 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 ff23 	bl	8006494 <uxQueueMessagesWaiting>
 800564e:	4603      	mov	r3, r0
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005660:	f7ff fd19 	bl	8005096 <inHandlerMode>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <osMessageDelete+0x16>
    return osErrorISR;
 800566a:	2382      	movs	r3, #130	; 0x82
 800566c:	e003      	b.n	8005676 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 ff50 	bl	8006514 <vQueueDelete>

  return osOK; 
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f103 0208 	add.w	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 0208 	add.w	r2, r3, #8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f103 0208 	add.w	r2, r3, #8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d103      	bne.n	8005740 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e00c      	b.n	800575a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3308      	adds	r3, #8
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e002      	b.n	800574e <vListInsert+0x2e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d2f6      	bcs.n	8005748 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6892      	ldr	r2, [r2, #8]
 80057a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6852      	ldr	r2, [r2, #4]
 80057b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d103      	bne.n	80057c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10c      	bne.n	8005816 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	b672      	cpsid	i
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	b662      	cpsie	i
 8005810:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005816:	f002 f971 	bl	8007afc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	441a      	add	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	3b01      	subs	r3, #1
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	22ff      	movs	r2, #255	; 0xff
 800585a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d114      	bne.n	8005896 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01a      	beq.n	80058aa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3310      	adds	r3, #16
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fc2b 	bl	80070d4 <xTaskRemoveFromEventList>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <xQueueGenericReset+0xd0>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	e009      	b.n	80058aa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3310      	adds	r3, #16
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff feef 	bl	800567e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3324      	adds	r3, #36	; 0x24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff feea 	bl	800567e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058aa:	f002 f95b 	bl	8007b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058ae:	2301      	movs	r3, #1
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	; 0x38
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10c      	bne.n	80058ea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	b672      	cpsid	i
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	b662      	cpsie	i
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10c      	bne.n	800590a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	b672      	cpsid	i
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	b662      	cpsie	i
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <xQueueGenericCreateStatic+0x5a>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <xQueueGenericCreateStatic+0x5e>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueGenericCreateStatic+0x60>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	b672      	cpsid	i
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	b662      	cpsie	i
 8005934:	623b      	str	r3, [r7, #32]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d102      	bne.n	8005946 <xQueueGenericCreateStatic+0x8a>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <xQueueGenericCreateStatic+0x8e>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <xQueueGenericCreateStatic+0x90>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10c      	bne.n	800596a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	b672      	cpsid	i
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	b662      	cpsie	i
 8005964:	61fb      	str	r3, [r7, #28]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800596a:	2348      	movs	r3, #72	; 0x48
 800596c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b48      	cmp	r3, #72	; 0x48
 8005972:	d00c      	beq.n	800598e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	b672      	cpsid	i
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	b662      	cpsie	i
 8005988:	61bb      	str	r3, [r7, #24]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800598e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f847 	bl	8005a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3730      	adds	r7, #48	; 0x30
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10c      	bne.n	80059ee <xQueueGenericCreate+0x2e>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	613b      	str	r3, [r7, #16]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e004      	b.n	8005a04 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3348      	adds	r3, #72	; 0x48
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 f9a3 	bl	8007d54 <pvPortMalloc>
 8005a0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d011      	beq.n	8005a3a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	3348      	adds	r3, #72	; 0x48
 8005a1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a28:	79fa      	ldrb	r2, [r7, #7]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f805 	bl	8005a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	e002      	b.n	8005a66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a72:	2101      	movs	r1, #1
 8005a74:	69b8      	ldr	r0, [r7, #24]
 8005a76:	f7ff feb7 	bl	80057e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00e      	beq.n	8005aae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f837 	bl	8005b1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6939      	ldr	r1, [r7, #16]
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f7ff ff76 	bl	80059c0 <xQueueGenericCreate>
 8005ad4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff ffd3 	bl	8005a82 <prvInitialiseMutex>

		return xNewQueue;
 8005adc:	68fb      	ldr	r3, [r7, #12]
	}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b088      	sub	sp, #32
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	4603      	mov	r3, r0
 8005aee:	6039      	str	r1, [r7, #0]
 8005af0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005af2:	2301      	movs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	6939      	ldr	r1, [r7, #16]
 8005b04:	6978      	ldr	r0, [r7, #20]
 8005b06:	f7ff fed9 	bl	80058bc <xQueueGenericCreateStatic>
 8005b0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff ffb8 	bl	8005a82 <prvInitialiseMutex>

		return xNewQueue;
 8005b12:	68fb      	ldr	r3, [r7, #12]
	}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10c      	bne.n	8005b52 <xQueueGenericSend+0x36>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	b672      	cpsid	i
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	b662      	cpsie	i
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d103      	bne.n	8005b60 <xQueueGenericSend+0x44>
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <xQueueGenericSend+0x48>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <xQueueGenericSend+0x4a>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10c      	bne.n	8005b84 <xQueueGenericSend+0x68>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	b672      	cpsid	i
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	b662      	cpsie	i
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d103      	bne.n	8005b92 <xQueueGenericSend+0x76>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSend+0x7a>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSend+0x7c>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <xQueueGenericSend+0x9a>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	b672      	cpsid	i
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	b662      	cpsie	i
 8005bb0:	623b      	str	r3, [r7, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb6:	f001 fc55 	bl	8007464 <xTaskGetSchedulerState>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <xQueueGenericSend+0xaa>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <xQueueGenericSend+0xae>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <xQueueGenericSend+0xb0>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10c      	bne.n	8005bea <xQueueGenericSend+0xce>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	b672      	cpsid	i
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	b662      	cpsie	i
 8005be4:	61fb      	str	r3, [r7, #28]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bea:	f001 ff87 	bl	8007afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <xQueueGenericSend+0xe4>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d129      	bne.n	8005c54 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c06:	f000 fcc2 	bl	800658e <prvCopyDataToQueue>
 8005c0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fa5b 	bl	80070d4 <xTaskRemoveFromEventList>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c24:	4b3f      	ldr	r3, [pc, #252]	; (8005d24 <xQueueGenericSend+0x208>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	e00a      	b.n	8005c4c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c3c:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <xQueueGenericSend+0x208>)
 8005c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c4c:	f001 ff8a 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e063      	b.n	8005d1c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c5a:	f001 ff83 	bl	8007b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e05c      	b.n	8005d1c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fa95 	bl	800719c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c72:	2301      	movs	r3, #1
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c76:	f001 ff75 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c7a:	f001 f819 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c7e:	f001 ff3d 	bl	8007afc <vPortEnterCritical>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d103      	bne.n	8005c98 <xQueueGenericSend+0x17c>
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x192>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cae:	f001 ff59 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cb2:	1d3a      	adds	r2, r7, #4
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fa84 	bl	80071c8 <xTaskCheckForTimeOut>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d124      	bne.n	8005d10 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cc8:	f000 fd59 	bl	800677e <prvIsQueueFull>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d018      	beq.n	8005d04 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f9d4 	bl	8007088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce2:	f000 fce4 	bl	80066ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ce6:	f000 fff1 	bl	8006ccc <xTaskResumeAll>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f47f af7c 	bne.w	8005bea <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <xQueueGenericSend+0x208>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	e772      	b.n	8005bea <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d06:	f000 fcd2 	bl	80066ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d0a:	f000 ffdf 	bl	8006ccc <xTaskResumeAll>
 8005d0e:	e76c      	b.n	8005bea <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d12:	f000 fccc 	bl	80066ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d16:	f000 ffd9 	bl	8006ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3738      	adds	r7, #56	; 0x38
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08e      	sub	sp, #56	; 0x38
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10c      	bne.n	8005d5a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	b672      	cpsid	i
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	b662      	cpsie	i
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <xQueueGenericSendFromISR+0x40>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <xQueueGenericSendFromISR+0x44>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <xQueueGenericSendFromISR+0x46>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10c      	bne.n	8005d8c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	b672      	cpsid	i
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	b662      	cpsie	i
 8005d86:	623b      	str	r3, [r7, #32]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d103      	bne.n	8005d9a <xQueueGenericSendFromISR+0x72>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <xQueueGenericSendFromISR+0x76>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <xQueueGenericSendFromISR+0x78>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10c      	bne.n	8005dbe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	b672      	cpsid	i
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	b662      	cpsie	i
 8005db8:	61fb      	str	r3, [r7, #28]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dbe:	f001 ff85 	bl	8007ccc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	b672      	cpsid	i
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	b662      	cpsie	i
 8005dda:	61ba      	str	r2, [r7, #24]
 8005ddc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005dde:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <xQueueGenericSendFromISR+0xcc>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d12c      	bne.n	8005e4e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e04:	f000 fbc3 	bl	800658e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e08:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d112      	bne.n	8005e38 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	3324      	adds	r3, #36	; 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f958 	bl	80070d4 <xTaskRemoveFromEventList>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00e      	beq.n	8005e48 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e007      	b.n	8005e48 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	b25a      	sxtb	r2, r3
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e4c:	e001      	b.n	8005e52 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3738      	adds	r7, #56	; 0x38
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10c      	bne.n	8005e96 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	b672      	cpsid	i
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	b662      	cpsie	i
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <xQueueGiveFromISR+0x50>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	b672      	cpsid	i
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	b662      	cpsie	i
 8005eb2:	61fb      	str	r3, [r7, #28]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <xQueueGiveFromISR+0x60>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <xQueueGiveFromISR+0x64>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <xQueueGiveFromISR+0x66>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10c      	bne.n	8005eec <xQueueGiveFromISR+0x84>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	b672      	cpsid	i
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	b662      	cpsie	i
 8005ee6:	61bb      	str	r3, [r7, #24]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eec:	f001 feee 	bl	8007ccc <vPortValidateInterruptPriority>
	__asm volatile
 8005ef0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	b672      	cpsid	i
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	b662      	cpsie	i
 8005f08:	617a      	str	r2, [r7, #20]
 8005f0a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f0c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d22b      	bcs.n	8005f78 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d112      	bne.n	8005f62 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 f8c3 	bl	80070d4 <xTaskRemoveFromEventList>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e007      	b.n	8005f72 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f66:	3301      	adds	r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	b25a      	sxtb	r2, r3
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f72:	2301      	movs	r3, #1
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	e001      	b.n	8005f7c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f383 8811 	msr	BASEPRI, r3
}
 8005f86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3738      	adds	r7, #56	; 0x38
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <xQueueReceive+0x34>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	b672      	cpsid	i
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	b662      	cpsie	i
 8005fc2:	623b      	str	r3, [r7, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <xQueueReceive+0x42>
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <xQueueReceive+0x46>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueReceive+0x48>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <xQueueReceive+0x66>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	61fb      	str	r3, [r7, #28]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ffa:	f001 fa33 	bl	8007464 <xTaskGetSchedulerState>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <xQueueReceive+0x76>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xQueueReceive+0x7a>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueReceive+0x7c>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <xQueueReceive+0x9a>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	b672      	cpsid	i
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	b662      	cpsie	i
 8006028:	61bb      	str	r3, [r7, #24]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602e:	f001 fd65 	bl	8007afc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01f      	beq.n	800607e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006042:	f000 fb0e 	bl	8006662 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	3310      	adds	r3, #16
 800605a:	4618      	mov	r0, r3
 800605c:	f001 f83a 	bl	80070d4 <xTaskRemoveFromEventList>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <xQueueReceive+0x1c8>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006076:	f001 fd75 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 800607a:	2301      	movs	r3, #1
 800607c:	e069      	b.n	8006152 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006084:	f001 fd6e 	bl	8007b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006088:	2300      	movs	r3, #0
 800608a:	e062      	b.n	8006152 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f880 	bl	800719c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a0:	f001 fd60 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060a4:	f000 fe04 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a8:	f001 fd28 	bl	8007afc <vPortEnterCritical>
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d103      	bne.n	80060c2 <xQueueReceive+0x12e>
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <xQueueReceive+0x144>
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d8:	f001 fd44 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060dc:	1d3a      	adds	r2, r7, #4
 80060de:	f107 0310 	add.w	r3, r7, #16
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f86f 	bl	80071c8 <xTaskCheckForTimeOut>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d123      	bne.n	8006138 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f2:	f000 fb2e 	bl	8006752 <prvIsQueueEmpty>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d017      	beq.n	800612c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f000 ffbf 	bl	8007088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800610a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610c:	f000 facf 	bl	80066ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006110:	f000 fddc 	bl	8006ccc <xTaskResumeAll>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d189      	bne.n	800602e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <xQueueReceive+0x1c8>)
 800611c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	e780      	b.n	800602e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800612c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612e:	f000 fabe 	bl	80066ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006132:	f000 fdcb 	bl	8006ccc <xTaskResumeAll>
 8006136:	e77a      	b.n	800602e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613a:	f000 fab8 	bl	80066ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613e:	f000 fdc5 	bl	8006ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f000 fb05 	bl	8006752 <prvIsQueueEmpty>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	f43f af6f 	beq.w	800602e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10c      	bne.n	8006196 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	b672      	cpsid	i
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	b662      	cpsie	i
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	b672      	cpsid	i
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	b662      	cpsie	i
 80061b2:	61fb      	str	r3, [r7, #28]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b8:	f001 f954 	bl	8007464 <xTaskGetSchedulerState>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <xQueueSemaphoreTake+0x68>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <xQueueSemaphoreTake+0x6c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <xQueueSemaphoreTake+0x6e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	b672      	cpsid	i
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	b662      	cpsie	i
 80061e6:	61bb      	str	r3, [r7, #24]
}
 80061e8:	bf00      	nop
 80061ea:	e7fe      	b.n	80061ea <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ec:	f001 fc86 	bl	8007afc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d024      	beq.n	8006246 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	1e5a      	subs	r2, r3, #1
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800620c:	f001 faf0 	bl	80077f0 <pvTaskIncrementMutexHeldCount>
 8006210:	4602      	mov	r2, r0
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00f      	beq.n	800623e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	3310      	adds	r3, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff56 	bl	80070d4 <xTaskRemoveFromEventList>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800622e:	4b55      	ldr	r3, [pc, #340]	; (8006384 <xQueueSemaphoreTake+0x224>)
 8006230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800623e:	f001 fc91 	bl	8007b64 <vPortExitCritical>
				return pdPASS;
 8006242:	2301      	movs	r3, #1
 8006244:	e099      	b.n	800637a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d113      	bne.n	8006274 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	b672      	cpsid	i
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	b662      	cpsie	i
 8006266:	617b      	str	r3, [r7, #20]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800626c:	f001 fc7a 	bl	8007b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006270:	2300      	movs	r3, #0
 8006272:	e082      	b.n	800637a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627a:	f107 030c 	add.w	r3, r7, #12
 800627e:	4618      	mov	r0, r3
 8006280:	f000 ff8c 	bl	800719c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006288:	f001 fc6c 	bl	8007b64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628c:	f000 fd10 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006290:	f001 fc34 	bl	8007afc <vPortEnterCritical>
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d103      	bne.n	80062aa <xQueueSemaphoreTake+0x14a>
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d103      	bne.n	80062c0 <xQueueSemaphoreTake+0x160>
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c0:	f001 fc50 	bl	8007b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c4:	463a      	mov	r2, r7
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ff7b 	bl	80071c8 <xTaskCheckForTimeOut>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d132      	bne.n	800633e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062da:	f000 fa3a 	bl	8006752 <prvIsQueueEmpty>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d026      	beq.n	8006332 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80062ec:	f001 fc06 	bl	8007afc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f8d3 	bl	80074a0 <xTaskPriorityInherit>
 80062fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062fc:	f001 fc32 	bl	8007b64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f000 febd 	bl	8007088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800630e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006310:	f000 f9cd 	bl	80066ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006314:	f000 fcda 	bl	8006ccc <xTaskResumeAll>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	f47f af66 	bne.w	80061ec <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006320:	4b18      	ldr	r3, [pc, #96]	; (8006384 <xQueueSemaphoreTake+0x224>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	e75c      	b.n	80061ec <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006334:	f000 f9bb 	bl	80066ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006338:	f000 fcc8 	bl	8006ccc <xTaskResumeAll>
 800633c:	e756      	b.n	80061ec <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800633e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006340:	f000 f9b5 	bl	80066ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006344:	f000 fcc2 	bl	8006ccc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800634a:	f000 fa02 	bl	8006752 <prvIsQueueEmpty>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f af4b 	beq.w	80061ec <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800635c:	f001 fbce 	bl	8007afc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006362:	f000 f8fc 	bl	800655e <prvGetDisinheritPriorityAfterTimeout>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f9a0 	bl	80076b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006374:	f001 fbf6 	bl	8007b64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006378:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800637a:	4618      	mov	r0, r3
 800637c:	3738      	adds	r7, #56	; 0x38
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08e      	sub	sp, #56	; 0x38
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	b672      	cpsid	i
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	b662      	cpsie	i
 80063b2:	623b      	str	r3, [r7, #32]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <xQueueReceiveFromISR+0x3e>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xQueueReceiveFromISR+0x42>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueReceiveFromISR+0x44>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10c      	bne.n	80063ea <xQueueReceiveFromISR+0x62>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	b672      	cpsid	i
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	b662      	cpsie	i
 80063e4:	61fb      	str	r3, [r7, #28]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ea:	f001 fc6f 	bl	8007ccc <vPortValidateInterruptPriority>
	__asm volatile
 80063ee:	f3ef 8211 	mrs	r2, BASEPRI
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	b672      	cpsid	i
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	b662      	cpsie	i
 8006406:	61ba      	str	r2, [r7, #24]
 8006408:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800640a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d02f      	beq.n	800647a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006428:	f000 f91b 	bl	8006662 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d112      	bne.n	8006464 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	3310      	adds	r3, #16
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fe42 	bl	80070d4 <xTaskRemoveFromEventList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e007      	b.n	8006474 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006468:	3301      	adds	r3, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	b25a      	sxtb	r2, r3
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006474:	2301      	movs	r3, #1
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
 8006478:	e001      	b.n	800647e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f383 8811 	msr	BASEPRI, r3
}
 8006488:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800648c:	4618      	mov	r0, r3
 800648e:	3738      	adds	r7, #56	; 0x38
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80064bc:	f001 fb1e 	bl	8007afc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80064c6:	f001 fb4d 	bl	8007b64 <vPortExitCritical>

	return uxReturn;
 80064ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10c      	bne.n	8006500 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	b672      	cpsid	i
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	b662      	cpsie	i
 80064fa:	60fb      	str	r3, [r7, #12]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006506:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006508:	4618      	mov	r0, r3
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <vQueueDelete+0x2c>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	b672      	cpsid	i
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	b662      	cpsie	i
 800653a:	60bb      	str	r3, [r7, #8]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f935 	bl	80067b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fcc9 	bl	8007ee8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1c3 0307 	rsb	r3, r3, #7
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e001      	b.n	8006580 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006580:	68fb      	ldr	r3, [r7, #12]
	}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10d      	bne.n	80065c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d14d      	bne.n	8006650 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fff1 	bl	80075a0 <xTaskPriorityDisinherit>
 80065be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	e043      	b.n	8006650 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d119      	bne.n	8006602 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6858      	ldr	r0, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	461a      	mov	r2, r3
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	f00f f9cf 	bl	801597c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	441a      	add	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d32b      	bcc.n	8006650 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	e026      	b.n	8006650 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68d8      	ldr	r0, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	461a      	mov	r2, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	f00f f9b5 	bl	801597c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	425b      	negs	r3, r3
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d207      	bcs.n	800663e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	425b      	negs	r3, r3
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d105      	bne.n	8006650 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3b01      	subs	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006658:	697b      	ldr	r3, [r7, #20]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d018      	beq.n	80066a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	441a      	add	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d303      	bcc.n	8006696 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68d9      	ldr	r1, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	461a      	mov	r2, r3
 80066a0:	6838      	ldr	r0, [r7, #0]
 80066a2:	f00f f96b 	bl	801597c <memcpy>
	}
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066b6:	f001 fa21 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c2:	e011      	b.n	80066e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d012      	beq.n	80066f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3324      	adds	r3, #36	; 0x24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fcff 	bl	80070d4 <xTaskRemoveFromEventList>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066dc:	f000 fdda 	bl	8007294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	dce9      	bgt.n	80066c4 <prvUnlockQueue+0x16>
 80066f0:	e000      	b.n	80066f4 <prvUnlockQueue+0x46>
					break;
 80066f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	22ff      	movs	r2, #255	; 0xff
 80066f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066fc:	f001 fa32 	bl	8007b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006700:	f001 f9fc 	bl	8007afc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800670a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800670c:	e011      	b.n	8006732 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d012      	beq.n	800673c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3310      	adds	r3, #16
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fcda 	bl	80070d4 <xTaskRemoveFromEventList>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006726:	f000 fdb5 	bl	8007294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	3b01      	subs	r3, #1
 800672e:	b2db      	uxtb	r3, r3
 8006730:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006736:	2b00      	cmp	r3, #0
 8006738:	dce9      	bgt.n	800670e <prvUnlockQueue+0x60>
 800673a:	e000      	b.n	800673e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800673c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006746:	f001 fa0d 	bl	8007b64 <vPortExitCritical>
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800675a:	f001 f9cf 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006766:	2301      	movs	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e001      	b.n	8006770 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006770:	f001 f9f8 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 8006774:	68fb      	ldr	r3, [r7, #12]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006786:	f001 f9b9 	bl	8007afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	429a      	cmp	r2, r3
 8006794:	d102      	bne.n	800679c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006796:	2301      	movs	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e001      	b.n	80067a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067a0:	f001 f9e0 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 80067a4:	68fb      	ldr	r3, [r7, #12]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e016      	b.n	80067ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80067be:	4a10      	ldr	r2, [pc, #64]	; (8006800 <vQueueUnregisterQueue+0x50>)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10b      	bne.n	80067e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <vQueueUnregisterQueue+0x50>)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2100      	movs	r1, #0
 80067d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <vQueueUnregisterQueue+0x50>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	4413      	add	r3, r2
 80067e0:	2200      	movs	r2, #0
 80067e2:	605a      	str	r2, [r3, #4]
				break;
 80067e4:	e006      	b.n	80067f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b07      	cmp	r3, #7
 80067f0:	d9e5      	bls.n	80067be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20005818 	.word	0x20005818

08006804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af04      	add	r7, sp, #16
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10c      	bne.n	8006832 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	623b      	str	r3, [r7, #32]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	b672      	cpsid	i
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	b662      	cpsie	i
 800684c:	61fb      	str	r3, [r7, #28]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006852:	23b4      	movs	r3, #180	; 0xb4
 8006854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2bb4      	cmp	r3, #180	; 0xb4
 800685a:	d00c      	beq.n	8006876 <xTaskCreateStatic+0x72>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	b672      	cpsid	i
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	b662      	cpsie	i
 8006870:	61bb      	str	r3, [r7, #24]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006876:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01e      	beq.n	80068bc <xTaskCreateStatic+0xb8>
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	2202      	movs	r2, #2
 8006892:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006896:	2300      	movs	r3, #0
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	9302      	str	r3, [sp, #8]
 800689e:	f107 0314 	add.w	r3, r7, #20
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f850 	bl	8006954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b6:	f000 f8ed 	bl	8006a94 <prvAddNewTaskToReadyList>
 80068ba:	e001      	b.n	80068c0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068c0:	697b      	ldr	r3, [r7, #20]
	}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3728      	adds	r7, #40	; 0x28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08c      	sub	sp, #48	; 0x30
 80068ce:	af04      	add	r7, sp, #16
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 fa38 	bl	8007d54 <pvPortMalloc>
 80068e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ec:	20b4      	movs	r0, #180	; 0xb4
 80068ee:	f001 fa31 	bl	8007d54 <pvPortMalloc>
 80068f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006900:	e005      	b.n	800690e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006902:	6978      	ldr	r0, [r7, #20]
 8006904:	f001 faf0 	bl	8007ee8 <vPortFree>
 8006908:	e001      	b.n	800690e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d017      	beq.n	8006944 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	2300      	movs	r3, #0
 8006920:	9303      	str	r3, [sp, #12]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f80e 	bl	8006954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006938:	69f8      	ldr	r0, [r7, #28]
 800693a:	f000 f8ab 	bl	8006a94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800693e:	2301      	movs	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e002      	b.n	800694a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006944:	f04f 33ff 	mov.w	r3, #4294967295
 8006948:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800694a:	69bb      	ldr	r3, [r7, #24]
	}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800696c:	440b      	add	r3, r1
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00c      	beq.n	80069a0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	b672      	cpsid	i
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	b662      	cpsie	i
 800699a:	617b      	str	r3, [r7, #20]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01f      	beq.n	80069e6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	e012      	b.n	80069d2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	7819      	ldrb	r1, [r3, #0]
 80069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	3334      	adds	r3, #52	; 0x34
 80069bc:	460a      	mov	r2, r1
 80069be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d006      	beq.n	80069da <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	3301      	adds	r3, #1
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d9e9      	bls.n	80069ac <prvInitialiseNewTask+0x58>
 80069d8:	e000      	b.n	80069dc <prvInitialiseNewTask+0x88>
			{
				break;
 80069da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069e4:	e003      	b.n	80069ee <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2b06      	cmp	r3, #6
 80069f2:	d901      	bls.n	80069f8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069f4:	2306      	movs	r3, #6
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	2200      	movs	r2, #0
 8006a08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fe55 	bl	80056be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	3318      	adds	r3, #24
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fe50 	bl	80056be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	f1c3 0207 	rsb	r2, r3, #7
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	334c      	adds	r3, #76	; 0x4c
 8006a48:	2260      	movs	r2, #96	; 0x60
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f00e ffbd 	bl	80159cc <memset>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <prvInitialiseNewTask+0x134>)
 8006a56:	651a      	str	r2, [r3, #80]	; 0x50
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	4a0c      	ldr	r2, [pc, #48]	; (8006a8c <prvInitialiseNewTask+0x138>)
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	4a0b      	ldr	r2, [pc, #44]	; (8006a90 <prvInitialiseNewTask+0x13c>)
 8006a62:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	69b8      	ldr	r0, [r7, #24]
 8006a6a:	f000 ff3b 	bl	80078e4 <pxPortInitialiseStack>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a80:	bf00      	nop
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	0801a42c 	.word	0x0801a42c
 8006a8c:	0801a44c 	.word	0x0801a44c
 8006a90:	0801a40c 	.word	0x0801a40c

08006a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a9c:	f001 f82e 	bl	8007afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aa0:	4b2a      	ldr	r3, [pc, #168]	; (8006b4c <prvAddNewTaskToReadyList+0xb8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a29      	ldr	r2, [pc, #164]	; (8006b4c <prvAddNewTaskToReadyList+0xb8>)
 8006aa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006aaa:	4b29      	ldr	r3, [pc, #164]	; (8006b50 <prvAddNewTaskToReadyList+0xbc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ab2:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <prvAddNewTaskToReadyList+0xbc>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ab8:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <prvAddNewTaskToReadyList+0xb8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d110      	bne.n	8006ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ac0:	f000 fc0c 	bl	80072dc <prvInitialiseTaskLists>
 8006ac4:	e00d      	b.n	8006ae2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <prvAddNewTaskToReadyList+0xc0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <prvAddNewTaskToReadyList+0xbc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d802      	bhi.n	8006ae2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006adc:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <prvAddNewTaskToReadyList+0xbc>)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <prvAddNewTaskToReadyList+0xc4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	4a1b      	ldr	r2, [pc, #108]	; (8006b58 <prvAddNewTaskToReadyList+0xc4>)
 8006aea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <prvAddNewTaskToReadyList+0xc8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <prvAddNewTaskToReadyList+0xc8>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <prvAddNewTaskToReadyList+0xcc>)
 8006b0c:	441a      	add	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fe fddf 	bl	80056d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b1a:	f001 f823 	bl	8007b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <prvAddNewTaskToReadyList+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <prvAddNewTaskToReadyList+0xbc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d207      	bcs.n	8006b44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <prvAddNewTaskToReadyList+0xd0>)
 8006b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20005958 	.word	0x20005958
 8006b50:	20005858 	.word	0x20005858
 8006b54:	20005964 	.word	0x20005964
 8006b58:	20005974 	.word	0x20005974
 8006b5c:	20005960 	.word	0x20005960
 8006b60:	2000585c 	.word	0x2000585c
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d019      	beq.n	8006bae <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b7a:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <vTaskDelay+0x64>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00c      	beq.n	8006b9c <vTaskDelay+0x34>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	b672      	cpsid	i
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	b662      	cpsie	i
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006b9c:	f000 f888 	bl	8006cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fe38 	bl	8007818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ba8:	f000 f890 	bl	8006ccc <xTaskResumeAll>
 8006bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <vTaskDelay+0x68>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20005980 	.word	0x20005980
 8006bd0:	e000ed04 	.word	0xe000ed04

08006bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006be2:	463a      	mov	r2, r7
 8006be4:	1d39      	adds	r1, r7, #4
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7f9 fd7c 	bl	80006e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	9202      	str	r2, [sp, #8]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	460a      	mov	r2, r1
 8006c02:	4923      	ldr	r1, [pc, #140]	; (8006c90 <vTaskStartScheduler+0xbc>)
 8006c04:	4823      	ldr	r0, [pc, #140]	; (8006c94 <vTaskStartScheduler+0xc0>)
 8006c06:	f7ff fdfd 	bl	8006804 <xTaskCreateStatic>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <vTaskStartScheduler+0xc4>)
 8006c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c10:	4b21      	ldr	r3, [pc, #132]	; (8006c98 <vTaskStartScheduler+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e001      	b.n	8006c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d11d      	bne.n	8006c64 <vTaskStartScheduler+0x90>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	b672      	cpsid	i
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	b662      	cpsie	i
 8006c3c:	613b      	str	r3, [r7, #16]
}
 8006c3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c40:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <vTaskStartScheduler+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	334c      	adds	r3, #76	; 0x4c
 8006c46:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <vTaskStartScheduler+0xcc>)
 8006c48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c4a:	4b16      	ldr	r3, [pc, #88]	; (8006ca4 <vTaskStartScheduler+0xd0>)
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <vTaskStartScheduler+0xd4>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c58:	4b14      	ldr	r3, [pc, #80]	; (8006cac <vTaskStartScheduler+0xd8>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c5e:	f000 fecf 	bl	8007a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c62:	e010      	b.n	8006c86 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d10c      	bne.n	8006c86 <vTaskStartScheduler+0xb2>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <vTaskStartScheduler+0xb0>
}
 8006c86:	bf00      	nop
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	08016de0 	.word	0x08016de0
 8006c94:	080072ad 	.word	0x080072ad
 8006c98:	2000597c 	.word	0x2000597c
 8006c9c:	20005858 	.word	0x20005858
 8006ca0:	20000030 	.word	0x20000030
 8006ca4:	20005978 	.word	0x20005978
 8006ca8:	20005964 	.word	0x20005964
 8006cac:	2000595c 	.word	0x2000595c

08006cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <vTaskSuspendAll+0x18>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <vTaskSuspendAll+0x18>)
 8006cbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20005980 	.word	0x20005980

08006ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cda:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <xTaskResumeAll+0x118>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <xTaskResumeAll+0x30>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	603b      	str	r3, [r7, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cfc:	f000 fefe 	bl	8007afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d00:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <xTaskResumeAll+0x118>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	4a37      	ldr	r2, [pc, #220]	; (8006de4 <xTaskResumeAll+0x118>)
 8006d08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d0a:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <xTaskResumeAll+0x118>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d161      	bne.n	8006dd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d12:	4b35      	ldr	r3, [pc, #212]	; (8006de8 <xTaskResumeAll+0x11c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d05d      	beq.n	8006dd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d1a:	e02e      	b.n	8006d7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1c:	4b33      	ldr	r3, [pc, #204]	; (8006dec <xTaskResumeAll+0x120>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3318      	adds	r3, #24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fd32 	bl	8005792 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fd2d 	bl	8005792 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <xTaskResumeAll+0x124>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <xTaskResumeAll+0x124>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <xTaskResumeAll+0x128>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fe fcb9 	bl	80056d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <xTaskResumeAll+0x12c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d302      	bcc.n	8006d7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d74:	4b21      	ldr	r3, [pc, #132]	; (8006dfc <xTaskResumeAll+0x130>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d7a:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <xTaskResumeAll+0x120>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1cc      	bne.n	8006d1c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d88:	f000 fb4c 	bl	8007424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <xTaskResumeAll+0x134>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d98:	f000 f858 	bl	8006e4c <xTaskIncrementTick>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <xTaskResumeAll+0x130>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f1      	bne.n	8006d98 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006db4:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <xTaskResumeAll+0x134>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <xTaskResumeAll+0x130>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <xTaskResumeAll+0x138>)
 8006dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dd6:	f000 fec5 	bl	8007b64 <vPortExitCritical>

	return xAlreadyYielded;
 8006dda:	68bb      	ldr	r3, [r7, #8]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20005980 	.word	0x20005980
 8006de8:	20005958 	.word	0x20005958
 8006dec:	20005918 	.word	0x20005918
 8006df0:	20005960 	.word	0x20005960
 8006df4:	2000585c 	.word	0x2000585c
 8006df8:	20005858 	.word	0x20005858
 8006dfc:	2000596c 	.word	0x2000596c
 8006e00:	20005968 	.word	0x20005968
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <xTaskGetTickCount+0x1c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e14:	687b      	ldr	r3, [r7, #4]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000595c 	.word	0x2000595c

08006e28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e2e:	f000 ff4d 	bl	8007ccc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <xTaskGetTickCountFromISR+0x20>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e3c:	683b      	ldr	r3, [r7, #0]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	2000595c 	.word	0x2000595c

08006e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e56:	4b4f      	ldr	r3, [pc, #316]	; (8006f94 <xTaskIncrementTick+0x148>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 808a 	bne.w	8006f74 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e60:	4b4d      	ldr	r3, [pc, #308]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e68:	4a4b      	ldr	r2, [pc, #300]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d122      	bne.n	8006eba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e74:	4b49      	ldr	r3, [pc, #292]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	b672      	cpsid	i
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	b662      	cpsie	i
 8006e92:	603b      	str	r3, [r7, #0]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <xTaskIncrementTick+0x4a>
 8006e98:	4b40      	ldr	r3, [pc, #256]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a3e      	ldr	r2, [pc, #248]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	4b3d      	ldr	r3, [pc, #244]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	f000 fab5 	bl	8007424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eba:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d348      	bcc.n	8006f56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ece:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	601a      	str	r2, [r3, #0]
					break;
 8006ed6:	e03e      	b.n	8006f56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b30      	ldr	r3, [pc, #192]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d203      	bcs.n	8006ef8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ef0:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ef6:	e02e      	b.n	8006f56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fc48 	bl	8005792 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fc3f 	bl	8005792 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	2201      	movs	r2, #1
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	4b23      	ldr	r3, [pc, #140]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	4a22      	ldr	r2, [pc, #136]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f34:	441a      	add	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fe fbcb 	bl	80056d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <xTaskIncrementTick+0x168>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d3b9      	bcc.n	8006ec4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f54:	e7b6      	b.n	8006ec4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f56:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <xTaskIncrementTick+0x168>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4914      	ldr	r1, [pc, #80]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d907      	bls.n	8006f7e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e004      	b.n	8006f7e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a0f      	ldr	r2, [pc, #60]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTaskIncrementTick+0x170>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f8a:	697b      	ldr	r3, [r7, #20]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20005980 	.word	0x20005980
 8006f98:	2000595c 	.word	0x2000595c
 8006f9c:	20005910 	.word	0x20005910
 8006fa0:	20005914 	.word	0x20005914
 8006fa4:	20005970 	.word	0x20005970
 8006fa8:	20005978 	.word	0x20005978
 8006fac:	20005960 	.word	0x20005960
 8006fb0:	2000585c 	.word	0x2000585c
 8006fb4:	20005858 	.word	0x20005858
 8006fb8:	20005968 	.word	0x20005968
 8006fbc:	2000596c 	.word	0x2000596c

08006fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <vTaskSwitchContext+0xb0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fce:	4b29      	ldr	r3, [pc, #164]	; (8007074 <vTaskSwitchContext+0xb4>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd4:	e046      	b.n	8007064 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <vTaskSwitchContext+0xb4>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fdc:	4b26      	ldr	r3, [pc, #152]	; (8007078 <vTaskSwitchContext+0xb8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	fab3 f383 	clz	r3, r3
 8006fe8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	f1c3 031f 	rsb	r3, r3, #31
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	4922      	ldr	r1, [pc, #136]	; (800707c <vTaskSwitchContext+0xbc>)
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <vTaskSwitchContext+0x60>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	b672      	cpsid	i
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	b662      	cpsie	i
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <vTaskSwitchContext+0x5e>
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a14      	ldr	r2, [pc, #80]	; (800707c <vTaskSwitchContext+0xbc>)
 800702c:	4413      	add	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3308      	adds	r3, #8
 8007042:	429a      	cmp	r2, r3
 8007044:	d104      	bne.n	8007050 <vTaskSwitchContext+0x90>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <vTaskSwitchContext+0xc0>)
 8007058:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <vTaskSwitchContext+0xc0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	334c      	adds	r3, #76	; 0x4c
 8007060:	4a08      	ldr	r2, [pc, #32]	; (8007084 <vTaskSwitchContext+0xc4>)
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	20005980 	.word	0x20005980
 8007074:	2000596c 	.word	0x2000596c
 8007078:	20005960 	.word	0x20005960
 800707c:	2000585c 	.word	0x2000585c
 8007080:	20005858 	.word	0x20005858
 8007084:	20000030 	.word	0x20000030

08007088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10c      	bne.n	80070b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	b672      	cpsid	i
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	b662      	cpsie	i
 80070ac:	60fb      	str	r3, [r7, #12]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <vTaskPlaceOnEventList+0x48>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3318      	adds	r3, #24
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fe fb30 	bl	8005720 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070c0:	2101      	movs	r1, #1
 80070c2:	6838      	ldr	r0, [r7, #0]
 80070c4:	f000 fba8 	bl	8007818 <prvAddCurrentTaskToDelayedList>
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20005858 	.word	0x20005858

080070d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10c      	bne.n	8007104 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	b672      	cpsid	i
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	b662      	cpsie	i
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3318      	adds	r3, #24
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fb42 	bl	8005792 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <xTaskRemoveFromEventList+0xb0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11c      	bne.n	8007150 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3304      	adds	r3, #4
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fb39 	bl	8005792 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	2201      	movs	r2, #1
 8007126:	409a      	lsls	r2, r3
 8007128:	4b17      	ldr	r3, [pc, #92]	; (8007188 <xTaskRemoveFromEventList+0xb4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4313      	orrs	r3, r2
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <xTaskRemoveFromEventList+0xb4>)
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a13      	ldr	r2, [pc, #76]	; (800718c <xTaskRemoveFromEventList+0xb8>)
 8007140:	441a      	add	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fe fac5 	bl	80056d8 <vListInsertEnd>
 800714e:	e005      	b.n	800715c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	3318      	adds	r3, #24
 8007154:	4619      	mov	r1, r3
 8007156:	480e      	ldr	r0, [pc, #56]	; (8007190 <xTaskRemoveFromEventList+0xbc>)
 8007158:	f7fe fabe 	bl	80056d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <xTaskRemoveFromEventList+0xc0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	429a      	cmp	r2, r3
 8007168:	d905      	bls.n	8007176 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800716a:	2301      	movs	r3, #1
 800716c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <xTaskRemoveFromEventList+0xc4>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e001      	b.n	800717a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800717a:	697b      	ldr	r3, [r7, #20]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20005980 	.word	0x20005980
 8007188:	20005960 	.word	0x20005960
 800718c:	2000585c 	.word	0x2000585c
 8007190:	20005918 	.word	0x20005918
 8007194:	20005858 	.word	0x20005858
 8007198:	2000596c 	.word	0x2000596c

0800719c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <vTaskInternalSetTimeOutState+0x24>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <vTaskInternalSetTimeOutState+0x28>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20005970 	.word	0x20005970
 80071c4:	2000595c 	.word	0x2000595c

080071c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10c      	bne.n	80071f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	b672      	cpsid	i
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	b662      	cpsie	i
 80071ec:	613b      	str	r3, [r7, #16]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	b672      	cpsid	i
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	b662      	cpsie	i
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007212:	f000 fc73 	bl	8007afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007216:	4b1d      	ldr	r3, [pc, #116]	; (800728c <xTaskCheckForTimeOut+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d102      	bne.n	8007236 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007230:	2300      	movs	r3, #0
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e023      	b.n	800727e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b15      	ldr	r3, [pc, #84]	; (8007290 <xTaskCheckForTimeOut+0xc8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d007      	beq.n	8007252 <xTaskCheckForTimeOut+0x8a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e015      	b.n	800727e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	429a      	cmp	r2, r3
 800725a:	d20b      	bcs.n	8007274 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ff97 	bl	800719c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	e004      	b.n	800727e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800727e:	f000 fc71 	bl	8007b64 <vPortExitCritical>

	return xReturn;
 8007282:	69fb      	ldr	r3, [r7, #28]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	2000595c 	.word	0x2000595c
 8007290:	20005970 	.word	0x20005970

08007294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <vTaskMissedYield+0x14>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
}
 800729e:	bf00      	nop
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	2000596c 	.word	0x2000596c

080072ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072b4:	f000 f852 	bl	800735c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <prvIdleTask+0x28>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d9f9      	bls.n	80072b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <prvIdleTask+0x2c>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072d0:	e7f0      	b.n	80072b4 <prvIdleTask+0x8>
 80072d2:	bf00      	nop
 80072d4:	2000585c 	.word	0x2000585c
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072e2:	2300      	movs	r3, #0
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	e00c      	b.n	8007302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4a12      	ldr	r2, [pc, #72]	; (800733c <prvInitialiseTaskLists+0x60>)
 80072f4:	4413      	add	r3, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe f9c1 	bl	800567e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3301      	adds	r3, #1
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b06      	cmp	r3, #6
 8007306:	d9ef      	bls.n	80072e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007308:	480d      	ldr	r0, [pc, #52]	; (8007340 <prvInitialiseTaskLists+0x64>)
 800730a:	f7fe f9b8 	bl	800567e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800730e:	480d      	ldr	r0, [pc, #52]	; (8007344 <prvInitialiseTaskLists+0x68>)
 8007310:	f7fe f9b5 	bl	800567e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007314:	480c      	ldr	r0, [pc, #48]	; (8007348 <prvInitialiseTaskLists+0x6c>)
 8007316:	f7fe f9b2 	bl	800567e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800731a:	480c      	ldr	r0, [pc, #48]	; (800734c <prvInitialiseTaskLists+0x70>)
 800731c:	f7fe f9af 	bl	800567e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007320:	480b      	ldr	r0, [pc, #44]	; (8007350 <prvInitialiseTaskLists+0x74>)
 8007322:	f7fe f9ac 	bl	800567e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007326:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <prvInitialiseTaskLists+0x78>)
 8007328:	4a05      	ldr	r2, [pc, #20]	; (8007340 <prvInitialiseTaskLists+0x64>)
 800732a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <prvInitialiseTaskLists+0x7c>)
 800732e:	4a05      	ldr	r2, [pc, #20]	; (8007344 <prvInitialiseTaskLists+0x68>)
 8007330:	601a      	str	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2000585c 	.word	0x2000585c
 8007340:	200058e8 	.word	0x200058e8
 8007344:	200058fc 	.word	0x200058fc
 8007348:	20005918 	.word	0x20005918
 800734c:	2000592c 	.word	0x2000592c
 8007350:	20005944 	.word	0x20005944
 8007354:	20005910 	.word	0x20005910
 8007358:	20005914 	.word	0x20005914

0800735c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007362:	e019      	b.n	8007398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007364:	f000 fbca 	bl	8007afc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007368:	4b10      	ldr	r3, [pc, #64]	; (80073ac <prvCheckTasksWaitingTermination+0x50>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fa0c 	bl	8005792 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800737a:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <prvCheckTasksWaitingTermination+0x54>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	4a0b      	ldr	r2, [pc, #44]	; (80073b0 <prvCheckTasksWaitingTermination+0x54>)
 8007382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007384:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <prvCheckTasksWaitingTermination+0x58>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3b01      	subs	r3, #1
 800738a:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <prvCheckTasksWaitingTermination+0x58>)
 800738c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800738e:	f000 fbe9 	bl	8007b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f810 	bl	80073b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <prvCheckTasksWaitingTermination+0x58>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e1      	bne.n	8007364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000592c 	.word	0x2000592c
 80073b0:	20005958 	.word	0x20005958
 80073b4:	20005940 	.word	0x20005940

080073b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	334c      	adds	r3, #76	; 0x4c
 80073c4:	4618      	mov	r0, r3
 80073c6:	f00e fc4d 	bl	8015c64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d108      	bne.n	80073e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fd85 	bl	8007ee8 <vPortFree>
				vPortFree( pxTCB );
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd82 	bl	8007ee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073e4:	e01a      	b.n	800741c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d103      	bne.n	80073f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fd79 	bl	8007ee8 <vPortFree>
	}
 80073f6:	e011      	b.n	800741c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d00c      	beq.n	800741c <prvDeleteTCB+0x64>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	b672      	cpsid	i
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	b662      	cpsie	i
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <prvDeleteTCB+0x62>
	}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <prvResetNextTaskUnblockTime+0x38>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvResetNextTaskUnblockTime+0x3c>)
 8007436:	f04f 32ff 	mov.w	r2, #4294967295
 800743a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800743c:	e008      	b.n	8007450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743e:	4b07      	ldr	r3, [pc, #28]	; (800745c <prvResetNextTaskUnblockTime+0x38>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	4a04      	ldr	r2, [pc, #16]	; (8007460 <prvResetNextTaskUnblockTime+0x3c>)
 800744e:	6013      	str	r3, [r2, #0]
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20005910 	.word	0x20005910
 8007460:	20005978 	.word	0x20005978

08007464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <xTaskGetSchedulerState+0x34>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007472:	2301      	movs	r3, #1
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	e008      	b.n	800748a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007478:	4b08      	ldr	r3, [pc, #32]	; (800749c <xTaskGetSchedulerState+0x38>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007480:	2302      	movs	r3, #2
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	e001      	b.n	800748a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800748a:	687b      	ldr	r3, [r7, #4]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20005964 	.word	0x20005964
 800749c:	20005980 	.word	0x20005980

080074a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d069      	beq.n	800758a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	4b36      	ldr	r3, [pc, #216]	; (8007594 <xTaskPriorityInherit+0xf4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d259      	bcs.n	8007578 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db06      	blt.n	80074da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074cc:	4b31      	ldr	r3, [pc, #196]	; (8007594 <xTaskPriorityInherit+0xf4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	f1c3 0207 	rsb	r2, r3, #7
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6959      	ldr	r1, [r3, #20]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4a2b      	ldr	r2, [pc, #172]	; (8007598 <xTaskPriorityInherit+0xf8>)
 80074ec:	4413      	add	r3, r2
 80074ee:	4299      	cmp	r1, r3
 80074f0:	d13a      	bne.n	8007568 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe f94b 	bl	8005792 <uxListRemove>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d115      	bne.n	800752e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4924      	ldr	r1, [pc, #144]	; (8007598 <xTaskPriorityInherit+0xf8>)
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xTaskPriorityInherit+0x8e>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	2201      	movs	r2, #1
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	43da      	mvns	r2, r3
 8007524:	4b1d      	ldr	r3, [pc, #116]	; (800759c <xTaskPriorityInherit+0xfc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4013      	ands	r3, r2
 800752a:	4a1c      	ldr	r2, [pc, #112]	; (800759c <xTaskPriorityInherit+0xfc>)
 800752c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <xTaskPriorityInherit+0xf4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	409a      	lsls	r2, r3
 8007540:	4b16      	ldr	r3, [pc, #88]	; (800759c <xTaskPriorityInherit+0xfc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	4a15      	ldr	r2, [pc, #84]	; (800759c <xTaskPriorityInherit+0xfc>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4a10      	ldr	r2, [pc, #64]	; (8007598 <xTaskPriorityInherit+0xf8>)
 8007558:	441a      	add	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe f8b9 	bl	80056d8 <vListInsertEnd>
 8007566:	e004      	b.n	8007572 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007568:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <xTaskPriorityInherit+0xf4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e008      	b.n	800758a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <xTaskPriorityInherit+0xf4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	429a      	cmp	r2, r3
 8007584:	d201      	bcs.n	800758a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800758a:	68fb      	ldr	r3, [r7, #12]
	}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20005858 	.word	0x20005858
 8007598:	2000585c 	.word	0x2000585c
 800759c:	20005960 	.word	0x20005960

080075a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d072      	beq.n	800769c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075b6:	4b3c      	ldr	r3, [pc, #240]	; (80076a8 <xTaskPriorityDisinherit+0x108>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d00c      	beq.n	80075da <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	b672      	cpsid	i
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	b662      	cpsie	i
 80075d4:	60fb      	str	r3, [r7, #12]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10c      	bne.n	80075fc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	b672      	cpsid	i
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	b662      	cpsie	i
 80075f6:	60bb      	str	r3, [r7, #8]
}
 80075f8:	bf00      	nop
 80075fa:	e7fe      	b.n	80075fa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	429a      	cmp	r2, r3
 8007610:	d044      	beq.n	800769c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	2b00      	cmp	r3, #0
 8007618:	d140      	bne.n	800769c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3304      	adds	r3, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe f8b7 	bl	8005792 <uxListRemove>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d115      	bne.n	8007656 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	491f      	ldr	r1, [pc, #124]	; (80076ac <xTaskPriorityDisinherit+0x10c>)
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xTaskPriorityDisinherit+0xb6>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	2201      	movs	r2, #1
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43da      	mvns	r2, r3
 800764c:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <xTaskPriorityDisinherit+0x110>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <xTaskPriorityDisinherit+0x110>)
 8007654:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	f1c3 0207 	rsb	r2, r3, #7
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	2201      	movs	r2, #1
 8007670:	409a      	lsls	r2, r3
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <xTaskPriorityDisinherit+0x110>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4313      	orrs	r3, r2
 8007678:	4a0d      	ldr	r2, [pc, #52]	; (80076b0 <xTaskPriorityDisinherit+0x110>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4a08      	ldr	r2, [pc, #32]	; (80076ac <xTaskPriorityDisinherit+0x10c>)
 800768a:	441a      	add	r2, r3
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe f820 	bl	80056d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800769c:	697b      	ldr	r3, [r7, #20]
	}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20005858 	.word	0x20005858
 80076ac:	2000585c 	.word	0x2000585c
 80076b0:	20005960 	.word	0x20005960

080076b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076c2:	2301      	movs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8087 	beq.w	80077dc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	b672      	cpsid	i
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	b662      	cpsie	i
 80076ea:	60fb      	str	r3, [r7, #12]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d902      	bls.n	8007700 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e002      	b.n	8007706 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	429a      	cmp	r2, r3
 800770e:	d065      	beq.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	429a      	cmp	r2, r3
 8007718:	d160      	bne.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800771a:	4b32      	ldr	r3, [pc, #200]	; (80077e4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	429a      	cmp	r2, r3
 8007722:	d10c      	bne.n	800773e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	b672      	cpsid	i
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	b662      	cpsie	i
 8007738:	60bb      	str	r3, [r7, #8]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	db04      	blt.n	800775c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f1c3 0207 	rsb	r2, r3, #7
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6959      	ldr	r1, [r3, #20]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800776c:	4413      	add	r3, r2
 800776e:	4299      	cmp	r1, r3
 8007770:	d134      	bne.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe f80b 	bl	8005792 <uxListRemove>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d115      	bne.n	80077ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007786:	4918      	ldr	r1, [pc, #96]	; (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	2201      	movs	r2, #1
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	43da      	mvns	r2, r3
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4013      	ands	r3, r2
 80077aa:	4a10      	ldr	r2, [pc, #64]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	2201      	movs	r2, #1
 80077b4:	409a      	lsls	r2, r3
 80077b6:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80077ce:	441a      	add	r2, r3
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fd ff7e 	bl	80056d8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077dc:	bf00      	nop
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20005858 	.word	0x20005858
 80077e8:	2000585c 	.word	0x2000585c
 80077ec:	20005960 	.word	0x20005960

080077f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077f4:	4b07      	ldr	r3, [pc, #28]	; (8007814 <pvTaskIncrementMutexHeldCount+0x24>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <pvTaskIncrementMutexHeldCount+0x24>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007802:	3201      	adds	r2, #1
 8007804:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007806:	4b03      	ldr	r3, [pc, #12]	; (8007814 <pvTaskIncrementMutexHeldCount+0x24>)
 8007808:	681b      	ldr	r3, [r3, #0]
	}
 800780a:	4618      	mov	r0, r3
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	20005858 	.word	0x20005858

08007818 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007822:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3304      	adds	r3, #4
 800782e:	4618      	mov	r0, r3
 8007830:	f7fd ffaf 	bl	8005792 <uxListRemove>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	2201      	movs	r2, #1
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43da      	mvns	r2, r3
 8007848:	4b21      	ldr	r3, [pc, #132]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4013      	ands	r3, r2
 800784e:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007850:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d10a      	bne.n	8007870 <prvAddCurrentTaskToDelayedList+0x58>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007860:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	481a      	ldr	r0, [pc, #104]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800786a:	f7fd ff35 	bl	80056d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800786e:	e026      	b.n	80078be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007878:	4b14      	ldr	r3, [pc, #80]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	429a      	cmp	r2, r3
 8007886:	d209      	bcs.n	800789c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007888:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7fd ff43 	bl	8005720 <vListInsert>
}
 800789a:	e010      	b.n	80078be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800789c:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fd ff39 	bl	8005720 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d202      	bcs.n	80078be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078b8:	4a09      	ldr	r2, [pc, #36]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6013      	str	r3, [r2, #0]
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	2000595c 	.word	0x2000595c
 80078cc:	20005858 	.word	0x20005858
 80078d0:	20005960 	.word	0x20005960
 80078d4:	20005944 	.word	0x20005944
 80078d8:	20005914 	.word	0x20005914
 80078dc:	20005910 	.word	0x20005910
 80078e0:	20005978 	.word	0x20005978

080078e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3b04      	subs	r3, #4
 80078f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3b04      	subs	r3, #4
 8007902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b04      	subs	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007914:	4a0c      	ldr	r2, [pc, #48]	; (8007948 <pxPortInitialiseStack+0x64>)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3b14      	subs	r3, #20
 800791e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b04      	subs	r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f06f 0202 	mvn.w	r2, #2
 8007932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b20      	subs	r3, #32
 8007938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	0800794d 	.word	0x0800794d

0800794c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <prvTaskExitError+0x5c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d00c      	beq.n	800797a <prvTaskExitError+0x2e>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	60fb      	str	r3, [r7, #12]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <prvTaskExitError+0x2c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	b672      	cpsid	i
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	b662      	cpsie	i
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007992:	bf00      	nop
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0fc      	beq.n	8007994 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000020 	.word	0x20000020
 80079ac:	00000000 	.word	0x00000000

080079b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <pxCurrentTCBConst2>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f380 8809 	msr	PSP, r0
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8811 	msr	BASEPRI, r0
 80079ca:	4770      	bx	lr
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst2>:
 80079d0:	20005858 	.word	0x20005858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079d8:	4808      	ldr	r0, [pc, #32]	; (80079fc <prvPortStartFirstTask+0x24>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f380 8808 	msr	MSP, r0
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8814 	msr	CONTROL, r0
 80079ea:	b662      	cpsie	i
 80079ec:	b661      	cpsie	f
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	df00      	svc	0
 80079f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079fa:	bf00      	nop
 80079fc:	e000ed08 	.word	0xe000ed08

08007a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a06:	4b37      	ldr	r3, [pc, #220]	; (8007ae4 <xPortStartScheduler+0xe4>)
 8007a08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <xPortStartScheduler+0xe8>)
 8007a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a2e:	4b2f      	ldr	r3, [pc, #188]	; (8007aec <xPortStartScheduler+0xec>)
 8007a30:	2207      	movs	r2, #7
 8007a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a34:	e009      	b.n	8007a4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a36:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <xPortStartScheduler+0xec>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <xPortStartScheduler+0xec>)
 8007a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d0ef      	beq.n	8007a36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a56:	4b25      	ldr	r3, [pc, #148]	; (8007aec <xPortStartScheduler+0xec>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1c3 0307 	rsb	r3, r3, #7
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d00c      	beq.n	8007a7c <xPortStartScheduler+0x7c>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	b672      	cpsid	i
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	b662      	cpsie	i
 8007a76:	60bb      	str	r3, [r7, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a7c:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <xPortStartScheduler+0xec>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	4a1a      	ldr	r2, [pc, #104]	; (8007aec <xPortStartScheduler+0xec>)
 8007a84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a86:	4b19      	ldr	r3, [pc, #100]	; (8007aec <xPortStartScheduler+0xec>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <xPortStartScheduler+0xec>)
 8007a90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a9a:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <xPortStartScheduler+0xf0>)
 8007aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ab0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ab2:	f000 f8dd 	bl	8007c70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <xPortStartScheduler+0xf4>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007abc:	f000 f8fc 	bl	8007cb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ac0:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <xPortStartScheduler+0xf8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <xPortStartScheduler+0xf8>)
 8007ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007aca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007acc:	f7ff ff84 	bl	80079d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ad0:	f7ff fa76 	bl	8006fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ad4:	f7ff ff3a 	bl	800794c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	e000e400 	.word	0xe000e400
 8007ae8:	20005984 	.word	0x20005984
 8007aec:	20005988 	.word	0x20005988
 8007af0:	e000ed20 	.word	0xe000ed20
 8007af4:	20000020 	.word	0x20000020
 8007af8:	e000ef34 	.word	0xe000ef34

08007afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b1a:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	4a0e      	ldr	r2, [pc, #56]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <vPortEnterCritical+0x60>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d111      	bne.n	8007b50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <vPortEnterCritical+0x64>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <vPortEnterCritical+0x54>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	b672      	cpsid	i
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	b662      	cpsie	i
 8007b4a:	603b      	str	r3, [r7, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vPortEnterCritical+0x52>
	}
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000020 	.word	0x20000020
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10c      	bne.n	8007b8c <vPortExitCritical+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	b672      	cpsid	i
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	b662      	cpsie	i
 8007b86:	607b      	str	r3, [r7, #4]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <vPortExitCritical+0x54>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <vPortExitCritical+0x46>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f383 8811 	msr	BASEPRI, r3
}
 8007ba8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000020 	.word	0x20000020
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bc0:	f3ef 8009 	mrs	r0, PSP
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <pxCurrentTCBConst>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f01e 0f10 	tst.w	lr, #16
 8007bd0:	bf08      	it	eq
 8007bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6010      	str	r0, [r2, #0]
 8007bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	f7ff f9e4 	bl	8006fc0 <vTaskSwitchContext>
 8007bf8:	f04f 0000 	mov.w	r0, #0
 8007bfc:	f380 8811 	msr	BASEPRI, r0
 8007c00:	bc09      	pop	{r0, r3}
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f01e 0f10 	tst.w	lr, #16
 8007c0e:	bf08      	it	eq
 8007c10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c14:	f380 8809 	msr	PSP, r0
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <pxCurrentTCBConst>:
 8007c20:	20005858 	.word	0x20005858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	b672      	cpsid	i
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	b662      	cpsie	i
 8007c42:	607b      	str	r3, [r7, #4]
}
 8007c44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c46:	f7ff f901 	bl	8006e4c <xTaskIncrementTick>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <SysTick_Handler+0x44>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	f383 8811 	msr	BASEPRI, r3
}
 8007c62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c74:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <vPortSetupTimerInterrupt+0x34>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <vPortSetupTimerInterrupt+0x38>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vPortSetupTimerInterrupt+0x3c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <vPortSetupTimerInterrupt+0x40>)
 8007c86:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8a:	099b      	lsrs	r3, r3, #6
 8007c8c:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <vPortSetupTimerInterrupt+0x44>)
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c92:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <vPortSetupTimerInterrupt+0x34>)
 8007c94:	2207      	movs	r2, #7
 8007c96:	601a      	str	r2, [r3, #0]
}
 8007c98:	bf00      	nop
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	e000e010 	.word	0xe000e010
 8007ca8:	e000e018 	.word	0xe000e018
 8007cac:	20000000 	.word	0x20000000
 8007cb0:	10624dd3 	.word	0x10624dd3
 8007cb4:	e000e014 	.word	0xe000e014

08007cb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cc8 <vPortEnableVFP+0x10>
 8007cbc:	6801      	ldr	r1, [r0, #0]
 8007cbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cc2:	6001      	str	r1, [r0, #0]
 8007cc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cc6:	bf00      	nop
 8007cc8:	e000ed88 	.word	0xe000ed88

08007ccc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cd2:	f3ef 8305 	mrs	r3, IPSR
 8007cd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	d916      	bls.n	8007d0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cde:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <vPortValidateInterruptPriority+0x78>)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <vPortValidateInterruptPriority+0x7c>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	7afa      	ldrb	r2, [r7, #11]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d20c      	bcs.n	8007d0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	b672      	cpsid	i
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	b662      	cpsie	i
 8007d06:	607b      	str	r3, [r7, #4]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <vPortValidateInterruptPriority+0x80>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <vPortValidateInterruptPriority+0x84>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d90c      	bls.n	8007d36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	b672      	cpsid	i
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	b662      	cpsie	i
 8007d30:	603b      	str	r3, [r7, #0]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <vPortValidateInterruptPriority+0x68>
	}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	e000e3f0 	.word	0xe000e3f0
 8007d48:	20005984 	.word	0x20005984
 8007d4c:	e000ed0c 	.word	0xe000ed0c
 8007d50:	20005988 	.word	0x20005988

08007d54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	; 0x28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d60:	f7fe ffa6 	bl	8006cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d64:	4b5b      	ldr	r3, [pc, #364]	; (8007ed4 <pvPortMalloc+0x180>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d6c:	f000 f91a 	bl	8007fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d70:	4b59      	ldr	r3, [pc, #356]	; (8007ed8 <pvPortMalloc+0x184>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8092 	bne.w	8007ea2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01f      	beq.n	8007dc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007d84:	2208      	movs	r2, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d016      	beq.n	8007dc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00c      	beq.n	8007dc4 <pvPortMalloc+0x70>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d06b      	beq.n	8007ea2 <pvPortMalloc+0x14e>
 8007dca:	4b44      	ldr	r3, [pc, #272]	; (8007edc <pvPortMalloc+0x188>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d866      	bhi.n	8007ea2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dd4:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <pvPortMalloc+0x18c>)
 8007dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dd8:	4b41      	ldr	r3, [pc, #260]	; (8007ee0 <pvPortMalloc+0x18c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dde:	e004      	b.n	8007dea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <pvPortMalloc+0xa8>
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f1      	bne.n	8007de0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dfc:	4b35      	ldr	r3, [pc, #212]	; (8007ed4 <pvPortMalloc+0x180>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d04d      	beq.n	8007ea2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	2308      	movs	r3, #8
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d921      	bls.n	8007e6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <pvPortMalloc+0x100>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	b672      	cpsid	i
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	b662      	cpsie	i
 8007e4e:	613b      	str	r3, [r7, #16]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f000 f8fe 	bl	8008068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <pvPortMalloc+0x188>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	4a19      	ldr	r2, [pc, #100]	; (8007edc <pvPortMalloc+0x188>)
 8007e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <pvPortMalloc+0x188>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <pvPortMalloc+0x190>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d203      	bcs.n	8007e8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <pvPortMalloc+0x188>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <pvPortMalloc+0x190>)
 8007e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <pvPortMalloc+0x184>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ea2:	f7fe ff13 	bl	8006ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <pvPortMalloc+0x176>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <pvPortMalloc+0x174>
	return pvReturn;
 8007eca:	69fb      	ldr	r3, [r7, #28]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3728      	adds	r7, #40	; 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20009594 	.word	0x20009594
 8007ed8:	200095a0 	.word	0x200095a0
 8007edc:	20009598 	.word	0x20009598
 8007ee0:	2000958c 	.word	0x2000958c
 8007ee4:	2000959c 	.word	0x2000959c

08007ee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d04c      	beq.n	8007f94 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007efa:	2308      	movs	r3, #8
 8007efc:	425b      	negs	r3, r3
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <vPortFree+0xb4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4013      	ands	r3, r2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10c      	bne.n	8007f30 <vPortFree+0x48>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	b672      	cpsid	i
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	b662      	cpsie	i
 8007f2a:	60fb      	str	r3, [r7, #12]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00c      	beq.n	8007f52 <vPortFree+0x6a>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	b672      	cpsid	i
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	b662      	cpsie	i
 8007f4c:	60bb      	str	r3, [r7, #8]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <vPortFree+0xb4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d019      	beq.n	8007f94 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d115      	bne.n	8007f94 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <vPortFree+0xb4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401a      	ands	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f78:	f7fe fe9a 	bl	8006cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vPortFree+0xb8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4413      	add	r3, r2
 8007f86:	4a06      	ldr	r2, [pc, #24]	; (8007fa0 <vPortFree+0xb8>)
 8007f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f8a:	6938      	ldr	r0, [r7, #16]
 8007f8c:	f000 f86c 	bl	8008068 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f90:	f7fe fe9c 	bl	8006ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f94:	bf00      	nop
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200095a0 	.word	0x200095a0
 8007fa0:	20009598 	.word	0x20009598

08007fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fb0:	4b27      	ldr	r3, [pc, #156]	; (8008050 <prvHeapInit+0xac>)
 8007fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <prvHeapInit+0xac>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <prvHeapInit+0xb0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <prvHeapInit+0xb0>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <prvHeapInit+0xb4>)
 8008004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <prvHeapInit+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <prvHeapInit+0xb4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvHeapInit+0xb4>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <prvHeapInit+0xb8>)
 8008032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <prvHeapInit+0xbc>)
 800803a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <prvHeapInit+0xc0>)
 800803e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	2000598c 	.word	0x2000598c
 8008054:	2000958c 	.word	0x2000958c
 8008058:	20009594 	.word	0x20009594
 800805c:	2000959c 	.word	0x2000959c
 8008060:	20009598 	.word	0x20009598
 8008064:	200095a0 	.word	0x200095a0

08008068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <prvInsertBlockIntoFreeList+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e002      	b.n	800807c <prvInsertBlockIntoFreeList+0x14>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d8f7      	bhi.n	8008076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d108      	bne.n	80080aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	441a      	add	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d118      	bne.n	80080f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d00d      	beq.n	80080e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e008      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e003      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d002      	beq.n	8008106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000958c 	.word	0x2000958c
 8008118:	20009594 	.word	0x20009594

0800811c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	330c      	adds	r3, #12
 800812c:	461a      	mov	r2, r3
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 fa59 	bl	800a5e8 <tcpip_send_msg_wait_sem>
 8008136:	4603      	mov	r3, r0
 8008138:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800813a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008148:	e001      	b.n	800814e <netconn_apimsg+0x32>
  }
  return err;
 800814a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08c      	sub	sp, #48	; 0x30
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	603a      	str	r2, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
 8008164:	460b      	mov	r3, r1
 8008166:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f923 	bl	80093b8 <netconn_alloc>
 8008172:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d054      	beq.n	8008224 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800817a:	79bb      	ldrb	r3, [r7, #6]
 800817c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	4619      	mov	r1, r3
 8008188:	4829      	ldr	r0, [pc, #164]	; (8008230 <netconn_new_with_proto_and_callback+0xd8>)
 800818a:	f7ff ffc7 	bl	800811c <netconn_apimsg>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008194:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008198:	2b00      	cmp	r3, #0
 800819a:	d043      	beq.n	8008224 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <netconn_new_with_proto_and_callback+0x58>
 80081a4:	4b23      	ldr	r3, [pc, #140]	; (8008234 <netconn_new_with_proto_and_callback+0xdc>)
 80081a6:	22a3      	movs	r2, #163	; 0xa3
 80081a8:	4923      	ldr	r1, [pc, #140]	; (8008238 <netconn_new_with_proto_and_callback+0xe0>)
 80081aa:	4824      	ldr	r0, [pc, #144]	; (800823c <netconn_new_with_proto_and_callback+0xe4>)
 80081ac:	f00d fcf6 	bl	8015b9c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	3310      	adds	r3, #16
 80081b4:	4618      	mov	r0, r3
 80081b6:	f00d f972 	bl	801549e <sys_mbox_valid>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <netconn_new_with_proto_and_callback+0x74>
 80081c0:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <netconn_new_with_proto_and_callback+0xdc>)
 80081c2:	22a4      	movs	r2, #164	; 0xa4
 80081c4:	491e      	ldr	r1, [pc, #120]	; (8008240 <netconn_new_with_proto_and_callback+0xe8>)
 80081c6:	481d      	ldr	r0, [pc, #116]	; (800823c <netconn_new_with_proto_and_callback+0xe4>)
 80081c8:	f00d fce8 	bl	8015b9c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	3314      	adds	r3, #20
 80081d0:	4618      	mov	r0, r3
 80081d2:	f00d f964 	bl	801549e <sys_mbox_valid>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <netconn_new_with_proto_and_callback+0x90>
 80081dc:	4b15      	ldr	r3, [pc, #84]	; (8008234 <netconn_new_with_proto_and_callback+0xdc>)
 80081de:	22a6      	movs	r2, #166	; 0xa6
 80081e0:	4918      	ldr	r1, [pc, #96]	; (8008244 <netconn_new_with_proto_and_callback+0xec>)
 80081e2:	4816      	ldr	r0, [pc, #88]	; (800823c <netconn_new_with_proto_and_callback+0xe4>)
 80081e4:	f00d fcda 	bl	8015b9c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	330c      	adds	r3, #12
 80081ec:	4618      	mov	r0, r3
 80081ee:	f00d f9e7 	bl	80155c0 <sys_sem_valid>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <netconn_new_with_proto_and_callback+0xac>
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <netconn_new_with_proto_and_callback+0xdc>)
 80081fa:	22a9      	movs	r2, #169	; 0xa9
 80081fc:	4912      	ldr	r1, [pc, #72]	; (8008248 <netconn_new_with_proto_and_callback+0xf0>)
 80081fe:	480f      	ldr	r0, [pc, #60]	; (800823c <netconn_new_with_proto_and_callback+0xe4>)
 8008200:	f00d fccc 	bl	8015b9c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	330c      	adds	r3, #12
 8008208:	4618      	mov	r0, r3
 800820a:	f00d f9cc 	bl	80155a6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800820e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008210:	3310      	adds	r3, #16
 8008212:	4618      	mov	r0, r3
 8008214:	f00d f8bc 	bl	8015390 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800821a:	2007      	movs	r0, #7
 800821c:	f002 ff92 	bl	800b144 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008226:	4618      	mov	r0, r3
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	0800938d 	.word	0x0800938d
 8008234:	08016de8 	.word	0x08016de8
 8008238:	08016e1c 	.word	0x08016e1c
 800823c:	08016e40 	.word	0x08016e40
 8008240:	08016e68 	.word	0x08016e68
 8008244:	08016e80 	.word	0x08016e80
 8008248:	08016ea4 	.word	0x08016ea4

0800824c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	; 0x30
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	e014      	b.n	8008288 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008262:	2329      	movs	r3, #41	; 0x29
 8008264:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008266:	f107 030c 	add.w	r3, r7, #12
 800826a:	4619      	mov	r1, r3
 800826c:	4808      	ldr	r0, [pc, #32]	; (8008290 <netconn_prepare_delete+0x44>)
 800826e:	f7ff ff55 	bl	800811c <netconn_apimsg>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <netconn_prepare_delete+0x3a>
    return err;
 8008280:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008284:	e000      	b.n	8008288 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3730      	adds	r7, #48	; 0x30
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	080098f9 	.word	0x080098f9

08008294 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <netconn_delete+0x12>
    return ERR_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e00d      	b.n	80082c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ffd0 	bl	800824c <netconn_prepare_delete>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80082b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <netconn_delete+0x2a>
    netconn_free(conn);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f8eb 	bl	8009494 <netconn_free>
  }
  return err;
 80082be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08e      	sub	sp, #56	; 0x38
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <netconn_bind+0x28>
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <netconn_bind+0x5c>)
 80082e2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80082e6:	4911      	ldr	r1, [pc, #68]	; (800832c <netconn_bind+0x60>)
 80082e8:	4811      	ldr	r0, [pc, #68]	; (8008330 <netconn_bind+0x64>)
 80082ea:	f00d fc57 	bl	8015b9c <iprintf>
 80082ee:	f06f 030f 	mvn.w	r3, #15
 80082f2:	e015      	b.n	8008320 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <netconn_bind+0x68>)
 80082fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800830a:	f107 0314 	add.w	r3, r7, #20
 800830e:	4619      	mov	r1, r3
 8008310:	4809      	ldr	r0, [pc, #36]	; (8008338 <netconn_bind+0x6c>)
 8008312:	f7ff ff03 	bl	800811c <netconn_apimsg>
 8008316:	4603      	mov	r3, r0
 8008318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800831c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008320:	4618      	mov	r0, r3
 8008322:	3738      	adds	r7, #56	; 0x38
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08016de8 	.word	0x08016de8
 800832c:	08016f20 	.word	0x08016f20
 8008330:	08016e40 	.word	0x08016e40
 8008334:	0801a3f0 	.word	0x0801a3f0
 8008338:	08009ac1 	.word	0x08009ac1

0800833c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d109      	bne.n	8008362 <netconn_listen_with_backlog+0x26>
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <netconn_listen_with_backlog+0x48>)
 8008350:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008354:	490c      	ldr	r1, [pc, #48]	; (8008388 <netconn_listen_with_backlog+0x4c>)
 8008356:	480d      	ldr	r0, [pc, #52]	; (800838c <netconn_listen_with_backlog+0x50>)
 8008358:	f00d fc20 	bl	8015b9c <iprintf>
 800835c:	f06f 030f 	mvn.w	r3, #15
 8008360:	e00c      	b.n	800837c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008366:	f107 030c 	add.w	r3, r7, #12
 800836a:	4619      	mov	r1, r3
 800836c:	4808      	ldr	r0, [pc, #32]	; (8008390 <netconn_listen_with_backlog+0x54>)
 800836e:	f7ff fed5 	bl	800811c <netconn_apimsg>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008378:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800837c:	4618      	mov	r0, r3
 800837e:	3730      	adds	r7, #48	; 0x30
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	08016de8 	.word	0x08016de8
 8008388:	08016fa0 	.word	0x08016fa0
 800838c:	08016e40 	.word	0x08016e40
 8008390:	08009b35 	.word	0x08009b35

08008394 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <netconn_accept+0x24>
 80083a4:	4b3d      	ldr	r3, [pc, #244]	; (800849c <netconn_accept+0x108>)
 80083a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80083aa:	493d      	ldr	r1, [pc, #244]	; (80084a0 <netconn_accept+0x10c>)
 80083ac:	483d      	ldr	r0, [pc, #244]	; (80084a4 <netconn_accept+0x110>)
 80083ae:	f00d fbf5 	bl	8015b9c <iprintf>
 80083b2:	f06f 030f 	mvn.w	r3, #15
 80083b6:	e06c      	b.n	8008492 <netconn_accept+0xfe>
  *new_conn = NULL;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <netconn_accept+0x44>
 80083c4:	4b35      	ldr	r3, [pc, #212]	; (800849c <netconn_accept+0x108>)
 80083c6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80083ca:	4937      	ldr	r1, [pc, #220]	; (80084a8 <netconn_accept+0x114>)
 80083cc:	4835      	ldr	r0, [pc, #212]	; (80084a4 <netconn_accept+0x110>)
 80083ce:	f00d fbe5 	bl	8015b9c <iprintf>
 80083d2:	f06f 030f 	mvn.w	r3, #15
 80083d6:	e05c      	b.n	8008492 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fb6c 	bl	8008ab6 <netconn_err>
 80083de:	4603      	mov	r3, r0
 80083e0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80083e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80083ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083ee:	e050      	b.n	8008492 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3314      	adds	r3, #20
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00d f852 	bl	801549e <sys_mbox_valid>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <netconn_accept+0x78>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7f1b      	ldrb	r3, [r3, #28]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800840c:	f06f 030e 	mvn.w	r3, #14
 8008410:	e03f      	b.n	8008492 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7f1b      	ldrb	r3, [r3, #28]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3314      	adds	r3, #20
 8008422:	f107 020c 	add.w	r2, r7, #12
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f00d f81c 	bl	8015466 <sys_arch_mbox_tryfetch>
 800842e:	4603      	mov	r3, r0
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d10a      	bne.n	800844c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008436:	f06f 0306 	mvn.w	r3, #6
 800843a:	e02a      	b.n	8008492 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3314      	adds	r3, #20
 8008440:	f107 010c 	add.w	r1, r7, #12
 8008444:	2200      	movs	r2, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f00c ffce 	bl	80153e8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <netconn_accept+0xcc>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2200      	movs	r2, #0
 800845a:	2101      	movs	r1, #1
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f107 0213 	add.w	r2, r7, #19
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fb75 	bl	8008b58 <lwip_netconn_is_err_msg>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008474:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008478:	e00b      	b.n	8008492 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008480:	f06f 030e 	mvn.w	r3, #14
 8008484:	e005      	b.n	8008492 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008490:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	08016de8 	.word	0x08016de8
 80084a0:	08016fc0 	.word	0x08016fc0
 80084a4:	08016e40 	.word	0x08016e40
 80084a8:	08016fe0 	.word	0x08016fe0

080084ac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d109      	bne.n	80084d8 <netconn_recv_data+0x2c>
 80084c4:	4b58      	ldr	r3, [pc, #352]	; (8008628 <netconn_recv_data+0x17c>)
 80084c6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80084ca:	4958      	ldr	r1, [pc, #352]	; (800862c <netconn_recv_data+0x180>)
 80084cc:	4858      	ldr	r0, [pc, #352]	; (8008630 <netconn_recv_data+0x184>)
 80084ce:	f00d fb65 	bl	8015b9c <iprintf>
 80084d2:	f06f 030f 	mvn.w	r3, #15
 80084d6:	e0a2      	b.n	800861e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d109      	bne.n	80084f8 <netconn_recv_data+0x4c>
 80084e4:	4b50      	ldr	r3, [pc, #320]	; (8008628 <netconn_recv_data+0x17c>)
 80084e6:	f240 224a 	movw	r2, #586	; 0x24a
 80084ea:	4952      	ldr	r1, [pc, #328]	; (8008634 <netconn_recv_data+0x188>)
 80084ec:	4850      	ldr	r0, [pc, #320]	; (8008630 <netconn_recv_data+0x184>)
 80084ee:	f00d fb55 	bl	8015b9c <iprintf>
 80084f2:	f06f 030f 	mvn.w	r3, #15
 80084f6:	e092      	b.n	800861e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3310      	adds	r3, #16
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00c ffce 	bl	801549e <sys_mbox_valid>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10e      	bne.n	8008526 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fad4 	bl	8008ab6 <netconn_err>
 800850e:	4603      	mov	r3, r0
 8008510:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008512:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800851a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800851e:	e07e      	b.n	800861e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008520:	f06f 030a 	mvn.w	r3, #10
 8008524:	e07b      	b.n	800861e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7f1b      	ldrb	r3, [r3, #28]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10f      	bne.n	8008552 <netconn_recv_data+0xa6>
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	7f1b      	ldrb	r3, [r3, #28]
 8008540:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d023      	beq.n	800859a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3310      	adds	r3, #16
 8008556:	f107 0218 	add.w	r2, r7, #24
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f00c ff82 	bl	8015466 <sys_arch_mbox_tryfetch>
 8008562:	4603      	mov	r3, r0
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008568:	d11f      	bne.n	80085aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 faa3 	bl	8008ab6 <netconn_err>
 8008570:	4603      	mov	r3, r0
 8008572:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008574:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800857c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008580:	e04d      	b.n	800861e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	7f1b      	ldrb	r3, [r3, #28]
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800858e:	f06f 030a 	mvn.w	r3, #10
 8008592:	e044      	b.n	800861e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008594:	f06f 0306 	mvn.w	r3, #6
 8008598:	e041      	b.n	800861e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3310      	adds	r3, #16
 800859e:	f107 0118 	add.w	r1, r7, #24
 80085a2:	2200      	movs	r2, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f00c ff1f 	bl	80153e8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d117      	bne.n	80085e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f107 0217 	add.w	r2, r7, #23
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 faca 	bl	8008b58 <lwip_netconn_is_err_msg>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80085ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085ce:	f113 0f0f 	cmn.w	r3, #15
 80085d2:	d101      	bne.n	80085d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e022      	b.n	800861e <netconn_recv_data+0x172>
      }
      return err;
 80085d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085dc:	e01f      	b.n	800861e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	891b      	ldrh	r3, [r3, #8]
 80085e2:	83fb      	strh	r3, [r7, #30]
 80085e4:	e00d      	b.n	8008602 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <netconn_recv_data+0x14e>
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <netconn_recv_data+0x17c>)
 80085ee:	f240 2291 	movw	r2, #657	; 0x291
 80085f2:	4911      	ldr	r1, [pc, #68]	; (8008638 <netconn_recv_data+0x18c>)
 80085f4:	480e      	ldr	r0, [pc, #56]	; (8008630 <netconn_recv_data+0x184>)
 80085f6:	f00d fad1 	bl	8015b9c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	891b      	ldrh	r3, [r3, #8]
 8008600:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <netconn_recv_data+0x16a>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	8bfa      	ldrh	r2, [r7, #30]
 8008610:	2101      	movs	r1, #1
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3720      	adds	r7, #32
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	08016de8 	.word	0x08016de8
 800862c:	08017000 	.word	0x08017000
 8008630:	08016e40 	.word	0x08016e40
 8008634:	08017020 	.word	0x08017020
 8008638:	0801703c 	.word	0x0801703c

0800863c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <netconn_tcp_recvd_msg+0x1e>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008656:	2b10      	cmp	r3, #16
 8008658:	d009      	beq.n	800866e <netconn_tcp_recvd_msg+0x32>
 800865a:	4b0c      	ldr	r3, [pc, #48]	; (800868c <netconn_tcp_recvd_msg+0x50>)
 800865c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008660:	490b      	ldr	r1, [pc, #44]	; (8008690 <netconn_tcp_recvd_msg+0x54>)
 8008662:	480c      	ldr	r0, [pc, #48]	; (8008694 <netconn_tcp_recvd_msg+0x58>)
 8008664:	f00d fa9a 	bl	8015b9c <iprintf>
 8008668:	f06f 030f 	mvn.w	r3, #15
 800866c:	e00a      	b.n	8008684 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4806      	ldr	r0, [pc, #24]	; (8008698 <netconn_tcp_recvd_msg+0x5c>)
 800867e:	f7ff fd4d 	bl	800811c <netconn_apimsg>
 8008682:	4603      	mov	r3, r0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	08016de8 	.word	0x08016de8
 8008690:	08017048 	.word	0x08017048
 8008694:	08016e40 	.word	0x08016e40
 8008698:	08009c65 	.word	0x08009c65

0800869c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b090      	sub	sp, #64	; 0x40
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3310      	adds	r3, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f00c fef5 	bl	801549e <sys_mbox_valid>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80086ba:	f06f 030a 	mvn.w	r3, #10
 80086be:	e06d      	b.n	800879c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7f1b      	ldrb	r3, [r3, #28]
 80086c4:	b25b      	sxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da07      	bge.n	80086da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	7f1b      	ldrb	r3, [r3, #28]
 80086ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80086d8:	e039      	b.n	800874e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	461a      	mov	r2, r3
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff fee3 	bl	80084ac <netconn_recv_data>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80086ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80086f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086f8:	e050      	b.n	800879c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10e      	bne.n	8008728 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <netconn_recv_data_tcp+0x7a>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	891b      	ldrh	r3, [r3, #8]
 8008714:	e000      	b.n	8008718 <netconn_recv_data_tcp+0x7c>
 8008716:	2301      	movs	r3, #1
 8008718:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800871a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800871c:	f107 0214 	add.w	r2, r7, #20
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff ff8a 	bl	800863c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d134      	bne.n	8008798 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	7f1b      	ldrb	r3, [r3, #28]
 800873c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008740:	b2da      	uxtb	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008746:	f06f 0306 	mvn.w	r3, #6
 800874a:	e027      	b.n	800879c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800874c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <netconn_recv_data_tcp+0xc6>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875a:	2200      	movs	r2, #0
 800875c:	2101      	movs	r1, #1
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10f      	bne.n	800878a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f9a3 	bl	8008ab6 <netconn_err>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008776:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <netconn_recv_data_tcp+0xe8>
          return err;
 800877e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008782:	e00b      	b.n	800879c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008784:	f06f 030d 	mvn.w	r3, #13
 8008788:	e008      	b.n	800879c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800878a:	2101      	movs	r1, #1
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f955 	bl	8008a3c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008792:	f06f 030e 	mvn.w	r3, #14
 8008796:	e001      	b.n	800879c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008798:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800879c:	4618      	mov	r0, r3
 800879e:	3740      	adds	r7, #64	; 0x40
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <netconn_recv+0x28>
 80087b8:	4b32      	ldr	r3, [pc, #200]	; (8008884 <netconn_recv+0xe0>)
 80087ba:	f240 3263 	movw	r2, #867	; 0x363
 80087be:	4932      	ldr	r1, [pc, #200]	; (8008888 <netconn_recv+0xe4>)
 80087c0:	4832      	ldr	r0, [pc, #200]	; (800888c <netconn_recv+0xe8>)
 80087c2:	f00d f9eb 	bl	8015b9c <iprintf>
 80087c6:	f06f 030f 	mvn.w	r3, #15
 80087ca:	e056      	b.n	800887a <netconn_recv+0xd6>
  *new_buf = NULL;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <netconn_recv+0x48>
 80087d8:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <netconn_recv+0xe0>)
 80087da:	f240 3265 	movw	r2, #869	; 0x365
 80087de:	492c      	ldr	r1, [pc, #176]	; (8008890 <netconn_recv+0xec>)
 80087e0:	482a      	ldr	r0, [pc, #168]	; (800888c <netconn_recv+0xe8>)
 80087e2:	f00d f9db 	bl	8015b9c <iprintf>
 80087e6:	f06f 030f 	mvn.w	r3, #15
 80087ea:	e046      	b.n	800887a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d13a      	bne.n	800886e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80087fc:	2006      	movs	r0, #6
 80087fe:	f002 fc2b 	bl	800b058 <memp_malloc>
 8008802:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <netconn_recv+0x6c>
      return ERR_MEM;
 800880a:	f04f 33ff 	mov.w	r3, #4294967295
 800880e:	e034      	b.n	800887a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	2200      	movs	r2, #0
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff ff3f 	bl	800869c <netconn_recv_data_tcp>
 800881e:	4603      	mov	r3, r0
 8008820:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008822:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800882a:	6979      	ldr	r1, [r7, #20]
 800882c:	2006      	movs	r0, #6
 800882e:	f002 fc89 	bl	800b144 <memp_free>
      return err;
 8008832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008836:	e020      	b.n	800887a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <netconn_recv+0xa8>
 800883e:	4b11      	ldr	r3, [pc, #68]	; (8008884 <netconn_recv+0xe0>)
 8008840:	f240 3279 	movw	r2, #889	; 0x379
 8008844:	4913      	ldr	r1, [pc, #76]	; (8008894 <netconn_recv+0xf0>)
 8008846:	4811      	ldr	r0, [pc, #68]	; (800888c <netconn_recv+0xe8>)
 8008848:	f00d f9a8 	bl	8015b9c <iprintf>

    buf->p = p;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2200      	movs	r2, #0
 800885c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2200      	movs	r2, #0
 8008862:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	e005      	b.n	800887a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800886e:	2200      	movs	r2, #0
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe1a 	bl	80084ac <netconn_recv_data>
 8008878:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	08016de8 	.word	0x08016de8
 8008888:	08017000 	.word	0x08017000
 800888c:	08016e40 	.word	0x08016e40
 8008890:	08017020 	.word	0x08017020
 8008894:	08017098 	.word	0x08017098

08008898 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af02      	add	r7, sp, #8
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	f107 0110 	add.w	r1, r7, #16
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4613      	mov	r3, r2
 80088ba:	2201      	movs	r2, #1
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f805 	bl	80088cc <netconn_write_vectors_partly>
 80088c2:	4603      	mov	r3, r0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b092      	sub	sp, #72	; 0x48
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4611      	mov	r1, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	460b      	mov	r3, r1
 80088dc:	80fb      	strh	r3, [r7, #6]
 80088de:	4613      	mov	r3, r2
 80088e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <netconn_write_vectors_partly+0x30>
 80088e8:	4b4e      	ldr	r3, [pc, #312]	; (8008a24 <netconn_write_vectors_partly+0x158>)
 80088ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80088ee:	494e      	ldr	r1, [pc, #312]	; (8008a28 <netconn_write_vectors_partly+0x15c>)
 80088f0:	484e      	ldr	r0, [pc, #312]	; (8008a2c <netconn_write_vectors_partly+0x160>)
 80088f2:	f00d f953 	bl	8015b9c <iprintf>
 80088f6:	f06f 030f 	mvn.w	r3, #15
 80088fa:	e08e      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008904:	2b10      	cmp	r3, #16
 8008906:	d009      	beq.n	800891c <netconn_write_vectors_partly+0x50>
 8008908:	4b46      	ldr	r3, [pc, #280]	; (8008a24 <netconn_write_vectors_partly+0x158>)
 800890a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800890e:	4948      	ldr	r1, [pc, #288]	; (8008a30 <netconn_write_vectors_partly+0x164>)
 8008910:	4846      	ldr	r0, [pc, #280]	; (8008a2c <netconn_write_vectors_partly+0x160>)
 8008912:	f00d f943 	bl	8015b9c <iprintf>
 8008916:	f06f 0305 	mvn.w	r3, #5
 800891a:	e07e      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7f1b      	ldrb	r3, [r3, #28]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <netconn_write_vectors_partly+0x66>
 8008928:	797b      	ldrb	r3, [r7, #5]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <netconn_write_vectors_partly+0x6a>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <netconn_write_vectors_partly+0x6c>
 8008936:	2300      	movs	r3, #0
 8008938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800893c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <netconn_write_vectors_partly+0x84>
 8008944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800894a:	f06f 0305 	mvn.w	r3, #5
 800894e:	e064      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008954:	2300      	movs	r3, #0
 8008956:	643b      	str	r3, [r7, #64]	; 0x40
 8008958:	e015      	b.n	8008986 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800895a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008966:	4413      	add	r3, r2
 8008968:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800896a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008976:	429a      	cmp	r2, r3
 8008978:	d202      	bcs.n	8008980 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800897a:	f06f 0305 	mvn.w	r3, #5
 800897e:	e04c      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	3301      	adds	r3, #1
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800898a:	429a      	cmp	r2, r3
 800898c:	dbe5      	blt.n	800895a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800898e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e040      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899a:	2b00      	cmp	r3, #0
 800899c:	da0a      	bge.n	80089b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80089a4:	f06f 0305 	mvn.w	r3, #5
 80089a8:	e037      	b.n	8008a1a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80089aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80089ae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80089c4:	797b      	ldrb	r3, [r7, #5]
 80089c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80089ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	4619      	mov	r1, r3
 80089d8:	4816      	ldr	r0, [pc, #88]	; (8008a34 <netconn_write_vectors_partly+0x168>)
 80089da:	f7ff fb9f 	bl	800811c <netconn_apimsg>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80089e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d114      	bne.n	8008a16 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80089ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80089f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80089f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d006      	beq.n	8008a16 <netconn_write_vectors_partly+0x14a>
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <netconn_write_vectors_partly+0x158>)
 8008a0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008a0e:	490a      	ldr	r1, [pc, #40]	; (8008a38 <netconn_write_vectors_partly+0x16c>)
 8008a10:	4806      	ldr	r0, [pc, #24]	; (8008a2c <netconn_write_vectors_partly+0x160>)
 8008a12:	f00d f8c3 	bl	8015b9c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008a16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3748      	adds	r7, #72	; 0x48
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	08016de8 	.word	0x08016de8
 8008a28:	080170c0 	.word	0x080170c0
 8008a2c:	08016e40 	.word	0x08016e40
 8008a30:	080170dc 	.word	0x080170dc
 8008a34:	0800a069 	.word	0x0800a069
 8008a38:	08017100 	.word	0x08017100

08008a3c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08c      	sub	sp, #48	; 0x30
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <netconn_close_shutdown+0x26>
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <netconn_close_shutdown+0x50>)
 8008a50:	f240 4247 	movw	r2, #1095	; 0x447
 8008a54:	490e      	ldr	r1, [pc, #56]	; (8008a90 <netconn_close_shutdown+0x54>)
 8008a56:	480f      	ldr	r0, [pc, #60]	; (8008a94 <netconn_close_shutdown+0x58>)
 8008a58:	f00d f8a0 	bl	8015b9c <iprintf>
 8008a5c:	f06f 030f 	mvn.w	r3, #15
 8008a60:	e010      	b.n	8008a84 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a6a:	2329      	movs	r3, #41	; 0x29
 8008a6c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008a6e:	f107 030c 	add.w	r3, r7, #12
 8008a72:	4619      	mov	r1, r3
 8008a74:	4808      	ldr	r0, [pc, #32]	; (8008a98 <netconn_close_shutdown+0x5c>)
 8008a76:	f7ff fb51 	bl	800811c <netconn_apimsg>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008a80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3730      	adds	r7, #48	; 0x30
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	08016de8 	.word	0x08016de8
 8008a90:	08017124 	.word	0x08017124
 8008a94:	08016e40 	.word	0x08016e40
 8008a98:	0800a181 	.word	0x0800a181

08008a9c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008aa4:	2103      	movs	r1, #3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff ffc8 	bl	8008a3c <netconn_close_shutdown>
 8008aac:	4603      	mov	r3, r0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <netconn_err+0x12>
    return ERR_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e00d      	b.n	8008ae4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008ac8:	f00c fe04 	bl	80156d4 <sys_arch_protect>
 8008acc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7a1b      	ldrb	r3, [r3, #8]
 8008ad2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f00c fe08 	bl	80156f0 <sys_arch_unprotect>
  return err;
 8008ae0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	f113 0f0d 	cmn.w	r3, #13
 8008afe:	d009      	beq.n	8008b14 <lwip_netconn_err_to_msg+0x28>
 8008b00:	f113 0f0d 	cmn.w	r3, #13
 8008b04:	dc0c      	bgt.n	8008b20 <lwip_netconn_err_to_msg+0x34>
 8008b06:	f113 0f0f 	cmn.w	r3, #15
 8008b0a:	d007      	beq.n	8008b1c <lwip_netconn_err_to_msg+0x30>
 8008b0c:	f113 0f0e 	cmn.w	r3, #14
 8008b10:	d002      	beq.n	8008b18 <lwip_netconn_err_to_msg+0x2c>
 8008b12:	e005      	b.n	8008b20 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <lwip_netconn_err_to_msg+0x54>)
 8008b16:	e00e      	b.n	8008b36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <lwip_netconn_err_to_msg+0x58>)
 8008b1a:	e00c      	b.n	8008b36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <lwip_netconn_err_to_msg+0x5c>)
 8008b1e:	e00a      	b.n	8008b36 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <lwip_netconn_err_to_msg+0x48>
 8008b28:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <lwip_netconn_err_to_msg+0x60>)
 8008b2a:	227d      	movs	r2, #125	; 0x7d
 8008b2c:	4908      	ldr	r1, [pc, #32]	; (8008b50 <lwip_netconn_err_to_msg+0x64>)
 8008b2e:	4809      	ldr	r0, [pc, #36]	; (8008b54 <lwip_netconn_err_to_msg+0x68>)
 8008b30:	f00d f834 	bl	8015b9c <iprintf>
      return NULL;
 8008b34:	2300      	movs	r3, #0
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	0801a2dc 	.word	0x0801a2dc
 8008b44:	0801a2dd 	.word	0x0801a2dd
 8008b48:	0801a2de 	.word	0x0801a2de
 8008b4c:	08017140 	.word	0x08017140
 8008b50:	08017174 	.word	0x08017174
 8008b54:	08017184 	.word	0x08017184

08008b58 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d105      	bne.n	8008b74 <lwip_netconn_is_err_msg+0x1c>
 8008b68:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <lwip_netconn_is_err_msg+0x5c>)
 8008b6a:	2285      	movs	r2, #133	; 0x85
 8008b6c:	4912      	ldr	r1, [pc, #72]	; (8008bb8 <lwip_netconn_is_err_msg+0x60>)
 8008b6e:	4813      	ldr	r0, [pc, #76]	; (8008bbc <lwip_netconn_is_err_msg+0x64>)
 8008b70:	f00d f814 	bl	8015b9c <iprintf>

  if (msg == &netconn_aborted) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a12      	ldr	r2, [pc, #72]	; (8008bc0 <lwip_netconn_is_err_msg+0x68>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d104      	bne.n	8008b86 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	22f3      	movs	r2, #243	; 0xf3
 8008b80:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e012      	b.n	8008bac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <lwip_netconn_is_err_msg+0x6c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d104      	bne.n	8008b98 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	22f2      	movs	r2, #242	; 0xf2
 8008b92:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e009      	b.n	8008bac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a0b      	ldr	r2, [pc, #44]	; (8008bc8 <lwip_netconn_is_err_msg+0x70>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d104      	bne.n	8008baa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	22f1      	movs	r2, #241	; 0xf1
 8008ba4:	701a      	strb	r2, [r3, #0]
    return 1;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	08017140 	.word	0x08017140
 8008bb8:	080171ac 	.word	0x080171ac
 8008bbc:	08017184 	.word	0x08017184
 8008bc0:	0801a2dc 	.word	0x0801a2dc
 8008bc4:	0801a2dd 	.word	0x0801a2dd
 8008bc8:	0801a2de 	.word	0x0801a2de

08008bcc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d105      	bne.n	8008bec <recv_udp+0x20>
 8008be0:	4b34      	ldr	r3, [pc, #208]	; (8008cb4 <recv_udp+0xe8>)
 8008be2:	22e5      	movs	r2, #229	; 0xe5
 8008be4:	4934      	ldr	r1, [pc, #208]	; (8008cb8 <recv_udp+0xec>)
 8008be6:	4835      	ldr	r0, [pc, #212]	; (8008cbc <recv_udp+0xf0>)
 8008be8:	f00c ffd8 	bl	8015b9c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <recv_udp+0x32>
 8008bf2:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <recv_udp+0xe8>)
 8008bf4:	22e6      	movs	r2, #230	; 0xe6
 8008bf6:	4932      	ldr	r1, [pc, #200]	; (8008cc0 <recv_udp+0xf4>)
 8008bf8:	4830      	ldr	r0, [pc, #192]	; (8008cbc <recv_udp+0xf0>)
 8008bfa:	f00c ffcf 	bl	8015b9c <iprintf>
  conn = (struct netconn *)arg;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <recv_udp+0x44>
    pbuf_free(p);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f003 f93f 	bl	800be8c <pbuf_free>
    return;
 8008c0e:	e04d      	b.n	8008cac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d005      	beq.n	8008c26 <recv_udp+0x5a>
 8008c1a:	4b26      	ldr	r3, [pc, #152]	; (8008cb4 <recv_udp+0xe8>)
 8008c1c:	22ee      	movs	r2, #238	; 0xee
 8008c1e:	4929      	ldr	r1, [pc, #164]	; (8008cc4 <recv_udp+0xf8>)
 8008c20:	4826      	ldr	r0, [pc, #152]	; (8008cbc <recv_udp+0xf0>)
 8008c22:	f00c ffbb 	bl	8015b9c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3310      	adds	r3, #16
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00c fc37 	bl	801549e <sys_mbox_valid>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d103      	bne.n	8008c3e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f003 f928 	bl	800be8c <pbuf_free>
    return;
 8008c3c:	e036      	b.n	8008cac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008c3e:	2006      	movs	r0, #6
 8008c40:	f002 fa0a 	bl	800b058 <memp_malloc>
 8008c44:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <recv_udp+0x88>
    pbuf_free(p);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f003 f91d 	bl	800be8c <pbuf_free>
    return;
 8008c52:	e02b      	b.n	8008cac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <recv_udp+0xa0>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	e000      	b.n	8008c6e <recv_udp+0xa2>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008c76:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	891b      	ldrh	r3, [r3, #8]
 8008c7c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3310      	adds	r3, #16
 8008c82:	69b9      	ldr	r1, [r7, #24]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f00c fb95 	bl	80153b4 <sys_mbox_trypost>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f001 fb01 	bl	800a298 <netbuf_delete>
    return;
 8008c96:	e009      	b.n	8008cac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <recv_udp+0xe0>
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	8afa      	ldrh	r2, [r7, #22]
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	69f8      	ldr	r0, [r7, #28]
 8008caa:	4798      	blx	r3
  }
}
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08017140 	.word	0x08017140
 8008cb8:	080171b8 	.word	0x080171b8
 8008cbc:	08017184 	.word	0x08017184
 8008cc0:	080171dc 	.word	0x080171dc
 8008cc4:	080171fc 	.word	0x080171fc

08008cc8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <recv_tcp+0x22>
 8008cdc:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <recv_tcp+0xf0>)
 8008cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ce2:	4936      	ldr	r1, [pc, #216]	; (8008dbc <recv_tcp+0xf4>)
 8008ce4:	4836      	ldr	r0, [pc, #216]	; (8008dc0 <recv_tcp+0xf8>)
 8008ce6:	f00c ff59 	bl	8015b9c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d106      	bne.n	8008cfe <recv_tcp+0x36>
 8008cf0:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <recv_tcp+0xf0>)
 8008cf2:	f240 122d 	movw	r2, #301	; 0x12d
 8008cf6:	4933      	ldr	r1, [pc, #204]	; (8008dc4 <recv_tcp+0xfc>)
 8008cf8:	4831      	ldr	r0, [pc, #196]	; (8008dc0 <recv_tcp+0xf8>)
 8008cfa:	f00c ff4f 	bl	8015b9c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d006      	beq.n	8008d14 <recv_tcp+0x4c>
 8008d06:	4b2c      	ldr	r3, [pc, #176]	; (8008db8 <recv_tcp+0xf0>)
 8008d08:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008d0c:	492e      	ldr	r1, [pc, #184]	; (8008dc8 <recv_tcp+0x100>)
 8008d0e:	482c      	ldr	r0, [pc, #176]	; (8008dc0 <recv_tcp+0xf8>)
 8008d10:	f00c ff44 	bl	8015b9c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d102      	bne.n	8008d24 <recv_tcp+0x5c>
    return ERR_VAL;
 8008d1e:	f06f 0305 	mvn.w	r3, #5
 8008d22:	e045      	b.n	8008db0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d006      	beq.n	8008d3c <recv_tcp+0x74>
 8008d2e:	4b22      	ldr	r3, [pc, #136]	; (8008db8 <recv_tcp+0xf0>)
 8008d30:	f240 1235 	movw	r2, #309	; 0x135
 8008d34:	4925      	ldr	r1, [pc, #148]	; (8008dcc <recv_tcp+0x104>)
 8008d36:	4822      	ldr	r0, [pc, #136]	; (8008dc0 <recv_tcp+0xf8>)
 8008d38:	f00c ff30 	bl	8015b9c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f00c fbac 	bl	801549e <sys_mbox_valid>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10d      	bne.n	8008d68 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d008      	beq.n	8008d64 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	891b      	ldrh	r3, [r3, #8]
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f004 f84f 	bl	800cdfc <tcp_recved>
      pbuf_free(p);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f003 f894 	bl	800be8c <pbuf_free>
    }
    return ERR_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e023      	b.n	8008db0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <recv_tcp+0xb2>
    msg = p;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	891b      	ldrh	r3, [r3, #8]
 8008d76:	83fb      	strh	r3, [r7, #30]
 8008d78:	e003      	b.n	8008d82 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <recv_tcp+0x108>)
 8008d7c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	3310      	adds	r3, #16
 8008d86:	69b9      	ldr	r1, [r7, #24]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f00c fb13 	bl	80153b4 <sys_mbox_trypost>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	e00a      	b.n	8008db0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <recv_tcp+0xe6>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	8bfa      	ldrh	r2, [r7, #30]
 8008da8:	2100      	movs	r1, #0
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	4798      	blx	r3
  }

  return ERR_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	08017140 	.word	0x08017140
 8008dbc:	0801721c 	.word	0x0801721c
 8008dc0:	08017184 	.word	0x08017184
 8008dc4:	08017240 	.word	0x08017240
 8008dc8:	08017260 	.word	0x08017260
 8008dcc:	08017278 	.word	0x08017278
 8008dd0:	0801a2de 	.word	0x0801a2de

08008dd4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <poll_tcp+0x22>
 8008de8:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <poll_tcp+0xbc>)
 8008dea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008dee:	4929      	ldr	r1, [pc, #164]	; (8008e94 <poll_tcp+0xc0>)
 8008df0:	4829      	ldr	r0, [pc, #164]	; (8008e98 <poll_tcp+0xc4>)
 8008df2:	f00c fed3 	bl	8015b9c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d104      	bne.n	8008e08 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008dfe:	2101      	movs	r1, #1
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 ff65 	bl	8009cd0 <lwip_netconn_do_writemore>
 8008e06:	e016      	b.n	8008e36 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	785b      	ldrb	r3, [r3, #1]
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d112      	bne.n	8008e36 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <poll_tcp+0x5a>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	7a5b      	ldrb	r3, [r3, #9]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	7a5a      	ldrb	r2, [r3, #9]
 8008e28:	3a01      	subs	r2, #1
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008e2e:	2101      	movs	r1, #1
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fbf7 	bl	8009624 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	7f1b      	ldrb	r3, [r3, #28]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d021      	beq.n	8008e86 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d01d      	beq.n	8008e86 <poll_tcp+0xb2>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e52:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008e56:	d316      	bcc.n	8008e86 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d810      	bhi.n	8008e86 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	7f1b      	ldrb	r3, [r3, #28]
 8008e68:	f023 0310 	bic.w	r3, r3, #16
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <poll_tcp+0xb2>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2102      	movs	r1, #2
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	08017140 	.word	0x08017140
 8008e94:	08017298 	.word	0x08017298
 8008e98:	08017184 	.word	0x08017184

08008e9c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <sent_tcp+0x26>
 8008eb4:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <sent_tcp+0x9c>)
 8008eb6:	f240 1293 	movw	r2, #403	; 0x193
 8008eba:	4920      	ldr	r1, [pc, #128]	; (8008f3c <sent_tcp+0xa0>)
 8008ebc:	4820      	ldr	r0, [pc, #128]	; (8008f40 <sent_tcp+0xa4>)
 8008ebe:	f00c fe6d 	bl	8015b9c <iprintf>

  if (conn) {
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d032      	beq.n	8008f2e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d104      	bne.n	8008eda <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	6978      	ldr	r0, [r7, #20]
 8008ed4:	f000 fefc 	bl	8009cd0 <lwip_netconn_do_writemore>
 8008ed8:	e007      	b.n	8008eea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d103      	bne.n	8008eea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	6978      	ldr	r0, [r7, #20]
 8008ee6:	f000 fb9d 	bl	8009624 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01d      	beq.n	8008f2e <sent_tcp+0x92>
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008efa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008efe:	d316      	bcc.n	8008f2e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d810      	bhi.n	8008f2e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	7f1b      	ldrb	r3, [r3, #28]
 8008f10:	f023 0310 	bic.w	r3, r3, #16
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d005      	beq.n	8008f2e <sent_tcp+0x92>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	2102      	movs	r1, #2
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	08017140 	.word	0x08017140
 8008f3c:	08017298 	.word	0x08017298
 8008f40:	08017184 	.word	0x08017184

08008f44 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <err_tcp+0x24>
 8008f5a:	4b5f      	ldr	r3, [pc, #380]	; (80090d8 <err_tcp+0x194>)
 8008f5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008f60:	495e      	ldr	r1, [pc, #376]	; (80090dc <err_tcp+0x198>)
 8008f62:	485f      	ldr	r0, [pc, #380]	; (80090e0 <err_tcp+0x19c>)
 8008f64:	f00c fe1a 	bl	8015b9c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008f68:	f00c fbb4 	bl	80156d4 <sys_arch_protect>
 8008f6c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	7f1b      	ldrb	r3, [r3, #28]
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2200      	movs	r2, #0
 8008f92:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008f94:	69b8      	ldr	r0, [r7, #24]
 8008f96:	f00c fbab 	bl	80156f0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <err_tcp+0x6a>
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2104      	movs	r1, #4
 8008faa:	69f8      	ldr	r0, [r7, #28]
 8008fac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <err_tcp+0x7e>
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	69f8      	ldr	r0, [r7, #28]
 8008fc0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <err_tcp+0x92>
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	69f8      	ldr	r0, [r7, #28]
 8008fd4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fd86 	bl	8008aec <lwip_netconn_err_to_msg>
 8008fe0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3310      	adds	r3, #16
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f00c fa59 	bl	801549e <sys_mbox_valid>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3310      	adds	r3, #16
 8008ff6:	6939      	ldr	r1, [r7, #16]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f00c f9db 	bl	80153b4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	3314      	adds	r3, #20
 8009002:	4618      	mov	r0, r3
 8009004:	f00c fa4b 	bl	801549e <sys_mbox_valid>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	3314      	adds	r3, #20
 8009012:	6939      	ldr	r1, [r7, #16]
 8009014:	4618      	mov	r0, r3
 8009016:	f00c f9cd 	bl	80153b4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d005      	beq.n	800902c <err_tcp+0xe8>
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	2b04      	cmp	r3, #4
 8009024:	d002      	beq.n	800902c <err_tcp+0xe8>
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	2b03      	cmp	r3, #3
 800902a:	d143      	bne.n	80090b4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	7f1b      	ldrb	r3, [r3, #28]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf14      	ite	ne
 8009038:	2301      	movne	r3, #1
 800903a:	2300      	moveq	r3, #0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	7f1b      	ldrb	r3, [r3, #28]
 8009044:	f023 0304 	bic.w	r3, r3, #4
 8009048:	b2da      	uxtb	r2, r3
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d13b      	bne.n	80090cc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <err_tcp+0x126>
 800905c:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <err_tcp+0x194>)
 800905e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009062:	4920      	ldr	r1, [pc, #128]	; (80090e4 <err_tcp+0x1a0>)
 8009064:	481e      	ldr	r0, [pc, #120]	; (80090e0 <err_tcp+0x19c>)
 8009066:	f00c fd99 	bl	8015b9c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b04      	cmp	r3, #4
 800906e:	d104      	bne.n	800907a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	2200      	movs	r2, #0
 8009076:	711a      	strb	r2, [r3, #4]
 8009078:	e003      	b.n	8009082 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800908c:	68b8      	ldr	r0, [r7, #8]
 800908e:	f00c fa97 	bl	80155c0 <sys_sem_valid>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d106      	bne.n	80090a6 <err_tcp+0x162>
 8009098:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <err_tcp+0x194>)
 800909a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800909e:	4912      	ldr	r1, [pc, #72]	; (80090e8 <err_tcp+0x1a4>)
 80090a0:	480f      	ldr	r0, [pc, #60]	; (80090e0 <err_tcp+0x19c>)
 80090a2:	f00c fd7b 	bl	8015b9c <iprintf>
      conn->current_msg = NULL;
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	2200      	movs	r2, #0
 80090aa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80090ac:	68b8      	ldr	r0, [r7, #8]
 80090ae:	f00c fa6d 	bl	801558c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80090b2:	e00b      	b.n	80090cc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d008      	beq.n	80090ce <err_tcp+0x18a>
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <err_tcp+0x194>)
 80090be:	f240 12f7 	movw	r2, #503	; 0x1f7
 80090c2:	490a      	ldr	r1, [pc, #40]	; (80090ec <err_tcp+0x1a8>)
 80090c4:	4806      	ldr	r0, [pc, #24]	; (80090e0 <err_tcp+0x19c>)
 80090c6:	f00c fd69 	bl	8015b9c <iprintf>
  }
}
 80090ca:	e000      	b.n	80090ce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80090cc:	bf00      	nop
}
 80090ce:	bf00      	nop
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	08017140 	.word	0x08017140
 80090dc:	08017298 	.word	0x08017298
 80090e0:	08017184 	.word	0x08017184
 80090e4:	080172a8 	.word	0x080172a8
 80090e8:	080172c4 	.word	0x080172c4
 80090ec:	080172e0 	.word	0x080172e0

080090f0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f004 fd41 	bl	800db88 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009106:	490a      	ldr	r1, [pc, #40]	; (8009130 <setup_tcp+0x40>)
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f004 fd4f 	bl	800dbac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800910e:	4909      	ldr	r1, [pc, #36]	; (8009134 <setup_tcp+0x44>)
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f004 fd6d 	bl	800dbf0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009116:	2202      	movs	r2, #2
 8009118:	4907      	ldr	r1, [pc, #28]	; (8009138 <setup_tcp+0x48>)
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f004 fdc4 	bl	800dca8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009120:	4906      	ldr	r1, [pc, #24]	; (800913c <setup_tcp+0x4c>)
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f004 fd86 	bl	800dc34 <tcp_err>
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	08008cc9 	.word	0x08008cc9
 8009134:	08008e9d 	.word	0x08008e9d
 8009138:	08008dd5 	.word	0x08008dd5
 800913c:	08008f45 	.word	0x08008f45

08009140 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b089      	sub	sp, #36	; 0x24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <accept_function+0x1e>
    return ERR_VAL;
 8009158:	f06f 0305 	mvn.w	r3, #5
 800915c:	e0a1      	b.n	80092a2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	3314      	adds	r3, #20
 8009162:	4618      	mov	r0, r3
 8009164:	f00c f99b 	bl	801549e <sys_mbox_valid>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800916e:	f06f 0305 	mvn.w	r3, #5
 8009172:	e096      	b.n	80092a2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11b      	bne.n	80091b2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f103 0414 	add.w	r4, r3, #20
 8009180:	f06f 000c 	mvn.w	r0, #12
 8009184:	f7ff fcb2 	bl	8008aec <lwip_netconn_err_to_msg>
 8009188:	4603      	mov	r3, r0
 800918a:	4619      	mov	r1, r3
 800918c:	4620      	mov	r0, r4
 800918e:	f00c f911 	bl	80153b4 <sys_mbox_trypost>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <accept_function+0x6c>
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	2200      	movs	r2, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	69f8      	ldr	r0, [r7, #28]
 80091aa:	4798      	blx	r3
    }
    return ERR_VAL;
 80091ac:	f06f 0305 	mvn.w	r3, #5
 80091b0:	e077      	b.n	80092a2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80091b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d006      	beq.n	80091c8 <accept_function+0x88>
 80091ba:	4b3c      	ldr	r3, [pc, #240]	; (80092ac <accept_function+0x16c>)
 80091bc:	f240 222a 	movw	r2, #554	; 0x22a
 80091c0:	493b      	ldr	r1, [pc, #236]	; (80092b0 <accept_function+0x170>)
 80091c2:	483c      	ldr	r0, [pc, #240]	; (80092b4 <accept_function+0x174>)
 80091c4:	f00c fcea 	bl	8015b9c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 f8f0 	bl	80093b8 <netconn_alloc>
 80091d8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11b      	bne.n	8009218 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f103 0414 	add.w	r4, r3, #20
 80091e6:	f06f 000c 	mvn.w	r0, #12
 80091ea:	f7ff fc7f 	bl	8008aec <lwip_netconn_err_to_msg>
 80091ee:	4603      	mov	r3, r0
 80091f0:	4619      	mov	r1, r3
 80091f2:	4620      	mov	r0, r4
 80091f4:	f00c f8de 	bl	80153b4 <sys_mbox_trypost>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <accept_function+0xd2>
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2200      	movs	r2, #0
 800920c:	2100      	movs	r1, #0
 800920e:	69f8      	ldr	r0, [r7, #28]
 8009210:	4798      	blx	r3
    }
    return ERR_MEM;
 8009212:	f04f 33ff 	mov.w	r3, #4294967295
 8009216:	e044      	b.n	80092a2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f7ff ff66 	bl	80090f0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	3314      	adds	r3, #20
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	4618      	mov	r0, r3
 800922c:	f00c f8c2 	bl	80153b4 <sys_mbox_trypost>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d02a      	beq.n	800928c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800923c:	2100      	movs	r1, #0
 800923e:	6978      	ldr	r0, [r7, #20]
 8009240:	f004 fca2 	bl	800db88 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009244:	2100      	movs	r1, #0
 8009246:	6978      	ldr	r0, [r7, #20]
 8009248:	f004 fcb0 	bl	800dbac <tcp_recv>
    tcp_sent(pcb, NULL);
 800924c:	2100      	movs	r1, #0
 800924e:	6978      	ldr	r0, [r7, #20]
 8009250:	f004 fcce 	bl	800dbf0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	6978      	ldr	r0, [r7, #20]
 800925a:	f004 fd25 	bl	800dca8 <tcp_poll>
    tcp_err(pcb, NULL);
 800925e:	2100      	movs	r1, #0
 8009260:	6978      	ldr	r0, [r7, #20]
 8009262:	f004 fce7 	bl	800dc34 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2200      	movs	r2, #0
 800926a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f00c f88d 	bl	8015390 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	3310      	adds	r3, #16
 800927a:	4618      	mov	r0, r3
 800927c:	f00c f920 	bl	80154c0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009280:	69b8      	ldr	r0, [r7, #24]
 8009282:	f000 f907 	bl	8009494 <netconn_free>
    return ERR_MEM;
 8009286:	f04f 33ff 	mov.w	r3, #4294967295
 800928a:	e00a      	b.n	80092a2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <accept_function+0x160>
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2200      	movs	r2, #0
 800929a:	2100      	movs	r1, #0
 800929c:	69f8      	ldr	r0, [r7, #28]
 800929e:	4798      	blx	r3
  }

  return ERR_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3724      	adds	r7, #36	; 0x24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd90      	pop	{r4, r7, pc}
 80092aa:	bf00      	nop
 80092ac:	08017140 	.word	0x08017140
 80092b0:	080172fc 	.word	0x080172fc
 80092b4:	08017184 	.word	0x08017184

080092b8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <pcb_new+0x24>
 80092ce:	4b2b      	ldr	r3, [pc, #172]	; (800937c <pcb_new+0xc4>)
 80092d0:	f240 2265 	movw	r2, #613	; 0x265
 80092d4:	492a      	ldr	r1, [pc, #168]	; (8009380 <pcb_new+0xc8>)
 80092d6:	482b      	ldr	r0, [pc, #172]	; (8009384 <pcb_new+0xcc>)
 80092d8:	f00c fc60 	bl	8015b9c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d022      	beq.n	8009330 <pcb_new+0x78>
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d133      	bne.n	8009356 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681c      	ldr	r4, [r3, #0]
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f009 fd26 	bl	8012d46 <udp_new_ip_type>
 80092fa:	4603      	mov	r3, r0
 80092fc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02a      	beq.n	800935e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b22      	cmp	r3, #34	; 0x22
 8009310:	d104      	bne.n	800931c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6858      	ldr	r0, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	4917      	ldr	r1, [pc, #92]	; (8009388 <pcb_new+0xd0>)
 800932a:	f009 fc93 	bl	8012c54 <udp_recv>
      }
      break;
 800932e:	e016      	b.n	800935e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681c      	ldr	r4, [r3, #0]
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	4618      	mov	r0, r3
 8009338:	f004 fc18 	bl	800db6c <tcp_new_ip_type>
 800933c:	4603      	mov	r3, r0
 800933e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fece 	bl	80090f0 <setup_tcp>
      }
      break;
 8009354:	e005      	b.n	8009362 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	22fa      	movs	r2, #250	; 0xfa
 800935a:	711a      	strb	r2, [r3, #4]
      return;
 800935c:	e00a      	b.n	8009374 <pcb_new+0xbc>
      break;
 800935e:	bf00      	nop
 8009360:	e000      	b.n	8009364 <pcb_new+0xac>
      break;
 8009362:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	22ff      	movs	r2, #255	; 0xff
 8009372:	711a      	strb	r2, [r3, #4]
  }
}
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bd90      	pop	{r4, r7, pc}
 800937a:	bf00      	nop
 800937c:	08017140 	.word	0x08017140
 8009380:	08017324 	.word	0x08017324
 8009384:	08017184 	.word	0x08017184
 8009388:	08008bcd 	.word	0x08008bcd

0800938c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d102      	bne.n	80093ae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff ff85 	bl	80092b8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80093c8:	2007      	movs	r0, #7
 80093ca:	f001 fe45 	bl	800b058 <memp_malloc>
 80093ce:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <netconn_alloc+0x22>
    return NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e052      	b.n	8009480 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	79fa      	ldrb	r2, [r7, #7]
 80093e4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d004      	beq.n	8009400 <netconn_alloc+0x48>
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d105      	bne.n	8009406 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80093fa:	2306      	movs	r3, #6
 80093fc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80093fe:	e00a      	b.n	8009416 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009400:	2306      	movs	r3, #6
 8009402:	617b      	str	r3, [r7, #20]
      break;
 8009404:	e007      	b.n	8009416 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009406:	4b20      	ldr	r3, [pc, #128]	; (8009488 <netconn_alloc+0xd0>)
 8009408:	f240 22e5 	movw	r2, #741	; 0x2e5
 800940c:	491f      	ldr	r1, [pc, #124]	; (800948c <netconn_alloc+0xd4>)
 800940e:	4820      	ldr	r0, [pc, #128]	; (8009490 <netconn_alloc+0xd8>)
 8009410:	f00c fbc4 	bl	8015b9c <iprintf>
      goto free_and_return;
 8009414:	e02f      	b.n	8009476 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3310      	adds	r3, #16
 800941a:	6979      	ldr	r1, [r7, #20]
 800941c:	4618      	mov	r0, r3
 800941e:	f00b ff95 	bl	801534c <sys_mbox_new>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d125      	bne.n	8009474 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	330c      	adds	r3, #12
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f00c f853 	bl	80154da <sys_sem_new>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d005      	beq.n	8009446 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3310      	adds	r3, #16
 800943e:	4618      	mov	r0, r3
 8009440:	f00b ffa6 	bl	8015390 <sys_mbox_free>
    goto free_and_return;
 8009444:	e017      	b.n	8009476 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3314      	adds	r3, #20
 800944a:	4618      	mov	r0, r3
 800944c:	f00c f838 	bl	80154c0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	7cfa      	ldrb	r2, [r7, #19]
 800946e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	e005      	b.n	8009480 <netconn_alloc+0xc8>
    goto free_and_return;
 8009474:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	2007      	movs	r0, #7
 800947a:	f001 fe63 	bl	800b144 <memp_free>
  return NULL;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	08017140 	.word	0x08017140
 800948c:	08017344 	.word	0x08017344
 8009490:	08017184 	.word	0x08017184

08009494 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d006      	beq.n	80094b2 <netconn_free+0x1e>
 80094a4:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <netconn_free+0x80>)
 80094a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80094aa:	491b      	ldr	r1, [pc, #108]	; (8009518 <netconn_free+0x84>)
 80094ac:	481b      	ldr	r0, [pc, #108]	; (800951c <netconn_free+0x88>)
 80094ae:	f00c fb75 	bl	8015b9c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3310      	adds	r3, #16
 80094b6:	4618      	mov	r0, r3
 80094b8:	f00b fff1 	bl	801549e <sys_mbox_valid>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d006      	beq.n	80094d0 <netconn_free+0x3c>
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <netconn_free+0x80>)
 80094c4:	f240 3223 	movw	r2, #803	; 0x323
 80094c8:	4915      	ldr	r1, [pc, #84]	; (8009520 <netconn_free+0x8c>)
 80094ca:	4814      	ldr	r0, [pc, #80]	; (800951c <netconn_free+0x88>)
 80094cc:	f00c fb66 	bl	8015b9c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3314      	adds	r3, #20
 80094d4:	4618      	mov	r0, r3
 80094d6:	f00b ffe2 	bl	801549e <sys_mbox_valid>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <netconn_free+0x5a>
 80094e0:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <netconn_free+0x80>)
 80094e2:	f240 3226 	movw	r2, #806	; 0x326
 80094e6:	490f      	ldr	r1, [pc, #60]	; (8009524 <netconn_free+0x90>)
 80094e8:	480c      	ldr	r0, [pc, #48]	; (800951c <netconn_free+0x88>)
 80094ea:	f00c fb57 	bl	8015b9c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	330c      	adds	r3, #12
 80094f2:	4618      	mov	r0, r3
 80094f4:	f00c f857 	bl	80155a6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	330c      	adds	r3, #12
 80094fc:	4618      	mov	r0, r3
 80094fe:	f00c f870 	bl	80155e2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	2007      	movs	r0, #7
 8009506:	f001 fe1d 	bl	800b144 <memp_free>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	08017140 	.word	0x08017140
 8009518:	0801736c 	.word	0x0801736c
 800951c:	08017184 	.word	0x08017184
 8009520:	0801739c 	.word	0x0801739c
 8009524:	080173d8 	.word	0x080173d8

08009528 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3310      	adds	r3, #16
 8009534:	4618      	mov	r0, r3
 8009536:	f00b ffb2 	bl	801549e <sys_mbox_valid>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d02f      	beq.n	80095a0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009540:	e018      	b.n	8009574 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800954a:	2b10      	cmp	r3, #16
 800954c:	d10e      	bne.n	800956c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f107 020f 	add.w	r2, r7, #15
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff fafe 	bl	8008b58 <lwip_netconn_is_err_msg>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d108      	bne.n	8009574 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4618      	mov	r0, r3
 8009566:	f002 fc91 	bl	800be8c <pbuf_free>
 800956a:	e003      	b.n	8009574 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fe92 	bl	800a298 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3310      	adds	r3, #16
 8009578:	f107 0210 	add.w	r2, r7, #16
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f00b ff71 	bl	8015466 <sys_arch_mbox_tryfetch>
 8009584:	4603      	mov	r3, r0
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958a:	d1da      	bne.n	8009542 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3310      	adds	r3, #16
 8009590:	4618      	mov	r0, r3
 8009592:	f00b fefd 	bl	8015390 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3310      	adds	r3, #16
 800959a:	4618      	mov	r0, r3
 800959c:	f00b ff90 	bl	80154c0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3314      	adds	r3, #20
 80095a4:	4618      	mov	r0, r3
 80095a6:	f00b ff7a 	bl	801549e <sys_mbox_valid>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d034      	beq.n	800961a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80095b0:	e01d      	b.n	80095ee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f107 020e 	add.w	r2, r7, #14
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff facc 	bl	8008b58 <lwip_netconn_is_err_msg>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d113      	bne.n	80095ee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff ffac 	bl	8009528 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	f003 fa45 	bl	800ca6c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80095e8:	6978      	ldr	r0, [r7, #20]
 80095ea:	f7ff ff53 	bl	8009494 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3314      	adds	r3, #20
 80095f2:	f107 0210 	add.w	r2, r7, #16
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f00b ff34 	bl	8015466 <sys_arch_mbox_tryfetch>
 80095fe:	4603      	mov	r3, r0
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d1d5      	bne.n	80095b2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3314      	adds	r3, #20
 800960a:	4618      	mov	r0, r3
 800960c:	f00b fec0 	bl	8015390 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3314      	adds	r3, #20
 8009614:	4618      	mov	r0, r3
 8009616:	f00b ff53 	bl	80154c0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <lwip_netconn_do_close_internal+0x24>
 800963a:	4b87      	ldr	r3, [pc, #540]	; (8009858 <lwip_netconn_do_close_internal+0x234>)
 800963c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009640:	4986      	ldr	r1, [pc, #536]	; (800985c <lwip_netconn_do_close_internal+0x238>)
 8009642:	4887      	ldr	r0, [pc, #540]	; (8009860 <lwip_netconn_do_close_internal+0x23c>)
 8009644:	f00c faaa 	bl	8015b9c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009650:	2b10      	cmp	r3, #16
 8009652:	d006      	beq.n	8009662 <lwip_netconn_do_close_internal+0x3e>
 8009654:	4b80      	ldr	r3, [pc, #512]	; (8009858 <lwip_netconn_do_close_internal+0x234>)
 8009656:	f240 32a3 	movw	r2, #931	; 0x3a3
 800965a:	4982      	ldr	r1, [pc, #520]	; (8009864 <lwip_netconn_do_close_internal+0x240>)
 800965c:	4880      	ldr	r0, [pc, #512]	; (8009860 <lwip_netconn_do_close_internal+0x23c>)
 800965e:	f00c fa9d 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b04      	cmp	r3, #4
 8009668:	d006      	beq.n	8009678 <lwip_netconn_do_close_internal+0x54>
 800966a:	4b7b      	ldr	r3, [pc, #492]	; (8009858 <lwip_netconn_do_close_internal+0x234>)
 800966c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009670:	497d      	ldr	r1, [pc, #500]	; (8009868 <lwip_netconn_do_close_internal+0x244>)
 8009672:	487b      	ldr	r0, [pc, #492]	; (8009860 <lwip_netconn_do_close_internal+0x23c>)
 8009674:	f00c fa92 	bl	8015b9c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <lwip_netconn_do_close_internal+0x6a>
 8009680:	4b75      	ldr	r3, [pc, #468]	; (8009858 <lwip_netconn_do_close_internal+0x234>)
 8009682:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009686:	4979      	ldr	r1, [pc, #484]	; (800986c <lwip_netconn_do_close_internal+0x248>)
 8009688:	4875      	ldr	r0, [pc, #468]	; (8009860 <lwip_netconn_do_close_internal+0x23c>)
 800968a:	f00c fa87 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <lwip_netconn_do_close_internal+0x80>
 8009696:	4b70      	ldr	r3, [pc, #448]	; (8009858 <lwip_netconn_do_close_internal+0x234>)
 8009698:	f240 32a6 	movw	r2, #934	; 0x3a6
 800969c:	4974      	ldr	r1, [pc, #464]	; (8009870 <lwip_netconn_do_close_internal+0x24c>)
 800969e:	4870      	ldr	r0, [pc, #448]	; (8009860 <lwip_netconn_do_close_internal+0x23c>)
 80096a0:	f00c fa7c 	bl	8015b9c <iprintf>

  tpcb = conn->pcb.tcp;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	7a1b      	ldrb	r3, [r3, #8]
 80096b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d102      	bne.n	80096ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75bb      	strb	r3, [r7, #22]
 80096cc:	e01f      	b.n	800970e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00e      	beq.n	80096f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80096d8:	2b05      	cmp	r3, #5
 80096da:	d007      	beq.n	80096ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80096e0:	2b06      	cmp	r3, #6
 80096e2:	d003      	beq.n	80096ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d102      	bne.n	80096f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80096ec:	2301      	movs	r3, #1
 80096ee:	75bb      	strb	r3, [r7, #22]
 80096f0:	e00d      	b.n	800970e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80096f2:	7b7b      	ldrb	r3, [r7, #13]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <lwip_netconn_do_close_internal+0xe6>
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	8b5b      	ldrh	r3, [r3, #26]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009704:	2301      	movs	r3, #1
 8009706:	75bb      	strb	r3, [r7, #22]
 8009708:	e001      	b.n	800970e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800970e:	7dbb      	ldrb	r3, [r7, #22]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009714:	2100      	movs	r1, #0
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f004 fa36 	bl	800db88 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	7d1b      	ldrb	r3, [r3, #20]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d104      	bne.n	800972e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009724:	2100      	movs	r1, #0
 8009726:	6938      	ldr	r0, [r7, #16]
 8009728:	f004 faa6 	bl	800dc78 <tcp_accept>
 800972c:	e01d      	b.n	800976a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009734:	2100      	movs	r1, #0
 8009736:	6938      	ldr	r0, [r7, #16]
 8009738:	f004 fa38 	bl	800dbac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800973c:	2100      	movs	r1, #0
 800973e:	6938      	ldr	r0, [r7, #16]
 8009740:	f004 fa9a 	bl	800dc78 <tcp_accept>
    }
    if (shut_tx) {
 8009744:	7b7b      	ldrb	r3, [r7, #13]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800974a:	2100      	movs	r1, #0
 800974c:	6938      	ldr	r0, [r7, #16]
 800974e:	f004 fa4f 	bl	800dbf0 <tcp_sent>
    }
    if (shut_close) {
 8009752:	7dbb      	ldrb	r3, [r7, #22]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009758:	2200      	movs	r2, #0
 800975a:	2100      	movs	r1, #0
 800975c:	6938      	ldr	r0, [r7, #16]
 800975e:	f004 faa3 	bl	800dca8 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009762:	2100      	movs	r1, #0
 8009764:	6938      	ldr	r0, [r7, #16]
 8009766:	f004 fa65 	bl	800dc34 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800976a:	7dbb      	ldrb	r3, [r7, #22]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009770:	6938      	ldr	r0, [r7, #16]
 8009772:	f003 f835 	bl	800c7e0 <tcp_close>
 8009776:	4603      	mov	r3, r0
 8009778:	75fb      	strb	r3, [r7, #23]
 800977a:	e007      	b.n	800978c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	7b7a      	ldrb	r2, [r7, #13]
 8009780:	4619      	mov	r1, r3
 8009782:	6938      	ldr	r0, [r7, #16]
 8009784:	f003 f858 	bl	800c838 <tcp_shutdown>
 8009788:	4603      	mov	r3, r0
 800978a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800978c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009794:	2301      	movs	r3, #1
 8009796:	757b      	strb	r3, [r7, #21]
 8009798:	e016      	b.n	80097c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800979a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d10f      	bne.n	80097c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10c      	bne.n	80097c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80097ae:	2301      	movs	r3, #1
 80097b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80097b2:	7dbb      	ldrb	r3, [r7, #22]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f003 f957 	bl	800ca6c <tcp_abort>
          err = ERR_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]
 80097c2:	e001      	b.n	80097c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80097c4:	2301      	movs	r3, #1
 80097c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80097c8:	7d7b      	ldrb	r3, [r7, #21]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d052      	beq.n	8009874 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	7dfa      	ldrb	r2, [r7, #23]
 80097de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80097ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d129      	bne.n	8009848 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80097f4:	7dbb      	ldrb	r3, [r7, #22]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <lwip_netconn_do_close_internal+0x1f0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2200      	movs	r2, #0
 800980e:	2104      	movs	r1, #4
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
      }
      if (shut_rx) {
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <lwip_netconn_do_close_internal+0x20a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
      }
      if (shut_tx) {
 800982e:	7b7b      	ldrb	r3, [r7, #13]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <lwip_netconn_do_close_internal+0x224>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	2200      	movs	r2, #0
 8009842:	2102      	movs	r1, #2
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800984e:	68b8      	ldr	r0, [r7, #8]
 8009850:	f00b fe9c 	bl	801558c <sys_sem_signal>
    }
    return ERR_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	e03c      	b.n	80098d2 <lwip_netconn_do_close_internal+0x2ae>
 8009858:	08017140 	.word	0x08017140
 800985c:	08017414 	.word	0x08017414
 8009860:	08017184 	.word	0x08017184
 8009864:	08017424 	.word	0x08017424
 8009868:	08017444 	.word	0x08017444
 800986c:	08017468 	.word	0x08017468
 8009870:	080172a8 	.word	0x080172a8
  }
  if (!close_finished) {
 8009874:	7d7b      	ldrb	r3, [r7, #21]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d11e      	bne.n	80098b8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	7d1b      	ldrb	r3, [r3, #20]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d106      	bne.n	8009890 <lwip_netconn_do_close_internal+0x26c>
 8009882:	4b16      	ldr	r3, [pc, #88]	; (80098dc <lwip_netconn_do_close_internal+0x2b8>)
 8009884:	f240 4241 	movw	r2, #1089	; 0x441
 8009888:	4915      	ldr	r1, [pc, #84]	; (80098e0 <lwip_netconn_do_close_internal+0x2bc>)
 800988a:	4816      	ldr	r0, [pc, #88]	; (80098e4 <lwip_netconn_do_close_internal+0x2c0>)
 800988c:	f00c f986 	bl	8015b9c <iprintf>
    if (shut_tx) {
 8009890:	7b7b      	ldrb	r3, [r7, #13]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009896:	4914      	ldr	r1, [pc, #80]	; (80098e8 <lwip_netconn_do_close_internal+0x2c4>)
 8009898:	6938      	ldr	r0, [r7, #16]
 800989a:	f004 f9a9 	bl	800dbf0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800989e:	2201      	movs	r2, #1
 80098a0:	4912      	ldr	r1, [pc, #72]	; (80098ec <lwip_netconn_do_close_internal+0x2c8>)
 80098a2:	6938      	ldr	r0, [r7, #16]
 80098a4:	f004 fa00 	bl	800dca8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80098a8:	4911      	ldr	r1, [pc, #68]	; (80098f0 <lwip_netconn_do_close_internal+0x2cc>)
 80098aa:	6938      	ldr	r0, [r7, #16]
 80098ac:	f004 f9c2 	bl	800dc34 <tcp_err>
    tcp_arg(tpcb, conn);
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	6938      	ldr	r0, [r7, #16]
 80098b4:	f004 f968 	bl	800db88 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80098b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <lwip_netconn_do_close_internal+0x2aa>
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <lwip_netconn_do_close_internal+0x2b8>)
 80098c2:	f240 424d 	movw	r2, #1101	; 0x44d
 80098c6:	490b      	ldr	r1, [pc, #44]	; (80098f4 <lwip_netconn_do_close_internal+0x2d0>)
 80098c8:	4806      	ldr	r0, [pc, #24]	; (80098e4 <lwip_netconn_do_close_internal+0x2c0>)
 80098ca:	f00c f967 	bl	8015b9c <iprintf>
  return err;
 80098ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	08017140 	.word	0x08017140
 80098e0:	0801747c 	.word	0x0801747c
 80098e4:	08017184 	.word	0x08017184
 80098e8:	08008e9d 	.word	0x08008e9d
 80098ec:	08008dd5 	.word	0x08008dd5
 80098f0:	08008f45 	.word	0x08008f45
 80098f4:	080174a0 	.word	0x080174a0

080098f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	785b      	ldrb	r3, [r3, #1]
 800990a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00d      	beq.n	800992e <lwip_netconn_do_delconn+0x36>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991c:	2b10      	cmp	r3, #16
 800991e:	d006      	beq.n	800992e <lwip_netconn_do_delconn+0x36>
 8009920:	4b60      	ldr	r3, [pc, #384]	; (8009aa4 <lwip_netconn_do_delconn+0x1ac>)
 8009922:	f240 425e 	movw	r2, #1118	; 0x45e
 8009926:	4960      	ldr	r1, [pc, #384]	; (8009aa8 <lwip_netconn_do_delconn+0x1b0>)
 8009928:	4860      	ldr	r0, [pc, #384]	; (8009aac <lwip_netconn_do_delconn+0x1b4>)
 800992a:	f00c f937 	bl	8015b9c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800992e:	7afb      	ldrb	r3, [r7, #11]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <lwip_netconn_do_delconn+0x48>
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d002      	beq.n	8009940 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	2b03      	cmp	r3, #3
 800993e:	d109      	bne.n	8009954 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009940:	7afb      	ldrb	r3, [r7, #11]
 8009942:	2b03      	cmp	r3, #3
 8009944:	d10a      	bne.n	800995c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	7f1b      	ldrb	r3, [r3, #28]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d103      	bne.n	800995c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	22fb      	movs	r2, #251	; 0xfb
 8009958:	711a      	strb	r2, [r3, #4]
 800995a:	e097      	b.n	8009a8c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	2b03      	cmp	r3, #3
 8009960:	d10d      	bne.n	800997e <lwip_netconn_do_delconn+0x86>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	7f1b      	ldrb	r3, [r3, #28]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d106      	bne.n	800997e <lwip_netconn_do_delconn+0x86>
 8009970:	4b4c      	ldr	r3, [pc, #304]	; (8009aa4 <lwip_netconn_do_delconn+0x1ac>)
 8009972:	f240 427a 	movw	r2, #1146	; 0x47a
 8009976:	494e      	ldr	r1, [pc, #312]	; (8009ab0 <lwip_netconn_do_delconn+0x1b8>)
 8009978:	484c      	ldr	r0, [pc, #304]	; (8009aac <lwip_netconn_do_delconn+0x1b4>)
 800997a:	f00c f90f 	bl	8015b9c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff fdcd 	bl	8009528 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d05f      	beq.n	8009a58 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a2:	2b10      	cmp	r3, #16
 80099a4:	d00d      	beq.n	80099c2 <lwip_netconn_do_delconn+0xca>
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d151      	bne.n	8009a4e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f009 f96a 	bl	8012c94 <udp_remove>
          break;
 80099c0:	e046      	b.n	8009a50 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <lwip_netconn_do_delconn+0xe2>
 80099cc:	4b35      	ldr	r3, [pc, #212]	; (8009aa4 <lwip_netconn_do_delconn+0x1ac>)
 80099ce:	f240 4294 	movw	r2, #1172	; 0x494
 80099d2:	4938      	ldr	r1, [pc, #224]	; (8009ab4 <lwip_netconn_do_delconn+0x1bc>)
 80099d4:	4835      	ldr	r0, [pc, #212]	; (8009aac <lwip_netconn_do_delconn+0x1b4>)
 80099d6:	f00c f8e1 	bl	8015b9c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2204      	movs	r2, #4
 80099e0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2203      	movs	r2, #3
 80099e6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff fe14 	bl	8009624 <lwip_netconn_do_close_internal>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d04b      	beq.n	8009a9a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d006      	beq.n	8009a1a <lwip_netconn_do_delconn+0x122>
 8009a0c:	4b25      	ldr	r3, [pc, #148]	; (8009aa4 <lwip_netconn_do_delconn+0x1ac>)
 8009a0e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009a12:	4929      	ldr	r1, [pc, #164]	; (8009ab8 <lwip_netconn_do_delconn+0x1c0>)
 8009a14:	4825      	ldr	r0, [pc, #148]	; (8009aac <lwip_netconn_do_delconn+0x1b4>)
 8009a16:	f00c f8c1 	bl	8015b9c <iprintf>
            UNLOCK_TCPIP_CORE();
 8009a1a:	4828      	ldr	r0, [pc, #160]	; (8009abc <lwip_netconn_do_delconn+0x1c4>)
 8009a1c:	f00b fe27 	bl	801566e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	330c      	adds	r3, #12
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f00b fd7e 	bl	801552a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009a2e:	4823      	ldr	r0, [pc, #140]	; (8009abc <lwip_netconn_do_delconn+0x1c4>)
 8009a30:	f00b fe0e 	bl	8015650 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02d      	beq.n	8009a9a <lwip_netconn_do_delconn+0x1a2>
 8009a3e:	4b19      	ldr	r3, [pc, #100]	; (8009aa4 <lwip_netconn_do_delconn+0x1ac>)
 8009a40:	f240 429e 	movw	r2, #1182	; 0x49e
 8009a44:	491c      	ldr	r1, [pc, #112]	; (8009ab8 <lwip_netconn_do_delconn+0x1c0>)
 8009a46:	4819      	ldr	r0, [pc, #100]	; (8009aac <lwip_netconn_do_delconn+0x1b4>)
 8009a48:	f00c f8a8 	bl	8015b9c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009a4c:	e025      	b.n	8009a9a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009a4e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <lwip_netconn_do_delconn+0x17a>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	6810      	ldr	r0, [r2, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <lwip_netconn_do_delconn+0x194>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	6810      	ldr	r0, [r2, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	2102      	movs	r1, #2
 8009a8a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	330c      	adds	r3, #12
 8009a92:	4618      	mov	r0, r3
 8009a94:	f00b fd94 	bl	80155c0 <sys_sem_valid>
 8009a98:	e000      	b.n	8009a9c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009a9a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	08017140 	.word	0x08017140
 8009aa8:	080174b0 	.word	0x080174b0
 8009aac:	08017184 	.word	0x08017184
 8009ab0:	080174c4 	.word	0x080174c4
 8009ab4:	080174e4 	.word	0x080174e4
 8009ab8:	08017500 	.word	0x08017500
 8009abc:	200095b0 	.word	0x200095b0

08009ac0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d025      	beq.n	8009b22 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d00e      	beq.n	8009b02 <lwip_netconn_do_bind+0x42>
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d119      	bne.n	8009b1c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6858      	ldr	r0, [r3, #4]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6899      	ldr	r1, [r3, #8]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	899b      	ldrh	r3, [r3, #12]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f009 f824 	bl	8012b44 <udp_bind>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
        break;
 8009b00:	e011      	b.n	8009b26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6858      	ldr	r0, [r3, #4]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6899      	ldr	r1, [r3, #8]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	899b      	ldrh	r3, [r3, #12]
 8009b10:	461a      	mov	r2, r3
 8009b12:	f002 ffb7 	bl	800ca84 <tcp_bind>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
        break;
 8009b1a:	e004      	b.n	8009b26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009b1c:	23fa      	movs	r3, #250	; 0xfa
 8009b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8009b20:	e001      	b.n	8009b26 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009b22:	23fa      	movs	r3, #250	; 0xfa
 8009b24:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7bfa      	ldrb	r2, [r7, #15]
 8009b2a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d07f      	beq.n	8009c4a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b54:	2b10      	cmp	r3, #16
 8009b56:	d175      	bne.n	8009c44 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	785b      	ldrb	r3, [r3, #1]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d165      	bne.n	8009c2e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	7d1b      	ldrb	r3, [r3, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009b6e:	23fa      	movs	r3, #250	; 0xfa
 8009b70:	72fb      	strb	r3, [r7, #11]
 8009b72:	e06c      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009b74:	23ff      	movs	r3, #255	; 0xff
 8009b76:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f107 020b 	add.w	r2, r7, #11
 8009b82:	7cf9      	ldrb	r1, [r7, #19]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f003 f835 	bl	800cbf4 <tcp_listen_with_backlog_and_err>
 8009b8a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d05d      	beq.n	8009c4e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3310      	adds	r3, #16
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f00b fc80 	bl	801549e <sys_mbox_valid>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3310      	adds	r3, #16
 8009baa:	4618      	mov	r0, r3
 8009bac:	f00b fbf0 	bl	8015390 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3310      	adds	r3, #16
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f00b fc82 	bl	80154c0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3314      	adds	r3, #20
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f00b fc69 	bl	801549e <sys_mbox_valid>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d108      	bne.n	8009be4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	2106      	movs	r1, #6
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f00b fbb6 	bl	801534c <sys_mbox_new>
 8009be0:	4603      	mov	r3, r0
 8009be2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d118      	bne.n	8009c1e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f003 ffbd 	bl	800db88 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	4912      	ldr	r1, [pc, #72]	; (8009c60 <lwip_netconn_do_listen+0x12c>)
 8009c16:	4618      	mov	r0, r3
 8009c18:	f004 f82e 	bl	800dc78 <tcp_accept>
 8009c1c:	e017      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f002 fdde 	bl	800c7e0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	e00f      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d102      	bne.n	8009c3e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	72fb      	strb	r3, [r7, #11]
 8009c3c:	e007      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009c3e:	23f5      	movs	r3, #245	; 0xf5
 8009c40:	72fb      	strb	r3, [r7, #11]
 8009c42:	e004      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009c44:	23f0      	movs	r3, #240	; 0xf0
 8009c46:	72fb      	strb	r3, [r7, #11]
 8009c48:	e001      	b.n	8009c4e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009c4a:	23f5      	movs	r3, #245	; 0xf5
 8009c4c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009c4e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009c56:	bf00      	nop
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	08009141 	.word	0x08009141

08009c64 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2200      	movs	r2, #0
 8009c74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d022      	beq.n	8009cc6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c8a:	2b10      	cmp	r3, #16
 8009c8c:	d11b      	bne.n	8009cc6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9a:	d202      	bcs.n	8009ca2 <lwip_netconn_do_recv+0x3e>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	e001      	b.n	8009ca6 <lwip_netconn_do_recv+0x42>
 8009ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ca6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	89fa      	ldrh	r2, [r7, #14]
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f003 f8a2 	bl	800cdfc <tcp_recved>
        remaining -= recved;
 8009cb8:	89fb      	ldrh	r3, [r7, #14]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009cc6:	bf00      	nop
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <lwip_netconn_do_writemore+0x24>
 8009ce6:	4b96      	ldr	r3, [pc, #600]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009ce8:	f240 6273 	movw	r2, #1651	; 0x673
 8009cec:	4995      	ldr	r1, [pc, #596]	; (8009f44 <lwip_netconn_do_writemore+0x274>)
 8009cee:	4896      	ldr	r0, [pc, #600]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009cf0:	f00b ff54 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	785b      	ldrb	r3, [r3, #1]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d006      	beq.n	8009d0a <lwip_netconn_do_writemore+0x3a>
 8009cfc:	4b90      	ldr	r3, [pc, #576]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009cfe:	f240 6274 	movw	r2, #1652	; 0x674
 8009d02:	4992      	ldr	r1, [pc, #584]	; (8009f4c <lwip_netconn_do_writemore+0x27c>)
 8009d04:	4890      	ldr	r0, [pc, #576]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009d06:	f00b ff49 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <lwip_netconn_do_writemore+0x50>
 8009d12:	4b8b      	ldr	r3, [pc, #556]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009d14:	f240 6275 	movw	r2, #1653	; 0x675
 8009d18:	498d      	ldr	r1, [pc, #564]	; (8009f50 <lwip_netconn_do_writemore+0x280>)
 8009d1a:	488b      	ldr	r0, [pc, #556]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009d1c:	f00b ff3e 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <lwip_netconn_do_writemore+0x66>
 8009d28:	4b85      	ldr	r3, [pc, #532]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009d2a:	f240 6276 	movw	r2, #1654	; 0x676
 8009d2e:	4989      	ldr	r1, [pc, #548]	; (8009f54 <lwip_netconn_do_writemore+0x284>)
 8009d30:	4885      	ldr	r0, [pc, #532]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009d32:	f00b ff33 	bl	8015b9c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	699a      	ldr	r2, [r3, #24]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d306      	bcc.n	8009d54 <lwip_netconn_do_writemore+0x84>
 8009d46:	4b7e      	ldr	r3, [pc, #504]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009d48:	f240 6277 	movw	r2, #1655	; 0x677
 8009d4c:	4982      	ldr	r1, [pc, #520]	; (8009f58 <lwip_netconn_do_writemore+0x288>)
 8009d4e:	487e      	ldr	r0, [pc, #504]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009d50:	f00b ff24 	bl	8015b9c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	899b      	ldrh	r3, [r3, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d106      	bne.n	8009d6c <lwip_netconn_do_writemore+0x9c>
 8009d5e:	4b78      	ldr	r3, [pc, #480]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009d60:	f240 6279 	movw	r2, #1657	; 0x679
 8009d64:	497d      	ldr	r1, [pc, #500]	; (8009f5c <lwip_netconn_do_writemore+0x28c>)
 8009d66:	4878      	ldr	r0, [pc, #480]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009d68:	f00b ff18 	bl	8015b9c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	7f1b      	ldrb	r3, [r3, #28]
 8009d72:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7f1b      	ldrb	r3, [r3, #28]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <lwip_netconn_do_writemore+0xba>
 8009d80:	7ebb      	ldrb	r3, [r7, #26]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <lwip_netconn_do_writemore+0xbe>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <lwip_netconn_do_writemore+0xc0>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	4413      	add	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dbc:	d307      	bcc.n	8009dce <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dc2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009dc4:	7ebb      	ldrb	r3, [r7, #26]
 8009dc6:	f043 0302 	orr.w	r3, r3, #2
 8009dca:	76bb      	strb	r3, [r7, #26]
 8009dcc:	e001      	b.n	8009dd2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dda:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009ddc:	89fa      	ldrh	r2, [r7, #14]
 8009dde:	8bbb      	ldrh	r3, [r7, #28]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d216      	bcs.n	8009e12 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009de8:	7e3b      	ldrb	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009dee:	8bbb      	ldrh	r3, [r7, #28]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10e      	bne.n	8009e12 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <lwip_netconn_do_writemore+0x134>
 8009dfe:	f06f 0306 	mvn.w	r3, #6
 8009e02:	e000      	b.n	8009e06 <lwip_netconn_do_writemore+0x136>
 8009e04:	2300      	movs	r3, #0
 8009e06:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009e08:	e07d      	b.n	8009f06 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009e0a:	7ebb      	ldrb	r3, [r7, #26]
 8009e0c:	f043 0302 	orr.w	r3, r3, #2
 8009e10:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	8bbb      	ldrh	r3, [r7, #28]
 8009e1a:	441a      	add	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d906      	bls.n	8009e36 <lwip_netconn_do_writemore+0x166>
 8009e28:	4b45      	ldr	r3, [pc, #276]	; (8009f40 <lwip_netconn_do_writemore+0x270>)
 8009e2a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009e2e:	494c      	ldr	r1, [pc, #304]	; (8009f60 <lwip_netconn_do_writemore+0x290>)
 8009e30:	4845      	ldr	r0, [pc, #276]	; (8009f48 <lwip_netconn_do_writemore+0x278>)
 8009e32:	f00b feb3 	bl	8015b9c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009e36:	8bbb      	ldrh	r3, [r7, #28]
 8009e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d103      	bne.n	8009e48 <lwip_netconn_do_writemore+0x178>
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e46:	d209      	bcs.n	8009e5c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009e4c:	8bba      	ldrh	r2, [r7, #28]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d10b      	bne.n	8009e6a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	899b      	ldrh	r3, [r3, #12]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d906      	bls.n	8009e6a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009e60:	7ebb      	ldrb	r3, [r7, #26]
 8009e62:	f043 0302 	orr.w	r3, r3, #2
 8009e66:	76bb      	strb	r3, [r7, #26]
 8009e68:	e001      	b.n	8009e6e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6858      	ldr	r0, [r3, #4]
 8009e72:	7ebb      	ldrb	r3, [r7, #26]
 8009e74:	8bba      	ldrh	r2, [r7, #28]
 8009e76:	6979      	ldr	r1, [r7, #20]
 8009e78:	f006 fdc8 	bl	8010a0c <tcp_write>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009e80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d12c      	bne.n	8009ee2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	6999      	ldr	r1, [r3, #24]
 8009e8e:	8bba      	ldrh	r2, [r7, #28]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	440a      	add	r2, r1
 8009e96:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	6919      	ldr	r1, [r3, #16]
 8009e9e:	8bba      	ldrh	r2, [r7, #28]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d113      	bne.n	8009ee2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	899a      	ldrh	r2, [r3, #12]
 8009ec0:	3a01      	subs	r2, #1
 8009ec2:	b292      	uxth	r2, r2
 8009ec4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	899b      	ldrh	r3, [r3, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d008      	beq.n	8009ee2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	3208      	adds	r2, #8
 8009ed8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009ee2:	7e7b      	ldrb	r3, [r7, #25]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d004      	beq.n	8009ef2 <lwip_netconn_do_writemore+0x222>
 8009ee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f43f af50 	beq.w	8009d92 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009ef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <lwip_netconn_do_writemore+0x234>
 8009efa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f02:	d146      	bne.n	8009f92 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009f04:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009f06:	7e3b      	ldrb	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d02b      	beq.n	8009f64 <lwip_netconn_do_writemore+0x294>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	699a      	ldr	r2, [r3, #24]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d223      	bcs.n	8009f64 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d005      	beq.n	8009f30 <lwip_netconn_do_writemore+0x260>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2103      	movs	r1, #3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7f1b      	ldrb	r3, [r3, #28]
 8009f34:	f043 0310 	orr.w	r3, r3, #16
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	771a      	strb	r2, [r3, #28]
 8009f3e:	e028      	b.n	8009f92 <lwip_netconn_do_writemore+0x2c2>
 8009f40:	08017140 	.word	0x08017140
 8009f44:	08017298 	.word	0x08017298
 8009f48:	08017184 	.word	0x08017184
 8009f4c:	080175a0 	.word	0x080175a0
 8009f50:	080172a8 	.word	0x080172a8
 8009f54:	080175c0 	.word	0x080175c0
 8009f58:	080175d8 	.word	0x080175d8
 8009f5c:	08017618 	.word	0x08017618
 8009f60:	08017640 	.word	0x08017640
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f6c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009f70:	d305      	bcc.n	8009f7e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d909      	bls.n	8009f92 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <lwip_netconn_do_writemore+0x2c2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2103      	movs	r1, #3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d11d      	bne.n	8009fd6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	699a      	ldr	r2, [r3, #24]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d002      	beq.n	8009fb0 <lwip_netconn_do_writemore+0x2e0>
 8009faa:	7e3b      	ldrb	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f007 fb11 	bl	80115e0 <tcp_output>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009fc2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009fc6:	f113 0f04 	cmn.w	r3, #4
 8009fca:	d12c      	bne.n	800a026 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009fcc:	7b3b      	ldrb	r3, [r7, #12]
 8009fce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	76fb      	strb	r3, [r7, #27]
 8009fd4:	e027      	b.n	800a026 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009fd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fde:	d120      	bne.n	800a022 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f007 fafb 	bl	80115e0 <tcp_output>
 8009fea:	4603      	mov	r3, r0
 8009fec:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009fee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009ff2:	f113 0f04 	cmn.w	r3, #4
 8009ff6:	d104      	bne.n	800a002 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009ff8:	7b7b      	ldrb	r3, [r7, #13]
 8009ffa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	76fb      	strb	r3, [r7, #27]
 800a000:	e011      	b.n	800a026 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a002:	7e3b      	ldrb	r3, [r7, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <lwip_netconn_do_writemore+0x348>
 800a012:	f06f 0306 	mvn.w	r3, #6
 800a016:	e000      	b.n	800a01a <lwip_netconn_do_writemore+0x34a>
 800a018:	2300      	movs	r3, #0
 800a01a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a01c:	2301      	movs	r3, #1
 800a01e:	76fb      	strb	r3, [r7, #27]
 800a020:	e001      	b.n	800a026 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a022:	2301      	movs	r3, #1
 800a024:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a026:	7efb      	ldrb	r3, [r7, #27]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d015      	beq.n	800a058 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	330c      	adds	r3, #12
 800a034:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	7ffa      	ldrb	r2, [r7, #31]
 800a03c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a050:	68b8      	ldr	r0, [r7, #8]
 800a052:	f00b fa9b 	bl	801558c <sys_sem_signal>
 800a056:	e002      	b.n	800a05e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
 800a05c:	e000      	b.n	800a060 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3720      	adds	r7, #32
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe fd1c 	bl	8008ab6 <netconn_err>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d166      	bne.n	800a158 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a094:	2b10      	cmp	r3, #16
 800a096:	d15d      	bne.n	800a154 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a0a2:	23fb      	movs	r3, #251	; 0xfb
 800a0a4:	73fb      	strb	r3, [r7, #15]
 800a0a6:	e057      	b.n	800a158 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d04d      	beq.n	800a14e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d006      	beq.n	800a0d2 <lwip_netconn_do_write+0x6a>
 800a0c4:	4b28      	ldr	r3, [pc, #160]	; (800a168 <lwip_netconn_do_write+0x100>)
 800a0c6:	f240 7223 	movw	r2, #1827	; 0x723
 800a0ca:	4928      	ldr	r1, [pc, #160]	; (800a16c <lwip_netconn_do_write+0x104>)
 800a0cc:	4828      	ldr	r0, [pc, #160]	; (800a170 <lwip_netconn_do_write+0x108>)
 800a0ce:	f00b fd65 	bl	8015b9c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <lwip_netconn_do_write+0x80>
 800a0da:	4b23      	ldr	r3, [pc, #140]	; (800a168 <lwip_netconn_do_write+0x100>)
 800a0dc:	f240 7224 	movw	r2, #1828	; 0x724
 800a0e0:	4924      	ldr	r1, [pc, #144]	; (800a174 <lwip_netconn_do_write+0x10c>)
 800a0e2:	4823      	ldr	r0, [pc, #140]	; (800a170 <lwip_netconn_do_write+0x108>)
 800a0e4:	f00b fd5a 	bl	8015b9c <iprintf>
        msg->conn->current_msg = msg;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fdea 	bl	8009cd0 <lwip_netconn_do_writemore>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d02e      	beq.n	800a160 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d006      	beq.n	800a11a <lwip_netconn_do_write+0xb2>
 800a10c:	4b16      	ldr	r3, [pc, #88]	; (800a168 <lwip_netconn_do_write+0x100>)
 800a10e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a112:	4919      	ldr	r1, [pc, #100]	; (800a178 <lwip_netconn_do_write+0x110>)
 800a114:	4816      	ldr	r0, [pc, #88]	; (800a170 <lwip_netconn_do_write+0x108>)
 800a116:	f00b fd41 	bl	8015b9c <iprintf>
          UNLOCK_TCPIP_CORE();
 800a11a:	4818      	ldr	r0, [pc, #96]	; (800a17c <lwip_netconn_do_write+0x114>)
 800a11c:	f00b faa7 	bl	801566e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	330c      	adds	r3, #12
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f00b f9fe 	bl	801552a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a12e:	4813      	ldr	r0, [pc, #76]	; (800a17c <lwip_netconn_do_write+0x114>)
 800a130:	f00b fa8e 	bl	8015650 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d110      	bne.n	800a160 <lwip_netconn_do_write+0xf8>
 800a13e:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <lwip_netconn_do_write+0x100>)
 800a140:	f240 722c 	movw	r2, #1836	; 0x72c
 800a144:	490c      	ldr	r1, [pc, #48]	; (800a178 <lwip_netconn_do_write+0x110>)
 800a146:	480a      	ldr	r0, [pc, #40]	; (800a170 <lwip_netconn_do_write+0x108>)
 800a148:	f00b fd28 	bl	8015b9c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a14c:	e008      	b.n	800a160 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a14e:	23f5      	movs	r3, #245	; 0xf5
 800a150:	73fb      	strb	r3, [r7, #15]
 800a152:	e001      	b.n	800a158 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a154:	23fa      	movs	r3, #250	; 0xfa
 800a156:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	711a      	strb	r2, [r3, #4]
 800a15e:	e000      	b.n	800a162 <lwip_netconn_do_write+0xfa>
        return;
 800a160:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	08017140 	.word	0x08017140
 800a16c:	080174e4 	.word	0x080174e4
 800a170:	08017184 	.word	0x08017184
 800a174:	0801766c 	.word	0x0801766c
 800a178:	08017500 	.word	0x08017500
 800a17c:	200095b0 	.word	0x200095b0

0800a180 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d069      	beq.n	800a272 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a1a8:	2b10      	cmp	r3, #16
 800a1aa:	d162      	bne.n	800a272 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d002      	beq.n	800a1ba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d05b      	beq.n	800a272 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	2b03      	cmp	r3, #3
 800a1be:	d103      	bne.n	800a1c8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	22f5      	movs	r2, #245	; 0xf5
 800a1c4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a1c6:	e059      	b.n	800a27c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d103      	bne.n	800a1d6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	22fb      	movs	r2, #251	; 0xfb
 800a1d2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a1d4:	e052      	b.n	800a27c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	7a1b      	ldrb	r3, [r3, #8]
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff f99e 	bl	8009528 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <lwip_netconn_do_close+0x84>
 800a1f6:	4b23      	ldr	r3, [pc, #140]	; (800a284 <lwip_netconn_do_close+0x104>)
 800a1f8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a1fc:	4922      	ldr	r1, [pc, #136]	; (800a288 <lwip_netconn_do_close+0x108>)
 800a1fe:	4823      	ldr	r0, [pc, #140]	; (800a28c <lwip_netconn_do_close+0x10c>)
 800a200:	f00b fccc 	bl	8015b9c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2204      	movs	r2, #4
 800a20a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fa02 	bl	8009624 <lwip_netconn_do_close_internal>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d029      	beq.n	800a27a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d006      	beq.n	800a23e <lwip_netconn_do_close+0xbe>
 800a230:	4b14      	ldr	r3, [pc, #80]	; (800a284 <lwip_netconn_do_close+0x104>)
 800a232:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a236:	4916      	ldr	r1, [pc, #88]	; (800a290 <lwip_netconn_do_close+0x110>)
 800a238:	4814      	ldr	r0, [pc, #80]	; (800a28c <lwip_netconn_do_close+0x10c>)
 800a23a:	f00b fcaf 	bl	8015b9c <iprintf>
        UNLOCK_TCPIP_CORE();
 800a23e:	4815      	ldr	r0, [pc, #84]	; (800a294 <lwip_netconn_do_close+0x114>)
 800a240:	f00b fa15 	bl	801566e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f00b f96c 	bl	801552a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a252:	4810      	ldr	r0, [pc, #64]	; (800a294 <lwip_netconn_do_close+0x114>)
 800a254:	f00b f9fc 	bl	8015650 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	785b      	ldrb	r3, [r3, #1]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00b      	beq.n	800a27a <lwip_netconn_do_close+0xfa>
 800a262:	4b08      	ldr	r3, [pc, #32]	; (800a284 <lwip_netconn_do_close+0x104>)
 800a264:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a268:	4909      	ldr	r1, [pc, #36]	; (800a290 <lwip_netconn_do_close+0x110>)
 800a26a:	4808      	ldr	r0, [pc, #32]	; (800a28c <lwip_netconn_do_close+0x10c>)
 800a26c:	f00b fc96 	bl	8015b9c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a270:	e003      	b.n	800a27a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	22f5      	movs	r2, #245	; 0xf5
 800a276:	711a      	strb	r2, [r3, #4]
 800a278:	e000      	b.n	800a27c <lwip_netconn_do_close+0xfc>
      return;
 800a27a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	08017140 	.word	0x08017140
 800a288:	080174e4 	.word	0x080174e4
 800a28c:	08017184 	.word	0x08017184
 800a290:	08017500 	.word	0x08017500
 800a294:	200095b0 	.word	0x200095b0

0800a298 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d013      	beq.n	800a2ce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00b      	beq.n	800a2c6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fdea 	bl	800be8c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	2006      	movs	r0, #6
 800a2ca:	f000 ff3b 	bl	800b144 <memp_free>
  }
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d108      	bne.n	800a2f8 <netbuf_next+0x20>
 800a2e6:	4b11      	ldr	r3, [pc, #68]	; (800a32c <netbuf_next+0x54>)
 800a2e8:	22e0      	movs	r2, #224	; 0xe0
 800a2ea:	4911      	ldr	r1, [pc, #68]	; (800a330 <netbuf_next+0x58>)
 800a2ec:	4811      	ldr	r0, [pc, #68]	; (800a334 <netbuf_next+0x5c>)
 800a2ee:	f00b fc55 	bl	8015b9c <iprintf>
 800a2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f6:	e014      	b.n	800a322 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <netbuf_next+0x30>
    return -1;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e00c      	b.n	800a322 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <netbuf_next+0x48>
    return 1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <netbuf_next+0x4a>
  }
  return 0;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	08017698 	.word	0x08017698
 800a330:	080177f8 	.word	0x080177f8
 800a334:	080176e8 	.word	0x080176e8

0800a338 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a342:	f008 fa05 	bl	8012750 <sys_timeouts_sleeptime>
 800a346:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34e:	d10b      	bne.n	800a368 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a350:	4813      	ldr	r0, [pc, #76]	; (800a3a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a352:	f00b f98c 	bl	801566e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a356:	2200      	movs	r2, #0
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f00b f844 	bl	80153e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a360:	480f      	ldr	r0, [pc, #60]	; (800a3a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a362:	f00b f975 	bl	8015650 <sys_mutex_lock>
    return;
 800a366:	e018      	b.n	800a39a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a36e:	f008 f9b5 	bl	80126dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a372:	e7e6      	b.n	800a342 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a374:	480a      	ldr	r0, [pc, #40]	; (800a3a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a376:	f00b f97a 	bl	801566e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f00b f832 	bl	80153e8 <sys_arch_mbox_fetch>
 800a384:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a386:	4806      	ldr	r0, [pc, #24]	; (800a3a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a388:	f00b f962 	bl	8015650 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d102      	bne.n	800a39a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a394:	f008 f9a2 	bl	80126dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a398:	e7d3      	b.n	800a342 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	200095b0 	.word	0x200095b0

0800a3a4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a3ac:	4810      	ldr	r0, [pc, #64]	; (800a3f0 <tcpip_thread+0x4c>)
 800a3ae:	f00b f94f 	bl	8015650 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a3b2:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <tcpip_thread+0x50>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a3ba:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <tcpip_thread+0x50>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a0e      	ldr	r2, [pc, #56]	; (800a3f8 <tcpip_thread+0x54>)
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	480b      	ldr	r0, [pc, #44]	; (800a3fc <tcpip_thread+0x58>)
 800a3ce:	f7ff ffb3 	bl	800a338 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d106      	bne.n	800a3e6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <tcpip_thread+0x5c>)
 800a3da:	2291      	movs	r2, #145	; 0x91
 800a3dc:	4909      	ldr	r1, [pc, #36]	; (800a404 <tcpip_thread+0x60>)
 800a3de:	480a      	ldr	r0, [pc, #40]	; (800a408 <tcpip_thread+0x64>)
 800a3e0:	f00b fbdc 	bl	8015b9c <iprintf>
      continue;
 800a3e4:	e003      	b.n	800a3ee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 f80f 	bl	800a40c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a3ee:	e7ea      	b.n	800a3c6 <tcpip_thread+0x22>
 800a3f0:	200095b0 	.word	0x200095b0
 800a3f4:	200095a4 	.word	0x200095a4
 800a3f8:	200095a8 	.word	0x200095a8
 800a3fc:	200095ac 	.word	0x200095ac
 800a400:	08017830 	.word	0x08017830
 800a404:	08017860 	.word	0x08017860
 800a408:	08017880 	.word	0x08017880

0800a40c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d026      	beq.n	800a46a <tcpip_thread_handle_msg+0x5e>
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	dc2b      	bgt.n	800a478 <tcpip_thread_handle_msg+0x6c>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <tcpip_thread_handle_msg+0x1e>
 800a424:	2b01      	cmp	r3, #1
 800a426:	d015      	beq.n	800a454 <tcpip_thread_handle_msg+0x48>
 800a428:	e026      	b.n	800a478 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6850      	ldr	r0, [r2, #4]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6892      	ldr	r2, [r2, #8]
 800a436:	4611      	mov	r1, r2
 800a438:	4798      	blx	r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d004      	beq.n	800a44a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4618      	mov	r0, r3
 800a446:	f001 fd21 	bl	800be8c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	2009      	movs	r0, #9
 800a44e:	f000 fe79 	bl	800b144 <memp_free>
      break;
 800a452:	e018      	b.n	800a486 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6892      	ldr	r2, [r2, #8]
 800a45c:	4610      	mov	r0, r2
 800a45e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	2008      	movs	r0, #8
 800a464:	f000 fe6e 	bl	800b144 <memp_free>
      break;
 800a468:	e00d      	b.n	800a486 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6892      	ldr	r2, [r2, #8]
 800a472:	4610      	mov	r0, r2
 800a474:	4798      	blx	r3
      break;
 800a476:	e006      	b.n	800a486 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <tcpip_thread_handle_msg+0x84>)
 800a47a:	22cf      	movs	r2, #207	; 0xcf
 800a47c:	4905      	ldr	r1, [pc, #20]	; (800a494 <tcpip_thread_handle_msg+0x88>)
 800a47e:	4806      	ldr	r0, [pc, #24]	; (800a498 <tcpip_thread_handle_msg+0x8c>)
 800a480:	f00b fb8c 	bl	8015b9c <iprintf>
      break;
 800a484:	bf00      	nop
  }
}
 800a486:	bf00      	nop
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	08017830 	.word	0x08017830
 800a494:	08017860 	.word	0x08017860
 800a498:	08017880 	.word	0x08017880

0800a49c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4a8:	481a      	ldr	r0, [pc, #104]	; (800a514 <tcpip_inpkt+0x78>)
 800a4aa:	f00a fff8 	bl	801549e <sys_mbox_valid>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <tcpip_inpkt+0x24>
 800a4b4:	4b18      	ldr	r3, [pc, #96]	; (800a518 <tcpip_inpkt+0x7c>)
 800a4b6:	22fc      	movs	r2, #252	; 0xfc
 800a4b8:	4918      	ldr	r1, [pc, #96]	; (800a51c <tcpip_inpkt+0x80>)
 800a4ba:	4819      	ldr	r0, [pc, #100]	; (800a520 <tcpip_inpkt+0x84>)
 800a4bc:	f00b fb6e 	bl	8015b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a4c0:	2009      	movs	r0, #9
 800a4c2:	f000 fdc9 	bl	800b058 <memp_malloc>
 800a4c6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	e01a      	b.n	800a50a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a4ec:	6979      	ldr	r1, [r7, #20]
 800a4ee:	4809      	ldr	r0, [pc, #36]	; (800a514 <tcpip_inpkt+0x78>)
 800a4f0:	f00a ff60 	bl	80153b4 <sys_mbox_trypost>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d006      	beq.n	800a508 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a4fa:	6979      	ldr	r1, [r7, #20]
 800a4fc:	2009      	movs	r0, #9
 800a4fe:	f000 fe21 	bl	800b144 <memp_free>
    return ERR_MEM;
 800a502:	f04f 33ff 	mov.w	r3, #4294967295
 800a506:	e000      	b.n	800a50a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a508:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200095ac 	.word	0x200095ac
 800a518:	08017830 	.word	0x08017830
 800a51c:	080178a8 	.word	0x080178a8
 800a520:	08017880 	.word	0x08017880

0800a524 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a534:	f003 0318 	and.w	r3, r3, #24
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a53c:	4a08      	ldr	r2, [pc, #32]	; (800a560 <tcpip_input+0x3c>)
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff ffab 	bl	800a49c <tcpip_inpkt>
 800a546:	4603      	mov	r3, r0
 800a548:	e005      	b.n	800a556 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a54a:	4a06      	ldr	r2, [pc, #24]	; (800a564 <tcpip_input+0x40>)
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff ffa4 	bl	800a49c <tcpip_inpkt>
 800a554:	4603      	mov	r3, r0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	080151a1 	.word	0x080151a1
 800a564:	080140a9 	.word	0x080140a9

0800a568 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a572:	4819      	ldr	r0, [pc, #100]	; (800a5d8 <tcpip_try_callback+0x70>)
 800a574:	f00a ff93 	bl	801549e <sys_mbox_valid>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <tcpip_try_callback+0x24>
 800a57e:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <tcpip_try_callback+0x74>)
 800a580:	f240 125d 	movw	r2, #349	; 0x15d
 800a584:	4916      	ldr	r1, [pc, #88]	; (800a5e0 <tcpip_try_callback+0x78>)
 800a586:	4817      	ldr	r0, [pc, #92]	; (800a5e4 <tcpip_try_callback+0x7c>)
 800a588:	f00b fb08 	bl	8015b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a58c:	2008      	movs	r0, #8
 800a58e:	f000 fd63 	bl	800b058 <memp_malloc>
 800a592:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d102      	bne.n	800a5a0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295
 800a59e:	e017      	b.n	800a5d0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	4808      	ldr	r0, [pc, #32]	; (800a5d8 <tcpip_try_callback+0x70>)
 800a5b6:	f00a fefd 	bl	80153b4 <sys_mbox_trypost>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d006      	beq.n	800a5ce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a5c0:	68f9      	ldr	r1, [r7, #12]
 800a5c2:	2008      	movs	r0, #8
 800a5c4:	f000 fdbe 	bl	800b144 <memp_free>
    return ERR_MEM;
 800a5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5cc:	e000      	b.n	800a5d0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	200095ac 	.word	0x200095ac
 800a5dc:	08017830 	.word	0x08017830
 800a5e0:	080178a8 	.word	0x080178a8
 800a5e4:	08017880 	.word	0x08017880

0800a5e8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a5f4:	4806      	ldr	r0, [pc, #24]	; (800a610 <tcpip_send_msg_wait_sem+0x28>)
 800a5f6:	f00b f82b 	bl	8015650 <sys_mutex_lock>
  fn(apimsg);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68b8      	ldr	r0, [r7, #8]
 800a5fe:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a600:	4803      	ldr	r0, [pc, #12]	; (800a610 <tcpip_send_msg_wait_sem+0x28>)
 800a602:	f00b f834 	bl	801566e <sys_mutex_unlock>
  return ERR_OK;
 800a606:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	200095b0 	.word	0x200095b0

0800a614 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af02      	add	r7, sp, #8
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a61e:	f000 f871 	bl	800a704 <lwip_init>

  tcpip_init_done = initfunc;
 800a622:	4a17      	ldr	r2, [pc, #92]	; (800a680 <tcpip_init+0x6c>)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a628:	4a16      	ldr	r2, [pc, #88]	; (800a684 <tcpip_init+0x70>)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a62e:	2106      	movs	r1, #6
 800a630:	4815      	ldr	r0, [pc, #84]	; (800a688 <tcpip_init+0x74>)
 800a632:	f00a fe8b 	bl	801534c <sys_mbox_new>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a63c:	4b13      	ldr	r3, [pc, #76]	; (800a68c <tcpip_init+0x78>)
 800a63e:	f240 2261 	movw	r2, #609	; 0x261
 800a642:	4913      	ldr	r1, [pc, #76]	; (800a690 <tcpip_init+0x7c>)
 800a644:	4813      	ldr	r0, [pc, #76]	; (800a694 <tcpip_init+0x80>)
 800a646:	f00b faa9 	bl	8015b9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a64a:	4813      	ldr	r0, [pc, #76]	; (800a698 <tcpip_init+0x84>)
 800a64c:	f00a ffe4 	bl	8015618 <sys_mutex_new>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d006      	beq.n	800a664 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <tcpip_init+0x78>)
 800a658:	f240 2265 	movw	r2, #613	; 0x265
 800a65c:	490f      	ldr	r1, [pc, #60]	; (800a69c <tcpip_init+0x88>)
 800a65e:	480d      	ldr	r0, [pc, #52]	; (800a694 <tcpip_init+0x80>)
 800a660:	f00b fa9c 	bl	8015b9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a664:	2300      	movs	r3, #0
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66c:	2200      	movs	r2, #0
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <tcpip_init+0x8c>)
 800a670:	480c      	ldr	r0, [pc, #48]	; (800a6a4 <tcpip_init+0x90>)
 800a672:	f00b f809 	bl	8015688 <sys_thread_new>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	200095a4 	.word	0x200095a4
 800a684:	200095a8 	.word	0x200095a8
 800a688:	200095ac 	.word	0x200095ac
 800a68c:	08017830 	.word	0x08017830
 800a690:	080178b8 	.word	0x080178b8
 800a694:	08017880 	.word	0x08017880
 800a698:	200095b0 	.word	0x200095b0
 800a69c:	080178dc 	.word	0x080178dc
 800a6a0:	0800a3a5 	.word	0x0800a3a5
 800a6a4:	08017900 	.word	0x08017900

0800a6a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a6b2:	88fb      	ldrh	r3, [r7, #6]
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	b21a      	sxth	r2, r3
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	0a1b      	lsrs	r3, r3, #8
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	b21b      	sxth	r3, r3
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	b21b      	sxth	r3, r3
 800a6c4:	b29b      	uxth	r3, r3
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	061a      	lsls	r2, r3, #24
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	0a1b      	lsrs	r3, r3, #8
 800a6ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0e1b      	lsrs	r3, r3, #24
 800a6f6:	4313      	orrs	r3, r2
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a70e:	f00a ff75 	bl	80155fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a712:	f000 f8d5 	bl	800a8c0 <mem_init>
  memp_init();
 800a716:	f000 fc31 	bl	800af7c <memp_init>
  pbuf_init();
  netif_init();
 800a71a:	f000 fd3d 	bl	800b198 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a71e:	f008 f84f 	bl	80127c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a722:	f001 fe4d 	bl	800c3c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a726:	f007 ff91 	bl	801264c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a73e:	4b05      	ldr	r3, [pc, #20]	; (800a754 <ptr_to_mem+0x20>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	4413      	add	r3, r2
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	2000bde0 	.word	0x2000bde0

0800a758 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <mem_to_ptr+0x20>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	b29b      	uxth	r3, r3
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	2000bde0 	.word	0x2000bde0

0800a77c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a77c:	b590      	push	{r4, r7, lr}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a784:	4b45      	ldr	r3, [pc, #276]	; (800a89c <plug_holes+0x120>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d206      	bcs.n	800a79c <plug_holes+0x20>
 800a78e:	4b44      	ldr	r3, [pc, #272]	; (800a8a0 <plug_holes+0x124>)
 800a790:	f240 12df 	movw	r2, #479	; 0x1df
 800a794:	4943      	ldr	r1, [pc, #268]	; (800a8a4 <plug_holes+0x128>)
 800a796:	4844      	ldr	r0, [pc, #272]	; (800a8a8 <plug_holes+0x12c>)
 800a798:	f00b fa00 	bl	8015b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a79c:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <plug_holes+0x130>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d306      	bcc.n	800a7b4 <plug_holes+0x38>
 800a7a6:	4b3e      	ldr	r3, [pc, #248]	; (800a8a0 <plug_holes+0x124>)
 800a7a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a7ac:	4940      	ldr	r1, [pc, #256]	; (800a8b0 <plug_holes+0x134>)
 800a7ae:	483e      	ldr	r0, [pc, #248]	; (800a8a8 <plug_holes+0x12c>)
 800a7b0:	f00b f9f4 	bl	8015b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	791b      	ldrb	r3, [r3, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d006      	beq.n	800a7ca <plug_holes+0x4e>
 800a7bc:	4b38      	ldr	r3, [pc, #224]	; (800a8a0 <plug_holes+0x124>)
 800a7be:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a7c2:	493c      	ldr	r1, [pc, #240]	; (800a8b4 <plug_holes+0x138>)
 800a7c4:	4838      	ldr	r0, [pc, #224]	; (800a8a8 <plug_holes+0x12c>)
 800a7c6:	f00b f9e9 	bl	8015b9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a7d2:	d906      	bls.n	800a7e2 <plug_holes+0x66>
 800a7d4:	4b32      	ldr	r3, [pc, #200]	; (800a8a0 <plug_holes+0x124>)
 800a7d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a7da:	4937      	ldr	r1, [pc, #220]	; (800a8b8 <plug_holes+0x13c>)
 800a7dc:	4832      	ldr	r0, [pc, #200]	; (800a8a8 <plug_holes+0x12c>)
 800a7de:	f00b f9dd 	bl	8015b9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff ffa4 	bl	800a734 <ptr_to_mem>
 800a7ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d024      	beq.n	800a840 <plug_holes+0xc4>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	791b      	ldrb	r3, [r3, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d120      	bne.n	800a840 <plug_holes+0xc4>
 800a7fe:	4b2b      	ldr	r3, [pc, #172]	; (800a8ac <plug_holes+0x130>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	429a      	cmp	r2, r3
 800a806:	d01b      	beq.n	800a840 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a808:	4b2c      	ldr	r3, [pc, #176]	; (800a8bc <plug_holes+0x140>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d102      	bne.n	800a818 <plug_holes+0x9c>
      lfree = mem;
 800a812:	4a2a      	ldr	r2, [pc, #168]	; (800a8bc <plug_holes+0x140>)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	881a      	ldrh	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a828:	d00a      	beq.n	800a840 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff ff80 	bl	800a734 <ptr_to_mem>
 800a834:	4604      	mov	r4, r0
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff ff8e 	bl	800a758 <mem_to_ptr>
 800a83c:	4603      	mov	r3, r0
 800a83e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	885b      	ldrh	r3, [r3, #2]
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff ff75 	bl	800a734 <ptr_to_mem>
 800a84a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d01f      	beq.n	800a894 <plug_holes+0x118>
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	791b      	ldrb	r3, [r3, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d11b      	bne.n	800a894 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a85c:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <plug_holes+0x140>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	429a      	cmp	r2, r3
 800a864:	d102      	bne.n	800a86c <plug_holes+0xf0>
      lfree = pmem;
 800a866:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <plug_holes+0x140>)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	881a      	ldrh	r2, [r3, #0]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a87c:	d00a      	beq.n	800a894 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff ff56 	bl	800a734 <ptr_to_mem>
 800a888:	4604      	mov	r4, r0
 800a88a:	68b8      	ldr	r0, [r7, #8]
 800a88c:	f7ff ff64 	bl	800a758 <mem_to_ptr>
 800a890:	4603      	mov	r3, r0
 800a892:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd90      	pop	{r4, r7, pc}
 800a89c:	2000bde0 	.word	0x2000bde0
 800a8a0:	08017910 	.word	0x08017910
 800a8a4:	08017940 	.word	0x08017940
 800a8a8:	08017958 	.word	0x08017958
 800a8ac:	2000bde4 	.word	0x2000bde4
 800a8b0:	08017980 	.word	0x08017980
 800a8b4:	0801799c 	.word	0x0801799c
 800a8b8:	080179b8 	.word	0x080179b8
 800a8bc:	2000bdec 	.word	0x2000bdec

0800a8c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a8c6:	4b1f      	ldr	r3, [pc, #124]	; (800a944 <mem_init+0x84>)
 800a8c8:	3303      	adds	r3, #3
 800a8ca:	f023 0303 	bic.w	r3, r3, #3
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b1d      	ldr	r3, [pc, #116]	; (800a948 <mem_init+0x88>)
 800a8d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a8d4:	4b1c      	ldr	r3, [pc, #112]	; (800a948 <mem_init+0x88>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a8e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a8ee:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a8f2:	f7ff ff1f 	bl	800a734 <ptr_to_mem>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4a14      	ldr	r2, [pc, #80]	; (800a94c <mem_init+0x8c>)
 800a8fa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a8fc:	4b13      	ldr	r3, [pc, #76]	; (800a94c <mem_init+0x8c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2201      	movs	r2, #1
 800a902:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a904:	4b11      	ldr	r3, [pc, #68]	; (800a94c <mem_init+0x8c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a90c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <mem_init+0x8c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a916:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a918:	4b0b      	ldr	r3, [pc, #44]	; (800a948 <mem_init+0x88>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a0c      	ldr	r2, [pc, #48]	; (800a950 <mem_init+0x90>)
 800a91e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a920:	480c      	ldr	r0, [pc, #48]	; (800a954 <mem_init+0x94>)
 800a922:	f00a fe79 	bl	8015618 <sys_mutex_new>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d006      	beq.n	800a93a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a92c:	4b0a      	ldr	r3, [pc, #40]	; (800a958 <mem_init+0x98>)
 800a92e:	f240 221f 	movw	r2, #543	; 0x21f
 800a932:	490a      	ldr	r1, [pc, #40]	; (800a95c <mem_init+0x9c>)
 800a934:	480a      	ldr	r0, [pc, #40]	; (800a960 <mem_init+0xa0>)
 800a936:	f00b f931 	bl	8015b9c <iprintf>
  }
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	200095cc 	.word	0x200095cc
 800a948:	2000bde0 	.word	0x2000bde0
 800a94c:	2000bde4 	.word	0x2000bde4
 800a950:	2000bdec 	.word	0x2000bdec
 800a954:	2000bde8 	.word	0x2000bde8
 800a958:	08017910 	.word	0x08017910
 800a95c:	080179e4 	.word	0x080179e4
 800a960:	08017958 	.word	0x08017958

0800a964 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fef3 	bl	800a758 <mem_to_ptr>
 800a972:	4603      	mov	r3, r0
 800a974:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff feda 	bl	800a734 <ptr_to_mem>
 800a980:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	885b      	ldrh	r3, [r3, #2]
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fed4 	bl	800a734 <ptr_to_mem>
 800a98c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a996:	d818      	bhi.n	800a9ca <mem_link_valid+0x66>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	885b      	ldrh	r3, [r3, #2]
 800a99c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a9a0:	d813      	bhi.n	800a9ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a9a6:	8afa      	ldrh	r2, [r7, #22]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d004      	beq.n	800a9b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	8afa      	ldrh	r2, [r7, #22]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d109      	bne.n	800a9ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a9b6:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <mem_link_valid+0x74>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d006      	beq.n	800a9ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	885b      	ldrh	r3, [r3, #2]
 800a9c4:	8afa      	ldrh	r2, [r7, #22]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d001      	beq.n	800a9ce <mem_link_valid+0x6a>
    return 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e000      	b.n	800a9d0 <mem_link_valid+0x6c>
  }
  return 1;
 800a9ce:	2301      	movs	r3, #1
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	2000bde4 	.word	0x2000bde4

0800a9dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d070      	beq.n	800aacc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00d      	beq.n	800aa10 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a9f4:	4b37      	ldr	r3, [pc, #220]	; (800aad4 <mem_free+0xf8>)
 800a9f6:	f240 2273 	movw	r2, #627	; 0x273
 800a9fa:	4937      	ldr	r1, [pc, #220]	; (800aad8 <mem_free+0xfc>)
 800a9fc:	4837      	ldr	r0, [pc, #220]	; (800aadc <mem_free+0x100>)
 800a9fe:	f00b f8cd 	bl	8015b9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa02:	f00a fe67 	bl	80156d4 <sys_arch_protect>
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f00a fe71 	bl	80156f0 <sys_arch_unprotect>
    return;
 800aa0e:	e05e      	b.n	800aace <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3b08      	subs	r3, #8
 800aa14:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aa16:	4b32      	ldr	r3, [pc, #200]	; (800aae0 <mem_free+0x104>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	69fa      	ldr	r2, [r7, #28]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d306      	bcc.n	800aa2e <mem_free+0x52>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f103 020c 	add.w	r2, r3, #12
 800aa26:	4b2f      	ldr	r3, [pc, #188]	; (800aae4 <mem_free+0x108>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d90d      	bls.n	800aa4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aa2e:	4b29      	ldr	r3, [pc, #164]	; (800aad4 <mem_free+0xf8>)
 800aa30:	f240 227f 	movw	r2, #639	; 0x27f
 800aa34:	492c      	ldr	r1, [pc, #176]	; (800aae8 <mem_free+0x10c>)
 800aa36:	4829      	ldr	r0, [pc, #164]	; (800aadc <mem_free+0x100>)
 800aa38:	f00b f8b0 	bl	8015b9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa3c:	f00a fe4a 	bl	80156d4 <sys_arch_protect>
 800aa40:	6138      	str	r0, [r7, #16]
 800aa42:	6938      	ldr	r0, [r7, #16]
 800aa44:	f00a fe54 	bl	80156f0 <sys_arch_unprotect>
    return;
 800aa48:	e041      	b.n	800aace <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa4a:	4828      	ldr	r0, [pc, #160]	; (800aaec <mem_free+0x110>)
 800aa4c:	f00a fe00 	bl	8015650 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	791b      	ldrb	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d110      	bne.n	800aa7a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aa58:	4b1e      	ldr	r3, [pc, #120]	; (800aad4 <mem_free+0xf8>)
 800aa5a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800aa5e:	4924      	ldr	r1, [pc, #144]	; (800aaf0 <mem_free+0x114>)
 800aa60:	481e      	ldr	r0, [pc, #120]	; (800aadc <mem_free+0x100>)
 800aa62:	f00b f89b 	bl	8015b9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aa66:	4821      	ldr	r0, [pc, #132]	; (800aaec <mem_free+0x110>)
 800aa68:	f00a fe01 	bl	801566e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa6c:	f00a fe32 	bl	80156d4 <sys_arch_protect>
 800aa70:	6178      	str	r0, [r7, #20]
 800aa72:	6978      	ldr	r0, [r7, #20]
 800aa74:	f00a fe3c 	bl	80156f0 <sys_arch_unprotect>
    return;
 800aa78:	e029      	b.n	800aace <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800aa7a:	69f8      	ldr	r0, [r7, #28]
 800aa7c:	f7ff ff72 	bl	800a964 <mem_link_valid>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d110      	bne.n	800aaa8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aa86:	4b13      	ldr	r3, [pc, #76]	; (800aad4 <mem_free+0xf8>)
 800aa88:	f240 2295 	movw	r2, #661	; 0x295
 800aa8c:	4919      	ldr	r1, [pc, #100]	; (800aaf4 <mem_free+0x118>)
 800aa8e:	4813      	ldr	r0, [pc, #76]	; (800aadc <mem_free+0x100>)
 800aa90:	f00b f884 	bl	8015b9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aa94:	4815      	ldr	r0, [pc, #84]	; (800aaec <mem_free+0x110>)
 800aa96:	f00a fdea 	bl	801566e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa9a:	f00a fe1b 	bl	80156d4 <sys_arch_protect>
 800aa9e:	61b8      	str	r0, [r7, #24]
 800aaa0:	69b8      	ldr	r0, [r7, #24]
 800aaa2:	f00a fe25 	bl	80156f0 <sys_arch_unprotect>
    return;
 800aaa6:	e012      	b.n	800aace <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aaae:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <mem_free+0x11c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d202      	bcs.n	800aabe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aab8:	4a0f      	ldr	r2, [pc, #60]	; (800aaf8 <mem_free+0x11c>)
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aabe:	69f8      	ldr	r0, [r7, #28]
 800aac0:	f7ff fe5c 	bl	800a77c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aac4:	4809      	ldr	r0, [pc, #36]	; (800aaec <mem_free+0x110>)
 800aac6:	f00a fdd2 	bl	801566e <sys_mutex_unlock>
 800aaca:	e000      	b.n	800aace <mem_free+0xf2>
    return;
 800aacc:	bf00      	nop
}
 800aace:	3720      	adds	r7, #32
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	08017910 	.word	0x08017910
 800aad8:	08017a00 	.word	0x08017a00
 800aadc:	08017958 	.word	0x08017958
 800aae0:	2000bde0 	.word	0x2000bde0
 800aae4:	2000bde4 	.word	0x2000bde4
 800aae8:	08017a24 	.word	0x08017a24
 800aaec:	2000bde8 	.word	0x2000bde8
 800aaf0:	08017a40 	.word	0x08017a40
 800aaf4:	08017a68 	.word	0x08017a68
 800aaf8:	2000bdec 	.word	0x2000bdec

0800aafc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ab08:	887b      	ldrh	r3, [r7, #2]
 800ab0a:	3303      	adds	r3, #3
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f023 0303 	bic.w	r3, r3, #3
 800ab12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ab14:	8bfb      	ldrh	r3, [r7, #30]
 800ab16:	2b0b      	cmp	r3, #11
 800ab18:	d801      	bhi.n	800ab1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ab1e:	8bfb      	ldrh	r3, [r7, #30]
 800ab20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ab24:	d803      	bhi.n	800ab2e <mem_trim+0x32>
 800ab26:	8bfa      	ldrh	r2, [r7, #30]
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d201      	bcs.n	800ab32 <mem_trim+0x36>
    return NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e0d8      	b.n	800ace4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ab32:	4b6e      	ldr	r3, [pc, #440]	; (800acec <mem_trim+0x1f0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d304      	bcc.n	800ab46 <mem_trim+0x4a>
 800ab3c:	4b6c      	ldr	r3, [pc, #432]	; (800acf0 <mem_trim+0x1f4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d306      	bcc.n	800ab54 <mem_trim+0x58>
 800ab46:	4b6b      	ldr	r3, [pc, #428]	; (800acf4 <mem_trim+0x1f8>)
 800ab48:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ab4c:	496a      	ldr	r1, [pc, #424]	; (800acf8 <mem_trim+0x1fc>)
 800ab4e:	486b      	ldr	r0, [pc, #428]	; (800acfc <mem_trim+0x200>)
 800ab50:	f00b f824 	bl	8015b9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ab54:	4b65      	ldr	r3, [pc, #404]	; (800acec <mem_trim+0x1f0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d304      	bcc.n	800ab68 <mem_trim+0x6c>
 800ab5e:	4b64      	ldr	r3, [pc, #400]	; (800acf0 <mem_trim+0x1f4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d307      	bcc.n	800ab78 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab68:	f00a fdb4 	bl	80156d4 <sys_arch_protect>
 800ab6c:	60b8      	str	r0, [r7, #8]
 800ab6e:	68b8      	ldr	r0, [r7, #8]
 800ab70:	f00a fdbe 	bl	80156f0 <sys_arch_unprotect>
    return rmem;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	e0b5      	b.n	800ace4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3b08      	subs	r3, #8
 800ab7c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ab7e:	69b8      	ldr	r0, [r7, #24]
 800ab80:	f7ff fdea 	bl	800a758 <mem_to_ptr>
 800ab84:	4603      	mov	r3, r0
 800ab86:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	881a      	ldrh	r2, [r3, #0]
 800ab8c:	8afb      	ldrh	r3, [r7, #22]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	3b08      	subs	r3, #8
 800ab94:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ab96:	8bfa      	ldrh	r2, [r7, #30]
 800ab98:	8abb      	ldrh	r3, [r7, #20]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d906      	bls.n	800abac <mem_trim+0xb0>
 800ab9e:	4b55      	ldr	r3, [pc, #340]	; (800acf4 <mem_trim+0x1f8>)
 800aba0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aba4:	4956      	ldr	r1, [pc, #344]	; (800ad00 <mem_trim+0x204>)
 800aba6:	4855      	ldr	r0, [pc, #340]	; (800acfc <mem_trim+0x200>)
 800aba8:	f00a fff8 	bl	8015b9c <iprintf>
  if (newsize > size) {
 800abac:	8bfa      	ldrh	r2, [r7, #30]
 800abae:	8abb      	ldrh	r3, [r7, #20]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d901      	bls.n	800abb8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	e095      	b.n	800ace4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800abb8:	8bfa      	ldrh	r2, [r7, #30]
 800abba:	8abb      	ldrh	r3, [r7, #20]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d101      	bne.n	800abc4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	e08f      	b.n	800ace4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800abc4:	484f      	ldr	r0, [pc, #316]	; (800ad04 <mem_trim+0x208>)
 800abc6:	f00a fd43 	bl	8015650 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fdb0 	bl	800a734 <ptr_to_mem>
 800abd4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d13f      	bne.n	800ac5e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800abe6:	d106      	bne.n	800abf6 <mem_trim+0xfa>
 800abe8:	4b42      	ldr	r3, [pc, #264]	; (800acf4 <mem_trim+0x1f8>)
 800abea:	f240 22f5 	movw	r2, #757	; 0x2f5
 800abee:	4946      	ldr	r1, [pc, #280]	; (800ad08 <mem_trim+0x20c>)
 800abf0:	4842      	ldr	r0, [pc, #264]	; (800acfc <mem_trim+0x200>)
 800abf2:	f00a ffd3 	bl	8015b9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800abfc:	8afa      	ldrh	r2, [r7, #22]
 800abfe:	8bfb      	ldrh	r3, [r7, #30]
 800ac00:	4413      	add	r3, r2
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	3308      	adds	r3, #8
 800ac06:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ac08:	4b40      	ldr	r3, [pc, #256]	; (800ad0c <mem_trim+0x210>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d106      	bne.n	800ac20 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ac12:	89fb      	ldrh	r3, [r7, #14]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fd8d 	bl	800a734 <ptr_to_mem>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4a3b      	ldr	r2, [pc, #236]	; (800ad0c <mem_trim+0x210>)
 800ac1e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff fd86 	bl	800a734 <ptr_to_mem>
 800ac28:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	89ba      	ldrh	r2, [r7, #12]
 800ac34:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	8afa      	ldrh	r2, [r7, #22]
 800ac3a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	89fa      	ldrh	r2, [r7, #14]
 800ac40:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac4a:	d047      	beq.n	800acdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff fd6f 	bl	800a734 <ptr_to_mem>
 800ac56:	4602      	mov	r2, r0
 800ac58:	89fb      	ldrh	r3, [r7, #14]
 800ac5a:	8053      	strh	r3, [r2, #2]
 800ac5c:	e03e      	b.n	800acdc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ac5e:	8bfb      	ldrh	r3, [r7, #30]
 800ac60:	f103 0214 	add.w	r2, r3, #20
 800ac64:	8abb      	ldrh	r3, [r7, #20]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d838      	bhi.n	800acdc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ac6a:	8afa      	ldrh	r2, [r7, #22]
 800ac6c:	8bfb      	ldrh	r3, [r7, #30]
 800ac6e:	4413      	add	r3, r2
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	3308      	adds	r3, #8
 800ac74:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac7e:	d106      	bne.n	800ac8e <mem_trim+0x192>
 800ac80:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <mem_trim+0x1f8>)
 800ac82:	f240 3216 	movw	r2, #790	; 0x316
 800ac86:	4920      	ldr	r1, [pc, #128]	; (800ad08 <mem_trim+0x20c>)
 800ac88:	481c      	ldr	r0, [pc, #112]	; (800acfc <mem_trim+0x200>)
 800ac8a:	f00a ff87 	bl	8015b9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7ff fd4f 	bl	800a734 <ptr_to_mem>
 800ac96:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ac98:	4b1c      	ldr	r3, [pc, #112]	; (800ad0c <mem_trim+0x210>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d202      	bcs.n	800aca8 <mem_trim+0x1ac>
      lfree = mem2;
 800aca2:	4a1a      	ldr	r2, [pc, #104]	; (800ad0c <mem_trim+0x210>)
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2200      	movs	r2, #0
 800acac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	881a      	ldrh	r2, [r3, #0]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	8afa      	ldrh	r2, [r7, #22]
 800acba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	89fa      	ldrh	r2, [r7, #14]
 800acc0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800acca:	d007      	beq.n	800acdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fd2f 	bl	800a734 <ptr_to_mem>
 800acd6:	4602      	mov	r2, r0
 800acd8:	89fb      	ldrh	r3, [r7, #14]
 800acda:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800acdc:	4809      	ldr	r0, [pc, #36]	; (800ad04 <mem_trim+0x208>)
 800acde:	f00a fcc6 	bl	801566e <sys_mutex_unlock>
  return rmem;
 800ace2:	687b      	ldr	r3, [r7, #4]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	2000bde0 	.word	0x2000bde0
 800acf0:	2000bde4 	.word	0x2000bde4
 800acf4:	08017910 	.word	0x08017910
 800acf8:	08017a9c 	.word	0x08017a9c
 800acfc:	08017958 	.word	0x08017958
 800ad00:	08017ab4 	.word	0x08017ab4
 800ad04:	2000bde8 	.word	0x2000bde8
 800ad08:	08017ad4 	.word	0x08017ad4
 800ad0c:	2000bdec 	.word	0x2000bdec

0800ad10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ad1a:	88fb      	ldrh	r3, [r7, #6]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <mem_malloc+0x14>
    return NULL;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e0e2      	b.n	800aeea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	3303      	adds	r3, #3
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ad30:	8bbb      	ldrh	r3, [r7, #28]
 800ad32:	2b0b      	cmp	r3, #11
 800ad34:	d801      	bhi.n	800ad3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ad36:	230c      	movs	r3, #12
 800ad38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ad3a:	8bbb      	ldrh	r3, [r7, #28]
 800ad3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad40:	d803      	bhi.n	800ad4a <mem_malloc+0x3a>
 800ad42:	8bba      	ldrh	r2, [r7, #28]
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d201      	bcs.n	800ad4e <mem_malloc+0x3e>
    return NULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e0cd      	b.n	800aeea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ad4e:	4869      	ldr	r0, [pc, #420]	; (800aef4 <mem_malloc+0x1e4>)
 800ad50:	f00a fc7e 	bl	8015650 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ad54:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <mem_malloc+0x1e8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fcfd 	bl	800a758 <mem_to_ptr>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	83fb      	strh	r3, [r7, #30]
 800ad62:	e0b7      	b.n	800aed4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ad64:	8bfb      	ldrh	r3, [r7, #30]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fce4 	bl	800a734 <ptr_to_mem>
 800ad6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	791b      	ldrb	r3, [r3, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 80a7 	bne.w	800aec6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	8bfb      	ldrh	r3, [r7, #30]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	f1a3 0208 	sub.w	r2, r3, #8
 800ad86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	f0c0 809c 	bcc.w	800aec6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	8bfb      	ldrh	r3, [r7, #30]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	f1a3 0208 	sub.w	r2, r3, #8
 800ad9c:	8bbb      	ldrh	r3, [r7, #28]
 800ad9e:	3314      	adds	r3, #20
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d333      	bcc.n	800ae0c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ada4:	8bfa      	ldrh	r2, [r7, #30]
 800ada6:	8bbb      	ldrh	r3, [r7, #28]
 800ada8:	4413      	add	r3, r2
 800adaa:	b29b      	uxth	r3, r3
 800adac:	3308      	adds	r3, #8
 800adae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800adb0:	8a7b      	ldrh	r3, [r7, #18]
 800adb2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800adb6:	d106      	bne.n	800adc6 <mem_malloc+0xb6>
 800adb8:	4b50      	ldr	r3, [pc, #320]	; (800aefc <mem_malloc+0x1ec>)
 800adba:	f240 3287 	movw	r2, #903	; 0x387
 800adbe:	4950      	ldr	r1, [pc, #320]	; (800af00 <mem_malloc+0x1f0>)
 800adc0:	4850      	ldr	r0, [pc, #320]	; (800af04 <mem_malloc+0x1f4>)
 800adc2:	f00a feeb 	bl	8015b9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800adc6:	8a7b      	ldrh	r3, [r7, #18]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fcb3 	bl	800a734 <ptr_to_mem>
 800adce:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	881a      	ldrh	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8bfa      	ldrh	r2, [r7, #30]
 800ade2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	8a7a      	ldrh	r2, [r7, #18]
 800ade8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2201      	movs	r2, #1
 800adee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800adf8:	d00b      	beq.n	800ae12 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fc98 	bl	800a734 <ptr_to_mem>
 800ae04:	4602      	mov	r2, r0
 800ae06:	8a7b      	ldrh	r3, [r7, #18]
 800ae08:	8053      	strh	r3, [r2, #2]
 800ae0a:	e002      	b.n	800ae12 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ae12:	4b39      	ldr	r3, [pc, #228]	; (800aef8 <mem_malloc+0x1e8>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d127      	bne.n	800ae6c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ae1c:	4b36      	ldr	r3, [pc, #216]	; (800aef8 <mem_malloc+0x1e8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae22:	e005      	b.n	800ae30 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fc83 	bl	800a734 <ptr_to_mem>
 800ae2e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	791b      	ldrb	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <mem_malloc+0x132>
 800ae38:	4b33      	ldr	r3, [pc, #204]	; (800af08 <mem_malloc+0x1f8>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d1f0      	bne.n	800ae24 <mem_malloc+0x114>
          }
          lfree = cur;
 800ae42:	4a2d      	ldr	r2, [pc, #180]	; (800aef8 <mem_malloc+0x1e8>)
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ae48:	4b2b      	ldr	r3, [pc, #172]	; (800aef8 <mem_malloc+0x1e8>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	4b2e      	ldr	r3, [pc, #184]	; (800af08 <mem_malloc+0x1f8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d00b      	beq.n	800ae6c <mem_malloc+0x15c>
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <mem_malloc+0x1e8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	791b      	ldrb	r3, [r3, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d006      	beq.n	800ae6c <mem_malloc+0x15c>
 800ae5e:	4b27      	ldr	r3, [pc, #156]	; (800aefc <mem_malloc+0x1ec>)
 800ae60:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ae64:	4929      	ldr	r1, [pc, #164]	; (800af0c <mem_malloc+0x1fc>)
 800ae66:	4827      	ldr	r0, [pc, #156]	; (800af04 <mem_malloc+0x1f4>)
 800ae68:	f00a fe98 	bl	8015b9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ae6c:	4821      	ldr	r0, [pc, #132]	; (800aef4 <mem_malloc+0x1e4>)
 800ae6e:	f00a fbfe 	bl	801566e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ae72:	8bba      	ldrh	r2, [r7, #28]
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4413      	add	r3, r2
 800ae78:	3308      	adds	r3, #8
 800ae7a:	4a23      	ldr	r2, [pc, #140]	; (800af08 <mem_malloc+0x1f8>)
 800ae7c:	6812      	ldr	r2, [r2, #0]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d906      	bls.n	800ae90 <mem_malloc+0x180>
 800ae82:	4b1e      	ldr	r3, [pc, #120]	; (800aefc <mem_malloc+0x1ec>)
 800ae84:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ae88:	4921      	ldr	r1, [pc, #132]	; (800af10 <mem_malloc+0x200>)
 800ae8a:	481e      	ldr	r0, [pc, #120]	; (800af04 <mem_malloc+0x1f4>)
 800ae8c:	f00a fe86 	bl	8015b9c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d006      	beq.n	800aea8 <mem_malloc+0x198>
 800ae9a:	4b18      	ldr	r3, [pc, #96]	; (800aefc <mem_malloc+0x1ec>)
 800ae9c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aea0:	491c      	ldr	r1, [pc, #112]	; (800af14 <mem_malloc+0x204>)
 800aea2:	4818      	ldr	r0, [pc, #96]	; (800af04 <mem_malloc+0x1f4>)
 800aea4:	f00a fe7a 	bl	8015b9c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f003 0303 	and.w	r3, r3, #3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <mem_malloc+0x1b0>
 800aeb2:	4b12      	ldr	r3, [pc, #72]	; (800aefc <mem_malloc+0x1ec>)
 800aeb4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aeb8:	4917      	ldr	r1, [pc, #92]	; (800af18 <mem_malloc+0x208>)
 800aeba:	4812      	ldr	r0, [pc, #72]	; (800af04 <mem_malloc+0x1f4>)
 800aebc:	f00a fe6e 	bl	8015b9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	3308      	adds	r3, #8
 800aec4:	e011      	b.n	800aeea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800aec6:	8bfb      	ldrh	r3, [r7, #30]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff fc33 	bl	800a734 <ptr_to_mem>
 800aece:	4603      	mov	r3, r0
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aed4:	8bfa      	ldrh	r2, [r7, #30]
 800aed6:	8bbb      	ldrh	r3, [r7, #28]
 800aed8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800aedc:	429a      	cmp	r2, r3
 800aede:	f4ff af41 	bcc.w	800ad64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aee2:	4804      	ldr	r0, [pc, #16]	; (800aef4 <mem_malloc+0x1e4>)
 800aee4:	f00a fbc3 	bl	801566e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	2000bde8 	.word	0x2000bde8
 800aef8:	2000bdec 	.word	0x2000bdec
 800aefc:	08017910 	.word	0x08017910
 800af00:	08017ad4 	.word	0x08017ad4
 800af04:	08017958 	.word	0x08017958
 800af08:	2000bde4 	.word	0x2000bde4
 800af0c:	08017ae8 	.word	0x08017ae8
 800af10:	08017b04 	.word	0x08017b04
 800af14:	08017b34 	.word	0x08017b34
 800af18:	08017b64 	.word	0x08017b64

0800af1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	3303      	adds	r3, #3
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e011      	b.n	800af62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	461a      	mov	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	4413      	add	r3, r2
 800af5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3301      	adds	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	885b      	ldrh	r3, [r3, #2]
 800af66:	461a      	mov	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4293      	cmp	r3, r2
 800af6c:	dbe7      	blt.n	800af3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800af82:	2300      	movs	r3, #0
 800af84:	80fb      	strh	r3, [r7, #6]
 800af86:	e009      	b.n	800af9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800af88:	88fb      	ldrh	r3, [r7, #6]
 800af8a:	4a08      	ldr	r2, [pc, #32]	; (800afac <memp_init+0x30>)
 800af8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff ffc3 	bl	800af1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	3301      	adds	r3, #1
 800af9a:	80fb      	strh	r3, [r7, #6]
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	2b0c      	cmp	r3, #12
 800afa0:	d9f2      	bls.n	800af88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	0801a37c 	.word	0x0801a37c

0800afb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800afb8:	f00a fb8c 	bl	80156d4 <sys_arch_protect>
 800afbc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d015      	beq.n	800aff8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d006      	beq.n	800afee <do_memp_malloc_pool+0x3e>
 800afe0:	4b09      	ldr	r3, [pc, #36]	; (800b008 <do_memp_malloc_pool+0x58>)
 800afe2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800afe6:	4909      	ldr	r1, [pc, #36]	; (800b00c <do_memp_malloc_pool+0x5c>)
 800afe8:	4809      	ldr	r0, [pc, #36]	; (800b010 <do_memp_malloc_pool+0x60>)
 800afea:	f00a fdd7 	bl	8015b9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f00a fb7e 	bl	80156f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	e003      	b.n	800b000 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f00a fb79 	bl	80156f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	08017b88 	.word	0x08017b88
 800b00c:	08017bb8 	.word	0x08017bb8
 800b010:	08017bdc 	.word	0x08017bdc

0800b014 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <memp_malloc_pool+0x1c>
 800b022:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <memp_malloc_pool+0x38>)
 800b024:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b028:	4909      	ldr	r1, [pc, #36]	; (800b050 <memp_malloc_pool+0x3c>)
 800b02a:	480a      	ldr	r0, [pc, #40]	; (800b054 <memp_malloc_pool+0x40>)
 800b02c:	f00a fdb6 	bl	8015b9c <iprintf>
  if (desc == NULL) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <memp_malloc_pool+0x26>
    return NULL;
 800b036:	2300      	movs	r3, #0
 800b038:	e003      	b.n	800b042 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff ffb8 	bl	800afb0 <do_memp_malloc_pool>
 800b040:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b042:	4618      	mov	r0, r3
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	08017b88 	.word	0x08017b88
 800b050:	08017c04 	.word	0x08017c04
 800b054:	08017bdc 	.word	0x08017bdc

0800b058 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	2b0c      	cmp	r3, #12
 800b066:	d908      	bls.n	800b07a <memp_malloc+0x22>
 800b068:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <memp_malloc+0x3c>)
 800b06a:	f240 1257 	movw	r2, #343	; 0x157
 800b06e:	490a      	ldr	r1, [pc, #40]	; (800b098 <memp_malloc+0x40>)
 800b070:	480a      	ldr	r0, [pc, #40]	; (800b09c <memp_malloc+0x44>)
 800b072:	f00a fd93 	bl	8015b9c <iprintf>
 800b076:	2300      	movs	r3, #0
 800b078:	e008      	b.n	800b08c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b07a:	79fb      	ldrb	r3, [r7, #7]
 800b07c:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <memp_malloc+0x48>)
 800b07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff ff94 	bl	800afb0 <do_memp_malloc_pool>
 800b088:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08017b88 	.word	0x08017b88
 800b098:	08017c18 	.word	0x08017c18
 800b09c:	08017bdc 	.word	0x08017bdc
 800b0a0:	0801a37c 	.word	0x0801a37c

0800b0a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	f003 0303 	and.w	r3, r3, #3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d006      	beq.n	800b0c6 <do_memp_free_pool+0x22>
 800b0b8:	4b0d      	ldr	r3, [pc, #52]	; (800b0f0 <do_memp_free_pool+0x4c>)
 800b0ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b0be:	490d      	ldr	r1, [pc, #52]	; (800b0f4 <do_memp_free_pool+0x50>)
 800b0c0:	480d      	ldr	r0, [pc, #52]	; (800b0f8 <do_memp_free_pool+0x54>)
 800b0c2:	f00a fd6b 	bl	8015b9c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b0ca:	f00a fb03 	bl	80156d4 <sys_arch_protect>
 800b0ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b0e2:	68b8      	ldr	r0, [r7, #8]
 800b0e4:	f00a fb04 	bl	80156f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b0e8:	bf00      	nop
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	08017b88 	.word	0x08017b88
 800b0f4:	08017c38 	.word	0x08017c38
 800b0f8:	08017bdc 	.word	0x08017bdc

0800b0fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d106      	bne.n	800b11a <memp_free_pool+0x1e>
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <memp_free_pool+0x3c>)
 800b10e:	f240 1295 	movw	r2, #405	; 0x195
 800b112:	490a      	ldr	r1, [pc, #40]	; (800b13c <memp_free_pool+0x40>)
 800b114:	480a      	ldr	r0, [pc, #40]	; (800b140 <memp_free_pool+0x44>)
 800b116:	f00a fd41 	bl	8015b9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d007      	beq.n	800b130 <memp_free_pool+0x34>
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff ffbb 	bl	800b0a4 <do_memp_free_pool>
 800b12e:	e000      	b.n	800b132 <memp_free_pool+0x36>
    return;
 800b130:	bf00      	nop
}
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	08017b88 	.word	0x08017b88
 800b13c:	08017c04 	.word	0x08017c04
 800b140:	08017bdc 	.word	0x08017bdc

0800b144 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4603      	mov	r3, r0
 800b14c:	6039      	str	r1, [r7, #0]
 800b14e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b150:	79fb      	ldrb	r3, [r7, #7]
 800b152:	2b0c      	cmp	r3, #12
 800b154:	d907      	bls.n	800b166 <memp_free+0x22>
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <memp_free+0x44>)
 800b158:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b15c:	490b      	ldr	r1, [pc, #44]	; (800b18c <memp_free+0x48>)
 800b15e:	480c      	ldr	r0, [pc, #48]	; (800b190 <memp_free+0x4c>)
 800b160:	f00a fd1c 	bl	8015b9c <iprintf>
 800b164:	e00c      	b.n	800b180 <memp_free+0x3c>

  if (mem == NULL) {
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d008      	beq.n	800b17e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <memp_free+0x50>)
 800b170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff ff94 	bl	800b0a4 <do_memp_free_pool>
 800b17c:	e000      	b.n	800b180 <memp_free+0x3c>
    return;
 800b17e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	08017b88 	.word	0x08017b88
 800b18c:	08017c58 	.word	0x08017c58
 800b190:	08017bdc 	.word	0x08017bdc
 800b194:	0801a37c 	.word	0x0801a37c

0800b198 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b19c:	bf00      	nop
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d108      	bne.n	800b1ce <netif_add+0x26>
 800b1bc:	4b57      	ldr	r3, [pc, #348]	; (800b31c <netif_add+0x174>)
 800b1be:	f240 1227 	movw	r2, #295	; 0x127
 800b1c2:	4957      	ldr	r1, [pc, #348]	; (800b320 <netif_add+0x178>)
 800b1c4:	4857      	ldr	r0, [pc, #348]	; (800b324 <netif_add+0x17c>)
 800b1c6:	f00a fce9 	bl	8015b9c <iprintf>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e0a2      	b.n	800b314 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d108      	bne.n	800b1e6 <netif_add+0x3e>
 800b1d4:	4b51      	ldr	r3, [pc, #324]	; (800b31c <netif_add+0x174>)
 800b1d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b1da:	4953      	ldr	r1, [pc, #332]	; (800b328 <netif_add+0x180>)
 800b1dc:	4851      	ldr	r0, [pc, #324]	; (800b324 <netif_add+0x17c>)
 800b1de:	f00a fcdd 	bl	8015b9c <iprintf>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e096      	b.n	800b314 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b1ec:	4b4f      	ldr	r3, [pc, #316]	; (800b32c <netif_add+0x184>)
 800b1ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b1f6:	4b4d      	ldr	r3, [pc, #308]	; (800b32c <netif_add+0x184>)
 800b1f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b200:	4b4a      	ldr	r3, [pc, #296]	; (800b32c <netif_add+0x184>)
 800b202:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4a45      	ldr	r2, [pc, #276]	; (800b330 <netif_add+0x188>)
 800b21a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6a3a      	ldr	r2, [r7, #32]
 800b234:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b236:	4b3f      	ldr	r3, [pc, #252]	; (800b334 <netif_add+0x18c>)
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b244:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	68b9      	ldr	r1, [r7, #8]
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 f913 	bl	800b478 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	4798      	blx	r3
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <netif_add+0xba>
    return NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	e058      	b.n	800b314 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b268:	2bff      	cmp	r3, #255	; 0xff
 800b26a:	d103      	bne.n	800b274 <netif_add+0xcc>
        netif->num = 0;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b278:	4b2f      	ldr	r3, [pc, #188]	; (800b338 <netif_add+0x190>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e02b      	b.n	800b2d8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	429a      	cmp	r2, r3
 800b286:	d106      	bne.n	800b296 <netif_add+0xee>
 800b288:	4b24      	ldr	r3, [pc, #144]	; (800b31c <netif_add+0x174>)
 800b28a:	f240 128b 	movw	r2, #395	; 0x18b
 800b28e:	492b      	ldr	r1, [pc, #172]	; (800b33c <netif_add+0x194>)
 800b290:	4824      	ldr	r0, [pc, #144]	; (800b324 <netif_add+0x17c>)
 800b292:	f00a fc83 	bl	8015b9c <iprintf>
        num_netifs++;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3301      	adds	r3, #1
 800b29a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	2bff      	cmp	r3, #255	; 0xff
 800b2a0:	dd06      	ble.n	800b2b0 <netif_add+0x108>
 800b2a2:	4b1e      	ldr	r3, [pc, #120]	; (800b31c <netif_add+0x174>)
 800b2a4:	f240 128d 	movw	r2, #397	; 0x18d
 800b2a8:	4925      	ldr	r1, [pc, #148]	; (800b340 <netif_add+0x198>)
 800b2aa:	481e      	ldr	r0, [pc, #120]	; (800b324 <netif_add+0x17c>)
 800b2ac:	f00a fc76 	bl	8015b9c <iprintf>
        if (netif2->num == netif->num) {
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d108      	bne.n	800b2d2 <netif_add+0x12a>
          netif->num++;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b2d0:	e005      	b.n	800b2de <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1d0      	bne.n	800b280 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1be      	bne.n	800b262 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2ea:	2bfe      	cmp	r3, #254	; 0xfe
 800b2ec:	d103      	bne.n	800b2f6 <netif_add+0x14e>
    netif_num = 0;
 800b2ee:	4b11      	ldr	r3, [pc, #68]	; (800b334 <netif_add+0x18c>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e006      	b.n	800b304 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <netif_add+0x18c>)
 800b302:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <netif_add+0x190>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b30c:	4a0a      	ldr	r2, [pc, #40]	; (800b338 <netif_add+0x190>)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b312:	68fb      	ldr	r3, [r7, #12]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	08017c74 	.word	0x08017c74
 800b320:	08017d08 	.word	0x08017d08
 800b324:	08017cc4 	.word	0x08017cc4
 800b328:	08017d24 	.word	0x08017d24
 800b32c:	0801a3f0 	.word	0x0801a3f0
 800b330:	0800b753 	.word	0x0800b753
 800b334:	2000eec4 	.word	0x2000eec4
 800b338:	2000eebc 	.word	0x2000eebc
 800b33c:	08017d48 	.word	0x08017d48
 800b340:	08017d5c 	.word	0x08017d5c

0800b344 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f002 fe4f 	bl	800dff4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f007 fd01 	bl	8012d60 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d106      	bne.n	800b388 <netif_do_set_ipaddr+0x20>
 800b37a:	4b1d      	ldr	r3, [pc, #116]	; (800b3f0 <netif_do_set_ipaddr+0x88>)
 800b37c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b380:	491c      	ldr	r1, [pc, #112]	; (800b3f4 <netif_do_set_ipaddr+0x8c>)
 800b382:	481d      	ldr	r0, [pc, #116]	; (800b3f8 <netif_do_set_ipaddr+0x90>)
 800b384:	f00a fc0a 	bl	8015b9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d106      	bne.n	800b39c <netif_do_set_ipaddr+0x34>
 800b38e:	4b18      	ldr	r3, [pc, #96]	; (800b3f0 <netif_do_set_ipaddr+0x88>)
 800b390:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b394:	4917      	ldr	r1, [pc, #92]	; (800b3f4 <netif_do_set_ipaddr+0x8c>)
 800b396:	4818      	ldr	r0, [pc, #96]	; (800b3f8 <netif_do_set_ipaddr+0x90>)
 800b398:	f00a fc00 	bl	8015b9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d01c      	beq.n	800b3e4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b3ba:	f107 0314 	add.w	r3, r7, #20
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff ffbf 	bl	800b344 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <netif_do_set_ipaddr+0x6a>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	e000      	b.n	800b3d4 <netif_do_set_ipaddr+0x6c>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b3d8:	2101      	movs	r1, #1
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f8d2 	bl	800b584 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e000      	b.n	800b3e6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	08017c74 	.word	0x08017c74
 800b3f4:	08017d8c 	.word	0x08017d8c
 800b3f8:	08017cc4 	.word	0x08017cc4

0800b3fc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3308      	adds	r3, #8
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	429a      	cmp	r2, r3
 800b414:	d00a      	beq.n	800b42c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <netif_do_set_netmask+0x26>
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	e000      	b.n	800b424 <netif_do_set_netmask+0x28>
 800b422:	2300      	movs	r3, #0
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	330c      	adds	r3, #12
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d00a      	beq.n	800b46a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <netif_do_set_gw+0x26>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	e000      	b.n	800b462 <netif_do_set_gw+0x28>
 800b460:	2300      	movs	r3, #0
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b486:	2300      	movs	r3, #0
 800b488:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b48a:	2300      	movs	r3, #0
 800b48c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b494:	4b1c      	ldr	r3, [pc, #112]	; (800b508 <netif_set_addr+0x90>)
 800b496:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d101      	bne.n	800b4a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b49e:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <netif_set_addr+0x90>)
 800b4a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b4a8:	4b17      	ldr	r3, [pc, #92]	; (800b508 <netif_set_addr+0x90>)
 800b4aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d003      	beq.n	800b4ba <netif_set_addr+0x42>
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <netif_set_addr+0x46>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <netif_set_addr+0x48>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d006      	beq.n	800b4d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b4c8:	f107 0310 	add.w	r3, r7, #16
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff ff49 	bl	800b368 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b4d6:	69fa      	ldr	r2, [r7, #28]
 800b4d8:	6879      	ldr	r1, [r7, #4]
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff ff8e 	bl	800b3fc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7ff ffa8 	bl	800b43a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b4f0:	f107 0310 	add.w	r3, r7, #16
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff ff35 	bl	800b368 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b4fe:	bf00      	nop
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	0801a3f0 	.word	0x0801a3f0

0800b50c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b514:	4a04      	ldr	r2, [pc, #16]	; (800b528 <netif_set_default+0x1c>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	2000eec0 	.word	0x2000eec0

0800b52c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d107      	bne.n	800b54a <netif_set_up+0x1e>
 800b53a:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <netif_set_up+0x4c>)
 800b53c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b540:	490e      	ldr	r1, [pc, #56]	; (800b57c <netif_set_up+0x50>)
 800b542:	480f      	ldr	r0, [pc, #60]	; (800b580 <netif_set_up+0x54>)
 800b544:	f00a fb2a 	bl	8015b9c <iprintf>
 800b548:	e013      	b.n	800b572 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10c      	bne.n	800b572 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b56a:	2103      	movs	r1, #3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f809 	bl	800b584 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	08017c74 	.word	0x08017c74
 800b57c:	08017dfc 	.word	0x08017dfc
 800b580:	08017cc4 	.word	0x08017cc4

0800b584 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <netif_issue_reports+0x20>
 800b596:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <netif_issue_reports+0x74>)
 800b598:	f240 326d 	movw	r2, #877	; 0x36d
 800b59c:	4917      	ldr	r1, [pc, #92]	; (800b5fc <netif_issue_reports+0x78>)
 800b59e:	4818      	ldr	r0, [pc, #96]	; (800b600 <netif_issue_reports+0x7c>)
 800b5a0:	f00a fafc 	bl	8015b9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01e      	beq.n	800b5f0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5b8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d017      	beq.n	800b5f0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b5c0:	78fb      	ldrb	r3, [r7, #3]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d013      	beq.n	800b5f2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d007      	beq.n	800b5f2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f008 fb23 	bl	8013c34 <etharp_request>
 800b5ee:	e000      	b.n	800b5f2 <netif_issue_reports+0x6e>
    return;
 800b5f0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	08017c74 	.word	0x08017c74
 800b5fc:	08017e18 	.word	0x08017e18
 800b600:	08017cc4 	.word	0x08017cc4

0800b604 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d107      	bne.n	800b622 <netif_set_down+0x1e>
 800b612:	4b12      	ldr	r3, [pc, #72]	; (800b65c <netif_set_down+0x58>)
 800b614:	f240 329b 	movw	r2, #923	; 0x39b
 800b618:	4911      	ldr	r1, [pc, #68]	; (800b660 <netif_set_down+0x5c>)
 800b61a:	4812      	ldr	r0, [pc, #72]	; (800b664 <netif_set_down+0x60>)
 800b61c:	f00a fabe 	bl	8015b9c <iprintf>
 800b620:	e019      	b.n	800b656 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d012      	beq.n	800b656 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b636:	f023 0301 	bic.w	r3, r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b648:	f003 0308 	and.w	r3, r3, #8
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f007 fead 	bl	80133b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	08017c74 	.word	0x08017c74
 800b660:	08017e3c 	.word	0x08017e3c
 800b664:	08017cc4 	.word	0x08017cc4

0800b668 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d107      	bne.n	800b686 <netif_set_link_up+0x1e>
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <netif_set_link_up+0x5c>)
 800b678:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b67c:	4912      	ldr	r1, [pc, #72]	; (800b6c8 <netif_set_link_up+0x60>)
 800b67e:	4813      	ldr	r0, [pc, #76]	; (800b6cc <netif_set_link_up+0x64>)
 800b680:	f00a fa8c 	bl	8015b9c <iprintf>
 800b684:	e01b      	b.n	800b6be <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d114      	bne.n	800b6be <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b69a:	f043 0304 	orr.w	r3, r3, #4
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b6a6:	2103      	movs	r1, #3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff ff6b 	bl	800b584 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <netif_set_link_up+0x56>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	08017c74 	.word	0x08017c74
 800b6c8:	08017e5c 	.word	0x08017e5c
 800b6cc:	08017cc4 	.word	0x08017cc4

0800b6d0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d107      	bne.n	800b6ee <netif_set_link_down+0x1e>
 800b6de:	4b11      	ldr	r3, [pc, #68]	; (800b724 <netif_set_link_down+0x54>)
 800b6e0:	f240 4206 	movw	r2, #1030	; 0x406
 800b6e4:	4910      	ldr	r1, [pc, #64]	; (800b728 <netif_set_link_down+0x58>)
 800b6e6:	4811      	ldr	r0, [pc, #68]	; (800b72c <netif_set_link_down+0x5c>)
 800b6e8:	f00a fa58 	bl	8015b9c <iprintf>
 800b6ec:	e017      	b.n	800b71e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d010      	beq.n	800b71e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b702:	f023 0304 	bic.w	r3, r3, #4
 800b706:	b2da      	uxtb	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d003      	beq.n	800b71e <netif_set_link_down+0x4e>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	08017c74 	.word	0x08017c74
 800b728:	08017e80 	.word	0x08017e80
 800b72c:	08017cc4 	.word	0x08017cc4

0800b730 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	61da      	str	r2, [r3, #28]
  }
}
 800b746:	bf00      	nop
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b75e:	f06f 030b 	mvn.w	r3, #11
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
	...

0800b770 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b77a:	79fb      	ldrb	r3, [r7, #7]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d013      	beq.n	800b7a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b780:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <netif_get_by_index+0x48>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00c      	b.n	800b7a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b78e:	3301      	adds	r3, #1
 800b790:	b2db      	uxtb	r3, r3
 800b792:	79fa      	ldrb	r2, [r7, #7]
 800b794:	429a      	cmp	r2, r3
 800b796:	d101      	bne.n	800b79c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	e006      	b.n	800b7aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1ef      	bne.n	800b788 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	2000eebc 	.word	0x2000eebc

0800b7bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b7c2:	f009 ff87 	bl	80156d4 <sys_arch_protect>
 800b7c6:	6038      	str	r0, [r7, #0]
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <pbuf_free_ooseq+0x44>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	f009 ff8e 	bl	80156f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <pbuf_free_ooseq+0x48>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	607b      	str	r3, [r7, #4]
 800b7da:	e00a      	b.n	800b7f2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 fc43 	bl	800e070 <tcp_free_ooseq>
      return;
 800b7ea:	e005      	b.n	800b7f8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	607b      	str	r3, [r7, #4]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1f1      	bne.n	800b7dc <pbuf_free_ooseq+0x20>
    }
  }
}
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	2000eec5 	.word	0x2000eec5
 800b804:	2000eed4 	.word	0x2000eed4

0800b808 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b810:	f7ff ffd4 	bl	800b7bc <pbuf_free_ooseq>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b822:	f009 ff57 	bl	80156d4 <sys_arch_protect>
 800b826:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b828:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <pbuf_pool_is_empty+0x4c>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b82e:	4b0e      	ldr	r3, [pc, #56]	; (800b868 <pbuf_pool_is_empty+0x4c>)
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f009 ff5b 	bl	80156f0 <sys_arch_unprotect>

  if (!queued) {
 800b83a:	78fb      	ldrb	r3, [r7, #3]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10f      	bne.n	800b860 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b840:	2100      	movs	r1, #0
 800b842:	480a      	ldr	r0, [pc, #40]	; (800b86c <pbuf_pool_is_empty+0x50>)
 800b844:	f7fe fe90 	bl	800a568 <tcpip_try_callback>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d008      	beq.n	800b860 <pbuf_pool_is_empty+0x44>
 800b84e:	f009 ff41 	bl	80156d4 <sys_arch_protect>
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	4b04      	ldr	r3, [pc, #16]	; (800b868 <pbuf_pool_is_empty+0x4c>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f009 ff48 	bl	80156f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	2000eec5 	.word	0x2000eec5
 800b86c:	0800b809 	.word	0x0800b809

0800b870 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	4611      	mov	r1, r2
 800b87c:	461a      	mov	r2, r3
 800b87e:	460b      	mov	r3, r1
 800b880:	80fb      	strh	r3, [r7, #6]
 800b882:	4613      	mov	r3, r2
 800b884:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	88fa      	ldrh	r2, [r7, #6]
 800b896:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	88ba      	ldrh	r2, [r7, #4]
 800b89c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b89e:	8b3b      	ldrh	r3, [r7, #24]
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	7f3a      	ldrb	r2, [r7, #28]
 800b8aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	73da      	strb	r2, [r3, #15]
}
 800b8b8:	bf00      	nop
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08c      	sub	sp, #48	; 0x30
 800b8c8:	af02      	add	r7, sp, #8
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	80bb      	strh	r3, [r7, #4]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b8da:	887b      	ldrh	r3, [r7, #2]
 800b8dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b8e0:	d07f      	beq.n	800b9e2 <pbuf_alloc+0x11e>
 800b8e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b8e6:	f300 80c8 	bgt.w	800ba7a <pbuf_alloc+0x1b6>
 800b8ea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b8ee:	d010      	beq.n	800b912 <pbuf_alloc+0x4e>
 800b8f0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b8f4:	f300 80c1 	bgt.w	800ba7a <pbuf_alloc+0x1b6>
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d002      	beq.n	800b902 <pbuf_alloc+0x3e>
 800b8fc:	2b41      	cmp	r3, #65	; 0x41
 800b8fe:	f040 80bc 	bne.w	800ba7a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b902:	887a      	ldrh	r2, [r7, #2]
 800b904:	88bb      	ldrh	r3, [r7, #4]
 800b906:	4619      	mov	r1, r3
 800b908:	2000      	movs	r0, #0
 800b90a:	f000 f8d1 	bl	800bab0 <pbuf_alloc_reference>
 800b90e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b910:	e0bd      	b.n	800ba8e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b91a:	88bb      	ldrh	r3, [r7, #4]
 800b91c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b91e:	200c      	movs	r0, #12
 800b920:	f7ff fb9a 	bl	800b058 <memp_malloc>
 800b924:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b92c:	f7ff ff76 	bl	800b81c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <pbuf_alloc+0x78>
            pbuf_free(p);
 800b936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b938:	f000 faa8 	bl	800be8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	e0a7      	b.n	800ba90 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b942:	3303      	adds	r3, #3
 800b944:	b29b      	uxth	r3, r3
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b950:	b29b      	uxth	r3, r3
 800b952:	8b7a      	ldrh	r2, [r7, #26]
 800b954:	4293      	cmp	r3, r2
 800b956:	bf28      	it	cs
 800b958:	4613      	movcs	r3, r2
 800b95a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b95c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b95e:	3310      	adds	r3, #16
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4413      	add	r3, r2
 800b964:	3303      	adds	r3, #3
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	4618      	mov	r0, r3
 800b96c:	89f9      	ldrh	r1, [r7, #14]
 800b96e:	8b7a      	ldrh	r2, [r7, #26]
 800b970:	2300      	movs	r3, #0
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	887b      	ldrh	r3, [r7, #2]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	460b      	mov	r3, r1
 800b97a:	4601      	mov	r1, r0
 800b97c:	6938      	ldr	r0, [r7, #16]
 800b97e:	f7ff ff77 	bl	800b870 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d006      	beq.n	800b99c <pbuf_alloc+0xd8>
 800b98e:	4b42      	ldr	r3, [pc, #264]	; (800ba98 <pbuf_alloc+0x1d4>)
 800b990:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b994:	4941      	ldr	r1, [pc, #260]	; (800ba9c <pbuf_alloc+0x1d8>)
 800b996:	4842      	ldr	r0, [pc, #264]	; (800baa0 <pbuf_alloc+0x1dc>)
 800b998:	f00a f900 	bl	8015b9c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b99c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b99e:	3303      	adds	r3, #3
 800b9a0:	f023 0303 	bic.w	r3, r3, #3
 800b9a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b9a8:	d106      	bne.n	800b9b8 <pbuf_alloc+0xf4>
 800b9aa:	4b3b      	ldr	r3, [pc, #236]	; (800ba98 <pbuf_alloc+0x1d4>)
 800b9ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b9b0:	493c      	ldr	r1, [pc, #240]	; (800baa4 <pbuf_alloc+0x1e0>)
 800b9b2:	483b      	ldr	r0, [pc, #236]	; (800baa0 <pbuf_alloc+0x1dc>)
 800b9b4:	f00a f8f2 	bl	8015b9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d102      	bne.n	800b9c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c2:	e002      	b.n	800b9ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b9ce:	8b7a      	ldrh	r2, [r7, #26]
 800b9d0:	89fb      	ldrh	r3, [r7, #14]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b9da:	8b7b      	ldrh	r3, [r7, #26]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d19e      	bne.n	800b91e <pbuf_alloc+0x5a>
      break;
 800b9e0:	e055      	b.n	800ba8e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b9e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9e4:	3303      	adds	r3, #3
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	88bb      	ldrh	r3, [r7, #4]
 800b9f0:	3303      	adds	r3, #3
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	f023 0303 	bic.w	r3, r3, #3
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	4413      	add	r3, r2
 800b9fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b9fe:	8b3b      	ldrh	r3, [r7, #24]
 800ba00:	3310      	adds	r3, #16
 800ba02:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ba04:	8b3a      	ldrh	r2, [r7, #24]
 800ba06:	88bb      	ldrh	r3, [r7, #4]
 800ba08:	3303      	adds	r3, #3
 800ba0a:	f023 0303 	bic.w	r3, r3, #3
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d306      	bcc.n	800ba20 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ba12:	8afa      	ldrh	r2, [r7, #22]
 800ba14:	88bb      	ldrh	r3, [r7, #4]
 800ba16:	3303      	adds	r3, #3
 800ba18:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d201      	bcs.n	800ba24 <pbuf_alloc+0x160>
        return NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	e035      	b.n	800ba90 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ba24:	8afb      	ldrh	r3, [r7, #22]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff f972 	bl	800ad10 <mem_malloc>
 800ba2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <pbuf_alloc+0x174>
        return NULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	e02b      	b.n	800ba90 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ba38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3e:	4413      	add	r3, r2
 800ba40:	3303      	adds	r3, #3
 800ba42:	f023 0303 	bic.w	r3, r3, #3
 800ba46:	4618      	mov	r0, r3
 800ba48:	88b9      	ldrh	r1, [r7, #4]
 800ba4a:	88ba      	ldrh	r2, [r7, #4]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	887b      	ldrh	r3, [r7, #2]
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	460b      	mov	r3, r1
 800ba56:	4601      	mov	r1, r0
 800ba58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba5a:	f7ff ff09 	bl	800b870 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d010      	beq.n	800ba8c <pbuf_alloc+0x1c8>
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <pbuf_alloc+0x1d4>)
 800ba6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ba70:	490d      	ldr	r1, [pc, #52]	; (800baa8 <pbuf_alloc+0x1e4>)
 800ba72:	480b      	ldr	r0, [pc, #44]	; (800baa0 <pbuf_alloc+0x1dc>)
 800ba74:	f00a f892 	bl	8015b9c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ba78:	e008      	b.n	800ba8c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ba7a:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <pbuf_alloc+0x1d4>)
 800ba7c:	f240 1227 	movw	r2, #295	; 0x127
 800ba80:	490a      	ldr	r1, [pc, #40]	; (800baac <pbuf_alloc+0x1e8>)
 800ba82:	4807      	ldr	r0, [pc, #28]	; (800baa0 <pbuf_alloc+0x1dc>)
 800ba84:	f00a f88a 	bl	8015b9c <iprintf>
      return NULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e001      	b.n	800ba90 <pbuf_alloc+0x1cc>
      break;
 800ba8c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3728      	adds	r7, #40	; 0x28
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	08017ea4 	.word	0x08017ea4
 800ba9c:	08017ed4 	.word	0x08017ed4
 800baa0:	08017f04 	.word	0x08017f04
 800baa4:	08017f2c 	.word	0x08017f2c
 800baa8:	08017f60 	.word	0x08017f60
 800baac:	08017f8c 	.word	0x08017f8c

0800bab0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	807b      	strh	r3, [r7, #2]
 800babc:	4613      	mov	r3, r2
 800babe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bac0:	883b      	ldrh	r3, [r7, #0]
 800bac2:	2b41      	cmp	r3, #65	; 0x41
 800bac4:	d009      	beq.n	800bada <pbuf_alloc_reference+0x2a>
 800bac6:	883b      	ldrh	r3, [r7, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d006      	beq.n	800bada <pbuf_alloc_reference+0x2a>
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <pbuf_alloc_reference+0x5c>)
 800bace:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bad2:	490f      	ldr	r1, [pc, #60]	; (800bb10 <pbuf_alloc_reference+0x60>)
 800bad4:	480f      	ldr	r0, [pc, #60]	; (800bb14 <pbuf_alloc_reference+0x64>)
 800bad6:	f00a f861 	bl	8015b9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bada:	200b      	movs	r0, #11
 800badc:	f7ff fabc 	bl	800b058 <memp_malloc>
 800bae0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	e00b      	b.n	800bb04 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800baec:	8879      	ldrh	r1, [r7, #2]
 800baee:	887a      	ldrh	r2, [r7, #2]
 800baf0:	2300      	movs	r3, #0
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	883b      	ldrh	r3, [r7, #0]
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	460b      	mov	r3, r1
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff feb7 	bl	800b870 <pbuf_init_alloced_pbuf>
  return p;
 800bb02:	68fb      	ldr	r3, [r7, #12]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	08017ea4 	.word	0x08017ea4
 800bb10:	08017fa8 	.word	0x08017fa8
 800bb14:	08017f04 	.word	0x08017f04

0800bb18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	607b      	str	r3, [r7, #4]
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	460b      	mov	r3, r1
 800bb26:	81bb      	strh	r3, [r7, #12]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bb30:	8a7b      	ldrh	r3, [r7, #18]
 800bb32:	3303      	adds	r3, #3
 800bb34:	f023 0203 	bic.w	r2, r3, #3
 800bb38:	89bb      	ldrh	r3, [r7, #12]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d901      	bls.n	800bb46 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e018      	b.n	800bb78 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d007      	beq.n	800bb5c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bb4c:	8a7b      	ldrh	r3, [r7, #18]
 800bb4e:	3303      	adds	r3, #3
 800bb50:	f023 0303 	bic.w	r3, r3, #3
 800bb54:	6a3a      	ldr	r2, [r7, #32]
 800bb56:	4413      	add	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	e001      	b.n	800bb60 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	89b9      	ldrh	r1, [r7, #12]
 800bb64:	89ba      	ldrh	r2, [r7, #12]
 800bb66:	2302      	movs	r3, #2
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	897b      	ldrh	r3, [r7, #10]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	6979      	ldr	r1, [r7, #20]
 800bb72:	f7ff fe7d 	bl	800b870 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bb76:	687b      	ldr	r3, [r7, #4]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <pbuf_realloc+0x20>
 800bb92:	4b3a      	ldr	r3, [pc, #232]	; (800bc7c <pbuf_realloc+0xfc>)
 800bb94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bb98:	4939      	ldr	r1, [pc, #228]	; (800bc80 <pbuf_realloc+0x100>)
 800bb9a:	483a      	ldr	r0, [pc, #232]	; (800bc84 <pbuf_realloc+0x104>)
 800bb9c:	f009 fffe 	bl	8015b9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	887a      	ldrh	r2, [r7, #2]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d263      	bcs.n	800bc72 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	891a      	ldrh	r2, [r3, #8]
 800bbae:	887b      	ldrh	r3, [r7, #2]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bbb4:	887b      	ldrh	r3, [r7, #2]
 800bbb6:	817b      	strh	r3, [r7, #10]
  q = p;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bbbc:	e018      	b.n	800bbf0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	895b      	ldrh	r3, [r3, #10]
 800bbc2:	897a      	ldrh	r2, [r7, #10]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	891a      	ldrh	r2, [r3, #8]
 800bbcc:	893b      	ldrh	r3, [r7, #8]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d106      	bne.n	800bbf0 <pbuf_realloc+0x70>
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <pbuf_realloc+0xfc>)
 800bbe4:	f240 12af 	movw	r2, #431	; 0x1af
 800bbe8:	4927      	ldr	r1, [pc, #156]	; (800bc88 <pbuf_realloc+0x108>)
 800bbea:	4826      	ldr	r0, [pc, #152]	; (800bc84 <pbuf_realloc+0x104>)
 800bbec:	f009 ffd6 	bl	8015b9c <iprintf>
  while (rem_len > q->len) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	895b      	ldrh	r3, [r3, #10]
 800bbf4:	897a      	ldrh	r2, [r7, #10]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d8e1      	bhi.n	800bbbe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	7b1b      	ldrb	r3, [r3, #12]
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d121      	bne.n	800bc4a <pbuf_realloc+0xca>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	895b      	ldrh	r3, [r3, #10]
 800bc0a:	897a      	ldrh	r2, [r7, #10]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d01c      	beq.n	800bc4a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	7b5b      	ldrb	r3, [r3, #13]
 800bc14:	f003 0302 	and.w	r3, r3, #2
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d116      	bne.n	800bc4a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	897b      	ldrh	r3, [r7, #10]
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7fe ff64 	bl	800aafc <mem_trim>
 800bc34:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <pbuf_realloc+0xca>
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <pbuf_realloc+0xfc>)
 800bc3e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bc42:	4912      	ldr	r1, [pc, #72]	; (800bc8c <pbuf_realloc+0x10c>)
 800bc44:	480f      	ldr	r0, [pc, #60]	; (800bc84 <pbuf_realloc+0x104>)
 800bc46:	f009 ffa9 	bl	8015b9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	897a      	ldrh	r2, [r7, #10]
 800bc4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	895a      	ldrh	r2, [r3, #10]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 f911 	bl	800be8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	e000      	b.n	800bc74 <pbuf_realloc+0xf4>
    return;
 800bc72:	bf00      	nop

}
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	08017ea4 	.word	0x08017ea4
 800bc80:	08017fbc 	.word	0x08017fbc
 800bc84:	08017f04 	.word	0x08017f04
 800bc88:	08017fd4 	.word	0x08017fd4
 800bc8c:	08017fec 	.word	0x08017fec

0800bc90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <pbuf_add_header_impl+0x22>
 800bca4:	4b2b      	ldr	r3, [pc, #172]	; (800bd54 <pbuf_add_header_impl+0xc4>)
 800bca6:	f240 12df 	movw	r2, #479	; 0x1df
 800bcaa:	492b      	ldr	r1, [pc, #172]	; (800bd58 <pbuf_add_header_impl+0xc8>)
 800bcac:	482b      	ldr	r0, [pc, #172]	; (800bd5c <pbuf_add_header_impl+0xcc>)
 800bcae:	f009 ff75 	bl	8015b9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d003      	beq.n	800bcc0 <pbuf_add_header_impl+0x30>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcbe:	d301      	bcc.n	800bcc4 <pbuf_add_header_impl+0x34>
    return 1;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e043      	b.n	800bd4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <pbuf_add_header_impl+0x3e>
    return 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e03e      	b.n	800bd4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	891a      	ldrh	r2, [r3, #8]
 800bcd6:	8a7b      	ldrh	r3, [r7, #18]
 800bcd8:	4413      	add	r3, r2
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	8a7a      	ldrh	r2, [r7, #18]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d901      	bls.n	800bce6 <pbuf_add_header_impl+0x56>
    return 1;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e032      	b.n	800bd4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	7b1b      	ldrb	r3, [r3, #12]
 800bcea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bcec:	8a3b      	ldrh	r3, [r7, #16]
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00c      	beq.n	800bd10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	425b      	negs	r3, r3
 800bcfe:	4413      	add	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3310      	adds	r3, #16
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d20d      	bcs.n	800bd28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e01d      	b.n	800bd4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d006      	beq.n	800bd24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	425b      	negs	r3, r3
 800bd1e:	4413      	add	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	e001      	b.n	800bd28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bd24:	2301      	movs	r3, #1
 800bd26:	e011      	b.n	800bd4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	895a      	ldrh	r2, [r3, #10]
 800bd32:	8a7b      	ldrh	r3, [r7, #18]
 800bd34:	4413      	add	r3, r2
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	891a      	ldrh	r2, [r3, #8]
 800bd40:	8a7b      	ldrh	r3, [r7, #18]
 800bd42:	4413      	add	r3, r2
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	811a      	strh	r2, [r3, #8]


  return 0;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	08017ea4 	.word	0x08017ea4
 800bd58:	08018008 	.word	0x08018008
 800bd5c:	08017f04 	.word	0x08017f04

0800bd60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff ff8e 	bl	800bc90 <pbuf_add_header_impl>
 800bd74:	4603      	mov	r3, r0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d106      	bne.n	800bd9e <pbuf_remove_header+0x1e>
 800bd90:	4b20      	ldr	r3, [pc, #128]	; (800be14 <pbuf_remove_header+0x94>)
 800bd92:	f240 224b 	movw	r2, #587	; 0x24b
 800bd96:	4920      	ldr	r1, [pc, #128]	; (800be18 <pbuf_remove_header+0x98>)
 800bd98:	4820      	ldr	r0, [pc, #128]	; (800be1c <pbuf_remove_header+0x9c>)
 800bd9a:	f009 feff 	bl	8015b9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <pbuf_remove_header+0x2c>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdaa:	d301      	bcc.n	800bdb0 <pbuf_remove_header+0x30>
    return 1;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e02c      	b.n	800be0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <pbuf_remove_header+0x3a>
    return 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e027      	b.n	800be0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	895b      	ldrh	r3, [r3, #10]
 800bdc2:	89fa      	ldrh	r2, [r7, #14]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d908      	bls.n	800bdda <pbuf_remove_header+0x5a>
 800bdc8:	4b12      	ldr	r3, [pc, #72]	; (800be14 <pbuf_remove_header+0x94>)
 800bdca:	f240 2255 	movw	r2, #597	; 0x255
 800bdce:	4914      	ldr	r1, [pc, #80]	; (800be20 <pbuf_remove_header+0xa0>)
 800bdd0:	4812      	ldr	r0, [pc, #72]	; (800be1c <pbuf_remove_header+0x9c>)
 800bdd2:	f009 fee3 	bl	8015b9c <iprintf>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e017      	b.n	800be0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	685a      	ldr	r2, [r3, #4]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	441a      	add	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	895a      	ldrh	r2, [r3, #10]
 800bdf0:	89fb      	ldrh	r3, [r7, #14]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	891a      	ldrh	r2, [r3, #8]
 800bdfe:	89fb      	ldrh	r3, [r7, #14]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	b29a      	uxth	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	08017ea4 	.word	0x08017ea4
 800be18:	08018008 	.word	0x08018008
 800be1c:	08017f04 	.word	0x08017f04
 800be20:	08018014 	.word	0x08018014

0800be24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	807b      	strh	r3, [r7, #2]
 800be30:	4613      	mov	r3, r2
 800be32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800be34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da08      	bge.n	800be4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800be3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be40:	425b      	negs	r3, r3
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7ff ff9b 	bl	800bd80 <pbuf_remove_header>
 800be4a:	4603      	mov	r3, r0
 800be4c:	e007      	b.n	800be5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800be4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be52:	787a      	ldrb	r2, [r7, #1]
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7ff ff1a 	bl	800bc90 <pbuf_add_header_impl>
 800be5c:	4603      	mov	r3, r0
  }
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	460b      	mov	r3, r1
 800be70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800be72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be76:	2201      	movs	r2, #1
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff ffd2 	bl	800be24 <pbuf_header_impl>
 800be80:	4603      	mov	r3, r0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10b      	bne.n	800beb2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d106      	bne.n	800beae <pbuf_free+0x22>
 800bea0:	4b3b      	ldr	r3, [pc, #236]	; (800bf90 <pbuf_free+0x104>)
 800bea2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bea6:	493b      	ldr	r1, [pc, #236]	; (800bf94 <pbuf_free+0x108>)
 800bea8:	483b      	ldr	r0, [pc, #236]	; (800bf98 <pbuf_free+0x10c>)
 800beaa:	f009 fe77 	bl	8015b9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	e069      	b.n	800bf86 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800beb6:	e062      	b.n	800bf7e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800beb8:	f009 fc0c 	bl	80156d4 <sys_arch_protect>
 800bebc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7b9b      	ldrb	r3, [r3, #14]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <pbuf_free+0x48>
 800bec6:	4b32      	ldr	r3, [pc, #200]	; (800bf90 <pbuf_free+0x104>)
 800bec8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800becc:	4933      	ldr	r1, [pc, #204]	; (800bf9c <pbuf_free+0x110>)
 800bece:	4832      	ldr	r0, [pc, #200]	; (800bf98 <pbuf_free+0x10c>)
 800bed0:	f009 fe64 	bl	8015b9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7b9b      	ldrb	r3, [r3, #14]
 800bed8:	3b01      	subs	r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	739a      	strb	r2, [r3, #14]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	7b9b      	ldrb	r3, [r3, #14]
 800bee4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bee6:	69b8      	ldr	r0, [r7, #24]
 800bee8:	f009 fc02 	bl	80156f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d143      	bne.n	800bf7a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	7b1b      	ldrb	r3, [r3, #12]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7b5b      	ldrb	r3, [r3, #13]
 800bf06:	f003 0302 	and.w	r3, r3, #2
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d011      	beq.n	800bf32 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <pbuf_free+0x9c>
 800bf1a:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <pbuf_free+0x104>)
 800bf1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bf20:	491f      	ldr	r1, [pc, #124]	; (800bfa0 <pbuf_free+0x114>)
 800bf22:	481d      	ldr	r0, [pc, #116]	; (800bf98 <pbuf_free+0x10c>)
 800bf24:	f009 fe3a 	bl	8015b9c <iprintf>
        pc->custom_free_function(p);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
 800bf30:	e01d      	b.n	800bf6e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d104      	bne.n	800bf42 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	200c      	movs	r0, #12
 800bf3c:	f7ff f902 	bl	800b144 <memp_free>
 800bf40:	e015      	b.n	800bf6e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d104      	bne.n	800bf52 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	200b      	movs	r0, #11
 800bf4c:	f7ff f8fa 	bl	800b144 <memp_free>
 800bf50:	e00d      	b.n	800bf6e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <pbuf_free+0xd4>
          mem_free(p);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7fe fd3f 	bl	800a9dc <mem_free>
 800bf5e:	e006      	b.n	800bf6e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bf60:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <pbuf_free+0x104>)
 800bf62:	f240 320f 	movw	r2, #783	; 0x30f
 800bf66:	490f      	ldr	r1, [pc, #60]	; (800bfa4 <pbuf_free+0x118>)
 800bf68:	480b      	ldr	r0, [pc, #44]	; (800bf98 <pbuf_free+0x10c>)
 800bf6a:	f009 fe17 	bl	8015b9c <iprintf>
        }
      }
      count++;
 800bf6e:	7ffb      	ldrb	r3, [r7, #31]
 800bf70:	3301      	adds	r3, #1
 800bf72:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	607b      	str	r3, [r7, #4]
 800bf78:	e001      	b.n	800bf7e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d199      	bne.n	800beb8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	08017ea4 	.word	0x08017ea4
 800bf94:	08018008 	.word	0x08018008
 800bf98:	08017f04 	.word	0x08017f04
 800bf9c:	08018034 	.word	0x08018034
 800bfa0:	0801804c 	.word	0x0801804c
 800bfa4:	08018070 	.word	0x08018070

0800bfa8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bfb4:	e005      	b.n	800bfc2 <pbuf_clen+0x1a>
    ++len;
 800bfb6:	89fb      	ldrh	r3, [r7, #14]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f6      	bne.n	800bfb6 <pbuf_clen+0xe>
  }
  return len;
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d016      	beq.n	800c014 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bfe6:	f009 fb75 	bl	80156d4 <sys_arch_protect>
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	7b9b      	ldrb	r3, [r3, #14]
 800bff0:	3301      	adds	r3, #1
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	739a      	strb	r2, [r3, #14]
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f009 fb79 	bl	80156f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7b9b      	ldrb	r3, [r3, #14]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <pbuf_ref+0x3c>
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <pbuf_ref+0x44>)
 800c008:	f240 3242 	movw	r2, #834	; 0x342
 800c00c:	4904      	ldr	r1, [pc, #16]	; (800c020 <pbuf_ref+0x48>)
 800c00e:	4805      	ldr	r0, [pc, #20]	; (800c024 <pbuf_ref+0x4c>)
 800c010:	f009 fdc4 	bl	8015b9c <iprintf>
  }
}
 800c014:	bf00      	nop
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	08017ea4 	.word	0x08017ea4
 800c020:	08018084 	.word	0x08018084
 800c024:	08017f04 	.word	0x08017f04

0800c028 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <pbuf_cat+0x16>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d107      	bne.n	800c04e <pbuf_cat+0x26>
 800c03e:	4b20      	ldr	r3, [pc, #128]	; (800c0c0 <pbuf_cat+0x98>)
 800c040:	f240 3259 	movw	r2, #857	; 0x359
 800c044:	491f      	ldr	r1, [pc, #124]	; (800c0c4 <pbuf_cat+0x9c>)
 800c046:	4820      	ldr	r0, [pc, #128]	; (800c0c8 <pbuf_cat+0xa0>)
 800c048:	f009 fda8 	bl	8015b9c <iprintf>
 800c04c:	e034      	b.n	800c0b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	e00a      	b.n	800c06a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	891a      	ldrh	r2, [r3, #8]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	891b      	ldrh	r3, [r3, #8]
 800c05c:	4413      	add	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60fb      	str	r3, [r7, #12]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1f0      	bne.n	800c054 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	891a      	ldrh	r2, [r3, #8]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	895b      	ldrh	r3, [r3, #10]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d006      	beq.n	800c08c <pbuf_cat+0x64>
 800c07e:	4b10      	ldr	r3, [pc, #64]	; (800c0c0 <pbuf_cat+0x98>)
 800c080:	f240 3262 	movw	r2, #866	; 0x362
 800c084:	4911      	ldr	r1, [pc, #68]	; (800c0cc <pbuf_cat+0xa4>)
 800c086:	4810      	ldr	r0, [pc, #64]	; (800c0c8 <pbuf_cat+0xa0>)
 800c088:	f009 fd88 	bl	8015b9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <pbuf_cat+0x7a>
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <pbuf_cat+0x98>)
 800c096:	f240 3263 	movw	r2, #867	; 0x363
 800c09a:	490d      	ldr	r1, [pc, #52]	; (800c0d0 <pbuf_cat+0xa8>)
 800c09c:	480a      	ldr	r0, [pc, #40]	; (800c0c8 <pbuf_cat+0xa0>)
 800c09e:	f009 fd7d 	bl	8015b9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	891a      	ldrh	r2, [r3, #8]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	891b      	ldrh	r3, [r3, #8]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	08017ea4 	.word	0x08017ea4
 800c0c4:	08018098 	.word	0x08018098
 800c0c8:	08017f04 	.word	0x08017f04
 800c0cc:	080180d0 	.word	0x080180d0
 800c0d0:	08018100 	.word	0x08018100

0800c0d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d008      	beq.n	800c0fe <pbuf_copy+0x2a>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d005      	beq.n	800c0fe <pbuf_copy+0x2a>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	891a      	ldrh	r2, [r3, #8]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	891b      	ldrh	r3, [r3, #8]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d209      	bcs.n	800c112 <pbuf_copy+0x3e>
 800c0fe:	4b57      	ldr	r3, [pc, #348]	; (800c25c <pbuf_copy+0x188>)
 800c100:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c104:	4956      	ldr	r1, [pc, #344]	; (800c260 <pbuf_copy+0x18c>)
 800c106:	4857      	ldr	r0, [pc, #348]	; (800c264 <pbuf_copy+0x190>)
 800c108:	f009 fd48 	bl	8015b9c <iprintf>
 800c10c:	f06f 030f 	mvn.w	r3, #15
 800c110:	e09f      	b.n	800c252 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	895b      	ldrh	r3, [r3, #10]
 800c116:	461a      	mov	r2, r3
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	1ad2      	subs	r2, r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	895b      	ldrh	r3, [r3, #10]
 800c120:	4619      	mov	r1, r3
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	1acb      	subs	r3, r1, r3
 800c126:	429a      	cmp	r2, r3
 800c128:	d306      	bcc.n	800c138 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	895b      	ldrh	r3, [r3, #10]
 800c12e:	461a      	mov	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	e005      	b.n	800c144 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	895b      	ldrh	r3, [r3, #10]
 800c13c:	461a      	mov	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	18d0      	adds	r0, r2, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	4413      	add	r3, r2
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4619      	mov	r1, r3
 800c158:	f009 fc10 	bl	801597c <memcpy>
    offset_to += len;
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4413      	add	r3, r2
 800c162:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4413      	add	r3, r2
 800c16a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	895b      	ldrh	r3, [r3, #10]
 800c170:	461a      	mov	r2, r3
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	4293      	cmp	r3, r2
 800c176:	d906      	bls.n	800c186 <pbuf_copy+0xb2>
 800c178:	4b38      	ldr	r3, [pc, #224]	; (800c25c <pbuf_copy+0x188>)
 800c17a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c17e:	493a      	ldr	r1, [pc, #232]	; (800c268 <pbuf_copy+0x194>)
 800c180:	4838      	ldr	r0, [pc, #224]	; (800c264 <pbuf_copy+0x190>)
 800c182:	f009 fd0b 	bl	8015b9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	895b      	ldrh	r3, [r3, #10]
 800c18a:	461a      	mov	r2, r3
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	4293      	cmp	r3, r2
 800c190:	d906      	bls.n	800c1a0 <pbuf_copy+0xcc>
 800c192:	4b32      	ldr	r3, [pc, #200]	; (800c25c <pbuf_copy+0x188>)
 800c194:	f240 32da 	movw	r2, #986	; 0x3da
 800c198:	4934      	ldr	r1, [pc, #208]	; (800c26c <pbuf_copy+0x198>)
 800c19a:	4832      	ldr	r0, [pc, #200]	; (800c264 <pbuf_copy+0x190>)
 800c19c:	f009 fcfe 	bl	8015b9c <iprintf>
    if (offset_from >= p_from->len) {
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	895b      	ldrh	r3, [r3, #10]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d304      	bcc.n	800c1b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	895b      	ldrh	r3, [r3, #10]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d114      	bne.n	800c1ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10c      	bne.n	800c1ec <pbuf_copy+0x118>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <pbuf_copy+0x118>
 800c1d8:	4b20      	ldr	r3, [pc, #128]	; (800c25c <pbuf_copy+0x188>)
 800c1da:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c1de:	4924      	ldr	r1, [pc, #144]	; (800c270 <pbuf_copy+0x19c>)
 800c1e0:	4820      	ldr	r0, [pc, #128]	; (800c264 <pbuf_copy+0x190>)
 800c1e2:	f009 fcdb 	bl	8015b9c <iprintf>
 800c1e6:	f06f 030f 	mvn.w	r3, #15
 800c1ea:	e032      	b.n	800c252 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d013      	beq.n	800c21a <pbuf_copy+0x146>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	895a      	ldrh	r2, [r3, #10]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	891b      	ldrh	r3, [r3, #8]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d10d      	bne.n	800c21a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <pbuf_copy+0x146>
 800c206:	4b15      	ldr	r3, [pc, #84]	; (800c25c <pbuf_copy+0x188>)
 800c208:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c20c:	4919      	ldr	r1, [pc, #100]	; (800c274 <pbuf_copy+0x1a0>)
 800c20e:	4815      	ldr	r0, [pc, #84]	; (800c264 <pbuf_copy+0x190>)
 800c210:	f009 fcc4 	bl	8015b9c <iprintf>
 800c214:	f06f 0305 	mvn.w	r3, #5
 800c218:	e01b      	b.n	800c252 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d013      	beq.n	800c248 <pbuf_copy+0x174>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	895a      	ldrh	r2, [r3, #10]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	891b      	ldrh	r3, [r3, #8]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d10d      	bne.n	800c248 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d009      	beq.n	800c248 <pbuf_copy+0x174>
 800c234:	4b09      	ldr	r3, [pc, #36]	; (800c25c <pbuf_copy+0x188>)
 800c236:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c23a:	490e      	ldr	r1, [pc, #56]	; (800c274 <pbuf_copy+0x1a0>)
 800c23c:	4809      	ldr	r0, [pc, #36]	; (800c264 <pbuf_copy+0x190>)
 800c23e:	f009 fcad 	bl	8015b9c <iprintf>
 800c242:	f06f 0305 	mvn.w	r3, #5
 800c246:	e004      	b.n	800c252 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f af61 	bne.w	800c112 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	08017ea4 	.word	0x08017ea4
 800c260:	0801814c 	.word	0x0801814c
 800c264:	08017f04 	.word	0x08017f04
 800c268:	0801817c 	.word	0x0801817c
 800c26c:	08018194 	.word	0x08018194
 800c270:	080181b0 	.word	0x080181b0
 800c274:	080181c0 	.word	0x080181c0

0800c278 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	4611      	mov	r1, r2
 800c284:	461a      	mov	r2, r3
 800c286:	460b      	mov	r3, r1
 800c288:	80fb      	strh	r3, [r7, #6]
 800c28a:	4613      	mov	r3, r2
 800c28c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d108      	bne.n	800c2ae <pbuf_copy_partial+0x36>
 800c29c:	4b2b      	ldr	r3, [pc, #172]	; (800c34c <pbuf_copy_partial+0xd4>)
 800c29e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c2a2:	492b      	ldr	r1, [pc, #172]	; (800c350 <pbuf_copy_partial+0xd8>)
 800c2a4:	482b      	ldr	r0, [pc, #172]	; (800c354 <pbuf_copy_partial+0xdc>)
 800c2a6:	f009 fc79 	bl	8015b9c <iprintf>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e04a      	b.n	800c344 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d108      	bne.n	800c2c6 <pbuf_copy_partial+0x4e>
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <pbuf_copy_partial+0xd4>)
 800c2b6:	f240 420b 	movw	r2, #1035	; 0x40b
 800c2ba:	4927      	ldr	r1, [pc, #156]	; (800c358 <pbuf_copy_partial+0xe0>)
 800c2bc:	4825      	ldr	r0, [pc, #148]	; (800c354 <pbuf_copy_partial+0xdc>)
 800c2be:	f009 fc6d 	bl	8015b9c <iprintf>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e03e      	b.n	800c344 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	61fb      	str	r3, [r7, #28]
 800c2ca:	e034      	b.n	800c336 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c2cc:	88bb      	ldrh	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00a      	beq.n	800c2e8 <pbuf_copy_partial+0x70>
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	88ba      	ldrh	r2, [r7, #4]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d305      	bcc.n	800c2e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	895b      	ldrh	r3, [r3, #10]
 800c2e0:	88ba      	ldrh	r2, [r7, #4]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	80bb      	strh	r3, [r7, #4]
 800c2e6:	e023      	b.n	800c330 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	895a      	ldrh	r2, [r3, #10]
 800c2ec:	88bb      	ldrh	r3, [r7, #4]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c2f2:	8b3a      	ldrh	r2, [r7, #24]
 800c2f4:	88fb      	ldrh	r3, [r7, #6]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d901      	bls.n	800c2fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c2fe:	8b7b      	ldrh	r3, [r7, #26]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	18d0      	adds	r0, r2, r3
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	88bb      	ldrh	r3, [r7, #4]
 800c30a:	4413      	add	r3, r2
 800c30c:	8b3a      	ldrh	r2, [r7, #24]
 800c30e:	4619      	mov	r1, r3
 800c310:	f009 fb34 	bl	801597c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c314:	8afa      	ldrh	r2, [r7, #22]
 800c316:	8b3b      	ldrh	r3, [r7, #24]
 800c318:	4413      	add	r3, r2
 800c31a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c31c:	8b7a      	ldrh	r2, [r7, #26]
 800c31e:	8b3b      	ldrh	r3, [r7, #24]
 800c320:	4413      	add	r3, r2
 800c322:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c324:	88fa      	ldrh	r2, [r7, #6]
 800c326:	8b3b      	ldrh	r3, [r7, #24]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <pbuf_copy_partial+0xca>
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1c4      	bne.n	800c2cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c342:	8afb      	ldrh	r3, [r7, #22]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3720      	adds	r7, #32
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	08017ea4 	.word	0x08017ea4
 800c350:	080181ec 	.word	0x080181ec
 800c354:	08017f04 	.word	0x08017f04
 800c358:	0801820c 	.word	0x0801820c

0800c35c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	603a      	str	r2, [r7, #0]
 800c366:	71fb      	strb	r3, [r7, #7]
 800c368:	460b      	mov	r3, r1
 800c36a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	8919      	ldrh	r1, [r3, #8]
 800c370:	88ba      	ldrh	r2, [r7, #4]
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff faa5 	bl	800b8c4 <pbuf_alloc>
 800c37a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <pbuf_clone+0x2a>
    return NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	e011      	b.n	800c3aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fea3 	bl	800c0d4 <pbuf_copy>
 800c38e:	4603      	mov	r3, r0
 800c390:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c392:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d006      	beq.n	800c3a8 <pbuf_clone+0x4c>
 800c39a:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <pbuf_clone+0x58>)
 800c39c:	f240 5224 	movw	r2, #1316	; 0x524
 800c3a0:	4905      	ldr	r1, [pc, #20]	; (800c3b8 <pbuf_clone+0x5c>)
 800c3a2:	4806      	ldr	r0, [pc, #24]	; (800c3bc <pbuf_clone+0x60>)
 800c3a4:	f009 fbfa 	bl	8015b9c <iprintf>
  return q;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	08017ea4 	.word	0x08017ea4
 800c3b8:	08018318 	.word	0x08018318
 800c3bc:	08017f04 	.word	0x08017f04

0800c3c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c3c4:	f009 fc02 	bl	8015bcc <rand>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	4b01      	ldr	r3, [pc, #4]	; (800c3e0 <tcp_init+0x20>)
 800c3da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c3dc:	bf00      	nop
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20000024 	.word	0x20000024

0800c3e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	7d1b      	ldrb	r3, [r3, #20]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d105      	bne.n	800c400 <tcp_free+0x1c>
 800c3f4:	4b06      	ldr	r3, [pc, #24]	; (800c410 <tcp_free+0x2c>)
 800c3f6:	22d4      	movs	r2, #212	; 0xd4
 800c3f8:	4906      	ldr	r1, [pc, #24]	; (800c414 <tcp_free+0x30>)
 800c3fa:	4807      	ldr	r0, [pc, #28]	; (800c418 <tcp_free+0x34>)
 800c3fc:	f009 fbce 	bl	8015b9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	2001      	movs	r0, #1
 800c404:	f7fe fe9e 	bl	800b144 <memp_free>
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	080183a4 	.word	0x080183a4
 800c414:	080183d4 	.word	0x080183d4
 800c418:	080183e8 	.word	0x080183e8

0800c41c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	7d1b      	ldrb	r3, [r3, #20]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d105      	bne.n	800c438 <tcp_free_listen+0x1c>
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <tcp_free_listen+0x2c>)
 800c42e:	22df      	movs	r2, #223	; 0xdf
 800c430:	4906      	ldr	r1, [pc, #24]	; (800c44c <tcp_free_listen+0x30>)
 800c432:	4807      	ldr	r0, [pc, #28]	; (800c450 <tcp_free_listen+0x34>)
 800c434:	f009 fbb2 	bl	8015b9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	2002      	movs	r0, #2
 800c43c:	f7fe fe82 	bl	800b144 <memp_free>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	080183a4 	.word	0x080183a4
 800c44c:	08018410 	.word	0x08018410
 800c450:	080183e8 	.word	0x080183e8

0800c454 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c458:	f001 f8a6 	bl	800d5a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c45c:	4b07      	ldr	r3, [pc, #28]	; (800c47c <tcp_tmr+0x28>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	b2da      	uxtb	r2, r3
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <tcp_tmr+0x28>)
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	4b04      	ldr	r3, [pc, #16]	; (800c47c <tcp_tmr+0x28>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d001      	beq.n	800c478 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c474:	f000 fd58 	bl	800cf28 <tcp_slowtmr>
  }
}
 800c478:	bf00      	nop
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000eedd 	.word	0x2000eedd

0800c480 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <tcp_remove_listener+0x1c>
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <tcp_remove_listener+0x48>)
 800c492:	22ff      	movs	r2, #255	; 0xff
 800c494:	490d      	ldr	r1, [pc, #52]	; (800c4cc <tcp_remove_listener+0x4c>)
 800c496:	480e      	ldr	r0, [pc, #56]	; (800c4d0 <tcp_remove_listener+0x50>)
 800c498:	f009 fb80 	bl	8015b9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	e00a      	b.n	800c4b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d102      	bne.n	800c4b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f1      	bne.n	800c4a2 <tcp_remove_listener+0x22>
    }
  }
}
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	080183a4 	.word	0x080183a4
 800c4cc:	0801842c 	.word	0x0801842c
 800c4d0:	080183e8 	.word	0x080183e8

0800c4d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <tcp_listen_closed+0x1c>
 800c4e2:	4b14      	ldr	r3, [pc, #80]	; (800c534 <tcp_listen_closed+0x60>)
 800c4e4:	f240 1211 	movw	r2, #273	; 0x111
 800c4e8:	4913      	ldr	r1, [pc, #76]	; (800c538 <tcp_listen_closed+0x64>)
 800c4ea:	4814      	ldr	r0, [pc, #80]	; (800c53c <tcp_listen_closed+0x68>)
 800c4ec:	f009 fb56 	bl	8015b9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7d1b      	ldrb	r3, [r3, #20]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d006      	beq.n	800c506 <tcp_listen_closed+0x32>
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	; (800c534 <tcp_listen_closed+0x60>)
 800c4fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c4fe:	4910      	ldr	r1, [pc, #64]	; (800c540 <tcp_listen_closed+0x6c>)
 800c500:	480e      	ldr	r0, [pc, #56]	; (800c53c <tcp_listen_closed+0x68>)
 800c502:	f009 fb4b 	bl	8015b9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c506:	2301      	movs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	e00b      	b.n	800c524 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c50c:	4a0d      	ldr	r2, [pc, #52]	; (800c544 <tcp_listen_closed+0x70>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff ffb1 	bl	800c480 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3301      	adds	r3, #1
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b03      	cmp	r3, #3
 800c528:	d9f0      	bls.n	800c50c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c52a:	bf00      	nop
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	080183a4 	.word	0x080183a4
 800c538:	08018454 	.word	0x08018454
 800c53c:	080183e8 	.word	0x080183e8
 800c540:	08018460 	.word	0x08018460
 800c544:	0801a3c8 	.word	0x0801a3c8

0800c548 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c548:	b5b0      	push	{r4, r5, r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af04      	add	r7, sp, #16
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <tcp_close_shutdown+0x20>
 800c55a:	4b63      	ldr	r3, [pc, #396]	; (800c6e8 <tcp_close_shutdown+0x1a0>)
 800c55c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c560:	4962      	ldr	r1, [pc, #392]	; (800c6ec <tcp_close_shutdown+0x1a4>)
 800c562:	4863      	ldr	r0, [pc, #396]	; (800c6f0 <tcp_close_shutdown+0x1a8>)
 800c564:	f009 fb1a 	bl	8015b9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d066      	beq.n	800c63c <tcp_close_shutdown+0xf4>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7d1b      	ldrb	r3, [r3, #20]
 800c572:	2b04      	cmp	r3, #4
 800c574:	d003      	beq.n	800c57e <tcp_close_shutdown+0x36>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7d1b      	ldrb	r3, [r3, #20]
 800c57a:	2b07      	cmp	r3, #7
 800c57c:	d15e      	bne.n	800c63c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c582:	2b00      	cmp	r3, #0
 800c584:	d104      	bne.n	800c590 <tcp_close_shutdown+0x48>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c58a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c58e:	d055      	beq.n	800c63c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8b5b      	ldrh	r3, [r3, #26]
 800c594:	f003 0310 	and.w	r3, r3, #16
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <tcp_close_shutdown+0x62>
 800c59c:	4b52      	ldr	r3, [pc, #328]	; (800c6e8 <tcp_close_shutdown+0x1a0>)
 800c59e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c5a2:	4954      	ldr	r1, [pc, #336]	; (800c6f4 <tcp_close_shutdown+0x1ac>)
 800c5a4:	4852      	ldr	r0, [pc, #328]	; (800c6f0 <tcp_close_shutdown+0x1a8>)
 800c5a6:	f009 faf9 	bl	8015b9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c5b2:	687d      	ldr	r5, [r7, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	8ad2      	ldrh	r2, [r2, #22]
 800c5bc:	6879      	ldr	r1, [r7, #4]
 800c5be:	8b09      	ldrh	r1, [r1, #24]
 800c5c0:	9102      	str	r1, [sp, #8]
 800c5c2:	9201      	str	r2, [sp, #4]
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f005 fdbb 	bl	8012148 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 fb98 	bl	800dd08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c5d8:	4b47      	ldr	r3, [pc, #284]	; (800c6f8 <tcp_close_shutdown+0x1b0>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d105      	bne.n	800c5ee <tcp_close_shutdown+0xa6>
 800c5e2:	4b45      	ldr	r3, [pc, #276]	; (800c6f8 <tcp_close_shutdown+0x1b0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4a43      	ldr	r2, [pc, #268]	; (800c6f8 <tcp_close_shutdown+0x1b0>)
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	e013      	b.n	800c616 <tcp_close_shutdown+0xce>
 800c5ee:	4b42      	ldr	r3, [pc, #264]	; (800c6f8 <tcp_close_shutdown+0x1b0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	e00c      	b.n	800c610 <tcp_close_shutdown+0xc8>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d104      	bne.n	800c60a <tcp_close_shutdown+0xc2>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68da      	ldr	r2, [r3, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	60da      	str	r2, [r3, #12]
 800c608:	e005      	b.n	800c616 <tcp_close_shutdown+0xce>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	60fb      	str	r3, [r7, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1ef      	bne.n	800c5f6 <tcp_close_shutdown+0xae>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	60da      	str	r2, [r3, #12]
 800c61c:	4b37      	ldr	r3, [pc, #220]	; (800c6fc <tcp_close_shutdown+0x1b4>)
 800c61e:	2201      	movs	r2, #1
 800c620:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c622:	4b37      	ldr	r3, [pc, #220]	; (800c700 <tcp_close_shutdown+0x1b8>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d102      	bne.n	800c632 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c62c:	f004 f830 	bl	8010690 <tcp_trigger_input_pcb_close>
 800c630:	e002      	b.n	800c638 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff fed6 	bl	800c3e4 <tcp_free>
      }
      return ERR_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	e050      	b.n	800c6de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7d1b      	ldrb	r3, [r3, #20]
 800c640:	2b02      	cmp	r3, #2
 800c642:	d03b      	beq.n	800c6bc <tcp_close_shutdown+0x174>
 800c644:	2b02      	cmp	r3, #2
 800c646:	dc44      	bgt.n	800c6d2 <tcp_close_shutdown+0x18a>
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <tcp_close_shutdown+0x10a>
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d02a      	beq.n	800c6a6 <tcp_close_shutdown+0x15e>
 800c650:	e03f      	b.n	800c6d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	8adb      	ldrh	r3, [r3, #22]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d021      	beq.n	800c69e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c65a:	4b2a      	ldr	r3, [pc, #168]	; (800c704 <tcp_close_shutdown+0x1bc>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d105      	bne.n	800c670 <tcp_close_shutdown+0x128>
 800c664:	4b27      	ldr	r3, [pc, #156]	; (800c704 <tcp_close_shutdown+0x1bc>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	4a26      	ldr	r2, [pc, #152]	; (800c704 <tcp_close_shutdown+0x1bc>)
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	e013      	b.n	800c698 <tcp_close_shutdown+0x150>
 800c670:	4b24      	ldr	r3, [pc, #144]	; (800c704 <tcp_close_shutdown+0x1bc>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60bb      	str	r3, [r7, #8]
 800c676:	e00c      	b.n	800c692 <tcp_close_shutdown+0x14a>
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d104      	bne.n	800c68c <tcp_close_shutdown+0x144>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	60da      	str	r2, [r3, #12]
 800c68a:	e005      	b.n	800c698 <tcp_close_shutdown+0x150>
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	60bb      	str	r3, [r7, #8]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ef      	bne.n	800c678 <tcp_close_shutdown+0x130>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff fea0 	bl	800c3e4 <tcp_free>
      break;
 800c6a4:	e01a      	b.n	800c6dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff ff14 	bl	800c4d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	4816      	ldr	r0, [pc, #88]	; (800c708 <tcp_close_shutdown+0x1c0>)
 800c6b0:	f001 fb7a 	bl	800dda8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7ff feb1 	bl	800c41c <tcp_free_listen>
      break;
 800c6ba:	e00f      	b.n	800c6dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	480e      	ldr	r0, [pc, #56]	; (800c6f8 <tcp_close_shutdown+0x1b0>)
 800c6c0:	f001 fb72 	bl	800dda8 <tcp_pcb_remove>
 800c6c4:	4b0d      	ldr	r3, [pc, #52]	; (800c6fc <tcp_close_shutdown+0x1b4>)
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fe8a 	bl	800c3e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c6d0:	e004      	b.n	800c6dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f81a 	bl	800c70c <tcp_close_shutdown_fin>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	e000      	b.n	800c6de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	080183a4 	.word	0x080183a4
 800c6ec:	08018478 	.word	0x08018478
 800c6f0:	080183e8 	.word	0x080183e8
 800c6f4:	08018498 	.word	0x08018498
 800c6f8:	2000eed4 	.word	0x2000eed4
 800c6fc:	2000eedc 	.word	0x2000eedc
 800c700:	2000ef14 	.word	0x2000ef14
 800c704:	2000eecc 	.word	0x2000eecc
 800c708:	2000eed0 	.word	0x2000eed0

0800c70c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <tcp_close_shutdown_fin+0x1c>
 800c71a:	4b2e      	ldr	r3, [pc, #184]	; (800c7d4 <tcp_close_shutdown_fin+0xc8>)
 800c71c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c720:	492d      	ldr	r1, [pc, #180]	; (800c7d8 <tcp_close_shutdown_fin+0xcc>)
 800c722:	482e      	ldr	r0, [pc, #184]	; (800c7dc <tcp_close_shutdown_fin+0xd0>)
 800c724:	f009 fa3a 	bl	8015b9c <iprintf>

  switch (pcb->state) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	7d1b      	ldrb	r3, [r3, #20]
 800c72c:	2b07      	cmp	r3, #7
 800c72e:	d020      	beq.n	800c772 <tcp_close_shutdown_fin+0x66>
 800c730:	2b07      	cmp	r3, #7
 800c732:	dc2b      	bgt.n	800c78c <tcp_close_shutdown_fin+0x80>
 800c734:	2b03      	cmp	r3, #3
 800c736:	d002      	beq.n	800c73e <tcp_close_shutdown_fin+0x32>
 800c738:	2b04      	cmp	r3, #4
 800c73a:	d00d      	beq.n	800c758 <tcp_close_shutdown_fin+0x4c>
 800c73c:	e026      	b.n	800c78c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f004 fe10 	bl	8011364 <tcp_send_fin>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d11f      	bne.n	800c790 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2205      	movs	r2, #5
 800c754:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c756:	e01b      	b.n	800c790 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f004 fe03 	bl	8011364 <tcp_send_fin>
 800c75e:	4603      	mov	r3, r0
 800c760:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d114      	bne.n	800c794 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2205      	movs	r2, #5
 800c76e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c770:	e010      	b.n	800c794 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f004 fdf6 	bl	8011364 <tcp_send_fin>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d109      	bne.n	800c798 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2209      	movs	r2, #9
 800c788:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c78a:	e005      	b.n	800c798 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	e01c      	b.n	800c7ca <tcp_close_shutdown_fin+0xbe>
      break;
 800c790:	bf00      	nop
 800c792:	e002      	b.n	800c79a <tcp_close_shutdown_fin+0x8e>
      break;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <tcp_close_shutdown_fin+0x8e>
      break;
 800c798:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d103      	bne.n	800c7aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f004 ff1c 	bl	80115e0 <tcp_output>
 800c7a8:	e00d      	b.n	800c7c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b2:	d108      	bne.n	800c7c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8b5b      	ldrh	r3, [r3, #26]
 800c7b8:	f043 0308 	orr.w	r3, r3, #8
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e001      	b.n	800c7ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	080183a4 	.word	0x080183a4
 800c7d8:	08018454 	.word	0x08018454
 800c7dc:	080183e8 	.word	0x080183e8

0800c7e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d109      	bne.n	800c802 <tcp_close+0x22>
 800c7ee:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <tcp_close+0x4c>)
 800c7f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c7f4:	490e      	ldr	r1, [pc, #56]	; (800c830 <tcp_close+0x50>)
 800c7f6:	480f      	ldr	r0, [pc, #60]	; (800c834 <tcp_close+0x54>)
 800c7f8:	f009 f9d0 	bl	8015b9c <iprintf>
 800c7fc:	f06f 030f 	mvn.w	r3, #15
 800c800:	e00f      	b.n	800c822 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7d1b      	ldrb	r3, [r3, #20]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d006      	beq.n	800c818 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	8b5b      	ldrh	r3, [r3, #26]
 800c80e:	f043 0310 	orr.w	r3, r3, #16
 800c812:	b29a      	uxth	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c818:	2101      	movs	r1, #1
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7ff fe94 	bl	800c548 <tcp_close_shutdown>
 800c820:	4603      	mov	r3, r0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	080183a4 	.word	0x080183a4
 800c830:	080184b4 	.word	0x080184b4
 800c834:	080183e8 	.word	0x080183e8

0800c838 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <tcp_shutdown+0x26>
 800c84a:	4b26      	ldr	r3, [pc, #152]	; (800c8e4 <tcp_shutdown+0xac>)
 800c84c:	f240 2207 	movw	r2, #519	; 0x207
 800c850:	4925      	ldr	r1, [pc, #148]	; (800c8e8 <tcp_shutdown+0xb0>)
 800c852:	4826      	ldr	r0, [pc, #152]	; (800c8ec <tcp_shutdown+0xb4>)
 800c854:	f009 f9a2 	bl	8015b9c <iprintf>
 800c858:	f06f 030f 	mvn.w	r3, #15
 800c85c:	e03d      	b.n	800c8da <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	7d1b      	ldrb	r3, [r3, #20]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d102      	bne.n	800c86c <tcp_shutdown+0x34>
    return ERR_CONN;
 800c866:	f06f 030a 	mvn.w	r3, #10
 800c86a:	e036      	b.n	800c8da <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d01b      	beq.n	800c8aa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	8b5b      	ldrh	r3, [r3, #26]
 800c876:	f043 0310 	orr.w	r3, r3, #16
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d005      	beq.n	800c892 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c886:	2101      	movs	r1, #1
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fe5d 	bl	800c548 <tcp_close_shutdown>
 800c88e:	4603      	mov	r3, r0
 800c890:	e023      	b.n	800c8da <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff faf4 	bl	800be8c <pbuf_free>
      pcb->refused_data = NULL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d013      	beq.n	800c8d8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	7d1b      	ldrb	r3, [r3, #20]
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	dc02      	bgt.n	800c8be <tcp_shutdown+0x86>
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	da02      	bge.n	800c8c2 <tcp_shutdown+0x8a>
 800c8bc:	e009      	b.n	800c8d2 <tcp_shutdown+0x9a>
 800c8be:	2b07      	cmp	r3, #7
 800c8c0:	d107      	bne.n	800c8d2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f7ff fe3d 	bl	800c548 <tcp_close_shutdown>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	e003      	b.n	800c8da <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c8d2:	f06f 030a 	mvn.w	r3, #10
 800c8d6:	e000      	b.n	800c8da <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	080183a4 	.word	0x080183a4
 800c8e8:	080184cc 	.word	0x080184cc
 800c8ec:	080183e8 	.word	0x080183e8

0800c8f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08e      	sub	sp, #56	; 0x38
 800c8f4:	af04      	add	r7, sp, #16
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d107      	bne.n	800c910 <tcp_abandon+0x20>
 800c900:	4b52      	ldr	r3, [pc, #328]	; (800ca4c <tcp_abandon+0x15c>)
 800c902:	f240 223d 	movw	r2, #573	; 0x23d
 800c906:	4952      	ldr	r1, [pc, #328]	; (800ca50 <tcp_abandon+0x160>)
 800c908:	4852      	ldr	r0, [pc, #328]	; (800ca54 <tcp_abandon+0x164>)
 800c90a:	f009 f947 	bl	8015b9c <iprintf>
 800c90e:	e099      	b.n	800ca44 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	7d1b      	ldrb	r3, [r3, #20]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d106      	bne.n	800c926 <tcp_abandon+0x36>
 800c918:	4b4c      	ldr	r3, [pc, #304]	; (800ca4c <tcp_abandon+0x15c>)
 800c91a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c91e:	494e      	ldr	r1, [pc, #312]	; (800ca58 <tcp_abandon+0x168>)
 800c920:	484c      	ldr	r0, [pc, #304]	; (800ca54 <tcp_abandon+0x164>)
 800c922:	f009 f93b 	bl	8015b9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	7d1b      	ldrb	r3, [r3, #20]
 800c92a:	2b0a      	cmp	r3, #10
 800c92c:	d107      	bne.n	800c93e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c92e:	6879      	ldr	r1, [r7, #4]
 800c930:	484a      	ldr	r0, [pc, #296]	; (800ca5c <tcp_abandon+0x16c>)
 800c932:	f001 fa39 	bl	800dda8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff fd54 	bl	800c3e4 <tcp_free>
 800c93c:	e082      	b.n	800ca44 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c94a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c958:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	7d1b      	ldrb	r3, [r3, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d126      	bne.n	800c9b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8adb      	ldrh	r3, [r3, #22]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d02e      	beq.n	800c9ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c970:	4b3b      	ldr	r3, [pc, #236]	; (800ca60 <tcp_abandon+0x170>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	429a      	cmp	r2, r3
 800c978:	d105      	bne.n	800c986 <tcp_abandon+0x96>
 800c97a:	4b39      	ldr	r3, [pc, #228]	; (800ca60 <tcp_abandon+0x170>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	4a37      	ldr	r2, [pc, #220]	; (800ca60 <tcp_abandon+0x170>)
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	e013      	b.n	800c9ae <tcp_abandon+0xbe>
 800c986:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <tcp_abandon+0x170>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	61fb      	str	r3, [r7, #28]
 800c98c:	e00c      	b.n	800c9a8 <tcp_abandon+0xb8>
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	429a      	cmp	r2, r3
 800c996:	d104      	bne.n	800c9a2 <tcp_abandon+0xb2>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	60da      	str	r2, [r3, #12]
 800c9a0:	e005      	b.n	800c9ae <tcp_abandon+0xbe>
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	61fb      	str	r3, [r7, #28]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1ef      	bne.n	800c98e <tcp_abandon+0x9e>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	60da      	str	r2, [r3, #12]
 800c9b4:	e00b      	b.n	800c9ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	8adb      	ldrh	r3, [r3, #22]
 800c9be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	4828      	ldr	r0, [pc, #160]	; (800ca64 <tcp_abandon+0x174>)
 800c9c4:	f001 f9f0 	bl	800dda8 <tcp_pcb_remove>
 800c9c8:	4b27      	ldr	r3, [pc, #156]	; (800ca68 <tcp_abandon+0x178>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 fec4 	bl	800d768 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 febb 	bl	800d768 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 feb2 	bl	800d768 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00e      	beq.n	800ca28 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ca0a:	6879      	ldr	r1, [r7, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3304      	adds	r3, #4
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	8b12      	ldrh	r2, [r2, #24]
 800ca14:	9202      	str	r2, [sp, #8]
 800ca16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ca18:	9201      	str	r2, [sp, #4]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	69b9      	ldr	r1, [r7, #24]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f005 fb90 	bl	8012148 <tcp_rst>
    }
    last_state = pcb->state;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	7d1b      	ldrb	r3, [r3, #20]
 800ca2c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff fcd8 	bl	800c3e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d004      	beq.n	800ca44 <tcp_abandon+0x154>
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f06f 010c 	mvn.w	r1, #12
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	4798      	blx	r3
  }
}
 800ca44:	3728      	adds	r7, #40	; 0x28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	080183a4 	.word	0x080183a4
 800ca50:	080184e8 	.word	0x080184e8
 800ca54:	080183e8 	.word	0x080183e8
 800ca58:	08018504 	.word	0x08018504
 800ca5c:	2000eed8 	.word	0x2000eed8
 800ca60:	2000eecc 	.word	0x2000eecc
 800ca64:	2000eed4 	.word	0x2000eed4
 800ca68:	2000eedc 	.word	0x2000eedc

0800ca6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ca74:	2101      	movs	r1, #1
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff ff3a 	bl	800c8f0 <tcp_abandon>
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ca92:	2304      	movs	r3, #4
 800ca94:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ca9c:	4b3e      	ldr	r3, [pc, #248]	; (800cb98 <tcp_bind+0x114>)
 800ca9e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d109      	bne.n	800caba <tcp_bind+0x36>
 800caa6:	4b3d      	ldr	r3, [pc, #244]	; (800cb9c <tcp_bind+0x118>)
 800caa8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800caac:	493c      	ldr	r1, [pc, #240]	; (800cba0 <tcp_bind+0x11c>)
 800caae:	483d      	ldr	r0, [pc, #244]	; (800cba4 <tcp_bind+0x120>)
 800cab0:	f009 f874 	bl	8015b9c <iprintf>
 800cab4:	f06f 030f 	mvn.w	r3, #15
 800cab8:	e06a      	b.n	800cb90 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d009      	beq.n	800cad6 <tcp_bind+0x52>
 800cac2:	4b36      	ldr	r3, [pc, #216]	; (800cb9c <tcp_bind+0x118>)
 800cac4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cac8:	4937      	ldr	r1, [pc, #220]	; (800cba8 <tcp_bind+0x124>)
 800caca:	4836      	ldr	r0, [pc, #216]	; (800cba4 <tcp_bind+0x120>)
 800cacc:	f009 f866 	bl	8015b9c <iprintf>
 800cad0:	f06f 0305 	mvn.w	r3, #5
 800cad4:	e05c      	b.n	800cb90 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cad6:	88fb      	ldrh	r3, [r7, #6]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d109      	bne.n	800caf0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cadc:	f000 f9de 	bl	800ce9c <tcp_new_port>
 800cae0:	4603      	mov	r3, r0
 800cae2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cae4:	88fb      	ldrh	r3, [r7, #6]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d135      	bne.n	800cb56 <tcp_bind+0xd2>
      return ERR_BUF;
 800caea:	f06f 0301 	mvn.w	r3, #1
 800caee:	e04f      	b.n	800cb90 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800caf0:	2300      	movs	r3, #0
 800caf2:	61fb      	str	r3, [r7, #28]
 800caf4:	e02b      	b.n	800cb4e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800caf6:	4a2d      	ldr	r2, [pc, #180]	; (800cbac <tcp_bind+0x128>)
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	61bb      	str	r3, [r7, #24]
 800cb02:	e01e      	b.n	800cb42 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	8adb      	ldrh	r3, [r3, #22]
 800cb08:	88fa      	ldrh	r2, [r7, #6]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d116      	bne.n	800cb3c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cb0e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d010      	beq.n	800cb36 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00c      	beq.n	800cb36 <tcp_bind+0xb2>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d009      	beq.n	800cb36 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d005      	beq.n	800cb36 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d102      	bne.n	800cb3c <tcp_bind+0xb8>
              return ERR_USE;
 800cb36:	f06f 0307 	mvn.w	r3, #7
 800cb3a:	e029      	b.n	800cb90 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	61bb      	str	r3, [r7, #24]
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1dd      	bne.n	800cb04 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	69fa      	ldr	r2, [r7, #28]
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	dbcf      	blt.n	800caf6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <tcp_bind+0xf2>
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d008      	beq.n	800cb76 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <tcp_bind+0xec>
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	e000      	b.n	800cb72 <tcp_bind+0xee>
 800cb70:	2300      	movs	r3, #0
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	88fa      	ldrh	r2, [r7, #6]
 800cb7a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <tcp_bind+0x12c>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	60da      	str	r2, [r3, #12]
 800cb84:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <tcp_bind+0x12c>)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	f005 fc9f 	bl	80124cc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3720      	adds	r7, #32
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	0801a3f0 	.word	0x0801a3f0
 800cb9c:	080183a4 	.word	0x080183a4
 800cba0:	08018538 	.word	0x08018538
 800cba4:	080183e8 	.word	0x080183e8
 800cba8:	08018550 	.word	0x08018550
 800cbac:	0801a3c8 	.word	0x0801a3c8
 800cbb0:	2000eecc 	.word	0x2000eecc

0800cbb4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d106      	bne.n	800cbd6 <tcp_accept_null+0x22>
 800cbc8:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <tcp_accept_null+0x34>)
 800cbca:	f240 320f 	movw	r2, #783	; 0x30f
 800cbce:	4907      	ldr	r1, [pc, #28]	; (800cbec <tcp_accept_null+0x38>)
 800cbd0:	4807      	ldr	r0, [pc, #28]	; (800cbf0 <tcp_accept_null+0x3c>)
 800cbd2:	f008 ffe3 	bl	8015b9c <iprintf>

  tcp_abort(pcb);
 800cbd6:	68b8      	ldr	r0, [r7, #8]
 800cbd8:	f7ff ff48 	bl	800ca6c <tcp_abort>

  return ERR_ABRT;
 800cbdc:	f06f 030c 	mvn.w	r3, #12
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	080183a4 	.word	0x080183a4
 800cbec:	08018578 	.word	0x08018578
 800cbf0:	080183e8 	.word	0x080183e8

0800cbf4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d109      	bne.n	800cc20 <tcp_listen_with_backlog_and_err+0x2c>
 800cc0c:	4b47      	ldr	r3, [pc, #284]	; (800cd2c <tcp_listen_with_backlog_and_err+0x138>)
 800cc0e:	f240 3259 	movw	r2, #857	; 0x359
 800cc12:	4947      	ldr	r1, [pc, #284]	; (800cd30 <tcp_listen_with_backlog_and_err+0x13c>)
 800cc14:	4847      	ldr	r0, [pc, #284]	; (800cd34 <tcp_listen_with_backlog_and_err+0x140>)
 800cc16:	f008 ffc1 	bl	8015b9c <iprintf>
 800cc1a:	23f0      	movs	r3, #240	; 0xf0
 800cc1c:	76fb      	strb	r3, [r7, #27]
 800cc1e:	e079      	b.n	800cd14 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	7d1b      	ldrb	r3, [r3, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d009      	beq.n	800cc3c <tcp_listen_with_backlog_and_err+0x48>
 800cc28:	4b40      	ldr	r3, [pc, #256]	; (800cd2c <tcp_listen_with_backlog_and_err+0x138>)
 800cc2a:	f240 325a 	movw	r2, #858	; 0x35a
 800cc2e:	4942      	ldr	r1, [pc, #264]	; (800cd38 <tcp_listen_with_backlog_and_err+0x144>)
 800cc30:	4840      	ldr	r0, [pc, #256]	; (800cd34 <tcp_listen_with_backlog_and_err+0x140>)
 800cc32:	f008 ffb3 	bl	8015b9c <iprintf>
 800cc36:	23f1      	movs	r3, #241	; 0xf1
 800cc38:	76fb      	strb	r3, [r7, #27]
 800cc3a:	e06b      	b.n	800cd14 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	7d1b      	ldrb	r3, [r3, #20]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d104      	bne.n	800cc4e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cc48:	23f7      	movs	r3, #247	; 0xf7
 800cc4a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc4c:	e062      	b.n	800cd14 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cc4e:	2002      	movs	r0, #2
 800cc50:	f7fe fa02 	bl	800b058 <memp_malloc>
 800cc54:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cc5c:	23ff      	movs	r3, #255	; 0xff
 800cc5e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc60:	e058      	b.n	800cd14 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	691a      	ldr	r2, [r3, #16]
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	8ada      	ldrh	r2, [r3, #22]
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	2201      	movs	r2, #1
 800cc76:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	7d5a      	ldrb	r2, [r3, #21]
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	7a5a      	ldrb	r2, [r3, #9]
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	7ada      	ldrb	r2, [r3, #11]
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7a9a      	ldrb	r2, [r3, #10]
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	8adb      	ldrh	r3, [r3, #22]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d021      	beq.n	800ccf2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ccae:	4b23      	ldr	r3, [pc, #140]	; (800cd3c <tcp_listen_with_backlog_and_err+0x148>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d105      	bne.n	800ccc4 <tcp_listen_with_backlog_and_err+0xd0>
 800ccb8:	4b20      	ldr	r3, [pc, #128]	; (800cd3c <tcp_listen_with_backlog_and_err+0x148>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	4a1f      	ldr	r2, [pc, #124]	; (800cd3c <tcp_listen_with_backlog_and_err+0x148>)
 800ccc0:	6013      	str	r3, [r2, #0]
 800ccc2:	e013      	b.n	800ccec <tcp_listen_with_backlog_and_err+0xf8>
 800ccc4:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <tcp_listen_with_backlog_and_err+0x148>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	e00c      	b.n	800cce6 <tcp_listen_with_backlog_and_err+0xf2>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d104      	bne.n	800cce0 <tcp_listen_with_backlog_and_err+0xec>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	60da      	str	r2, [r3, #12]
 800ccde:	e005      	b.n	800ccec <tcp_listen_with_backlog_and_err+0xf8>
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1ef      	bne.n	800cccc <tcp_listen_with_backlog_and_err+0xd8>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff fb76 	bl	800c3e4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	4a11      	ldr	r2, [pc, #68]	; (800cd40 <tcp_listen_with_backlog_and_err+0x14c>)
 800ccfc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccfe:	4b11      	ldr	r3, [pc, #68]	; (800cd44 <tcp_listen_with_backlog_and_err+0x150>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	60da      	str	r2, [r3, #12]
 800cd06:	4a0f      	ldr	r2, [pc, #60]	; (800cd44 <tcp_listen_with_backlog_and_err+0x150>)
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	6013      	str	r3, [r2, #0]
 800cd0c:	f005 fbde 	bl	80124cc <tcp_timer_needed>
  res = ERR_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7efa      	ldrb	r2, [r7, #27]
 800cd1e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cd20:	69fb      	ldr	r3, [r7, #28]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3720      	adds	r7, #32
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	080183a4 	.word	0x080183a4
 800cd30:	08018598 	.word	0x08018598
 800cd34:	080183e8 	.word	0x080183e8
 800cd38:	080185c8 	.word	0x080185c8
 800cd3c:	2000eecc 	.word	0x2000eecc
 800cd40:	0800cbb5 	.word	0x0800cbb5
 800cd44:	2000eed0 	.word	0x2000eed0

0800cd48 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <tcp_update_rcv_ann_wnd+0x1c>
 800cd56:	4b25      	ldr	r3, [pc, #148]	; (800cdec <tcp_update_rcv_ann_wnd+0xa4>)
 800cd58:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd5c:	4924      	ldr	r1, [pc, #144]	; (800cdf0 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd5e:	4825      	ldr	r0, [pc, #148]	; (800cdf4 <tcp_update_rcv_ann_wnd+0xac>)
 800cd60:	f008 ff1c 	bl	8015b9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd78:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd7c:	bf28      	it	cs
 800cd7e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd82:	b292      	uxth	r2, r2
 800cd84:	4413      	add	r3, r2
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	db08      	blt.n	800cda0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	e020      	b.n	800cde2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	dd03      	ble.n	800cdb6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdb4:	e014      	b.n	800cde0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc8:	d306      	bcc.n	800cdd8 <tcp_update_rcv_ann_wnd+0x90>
 800cdca:	4b08      	ldr	r3, [pc, #32]	; (800cdec <tcp_update_rcv_ann_wnd+0xa4>)
 800cdcc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cdd0:	4909      	ldr	r1, [pc, #36]	; (800cdf8 <tcp_update_rcv_ann_wnd+0xb0>)
 800cdd2:	4808      	ldr	r0, [pc, #32]	; (800cdf4 <tcp_update_rcv_ann_wnd+0xac>)
 800cdd4:	f008 fee2 	bl	8015b9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cde0:	2300      	movs	r3, #0
  }
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	080183a4 	.word	0x080183a4
 800cdf0:	08018600 	.word	0x08018600
 800cdf4:	080183e8 	.word	0x080183e8
 800cdf8:	08018624 	.word	0x08018624

0800cdfc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d107      	bne.n	800ce1e <tcp_recved+0x22>
 800ce0e:	4b1f      	ldr	r3, [pc, #124]	; (800ce8c <tcp_recved+0x90>)
 800ce10:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ce14:	491e      	ldr	r1, [pc, #120]	; (800ce90 <tcp_recved+0x94>)
 800ce16:	481f      	ldr	r0, [pc, #124]	; (800ce94 <tcp_recved+0x98>)
 800ce18:	f008 fec0 	bl	8015b9c <iprintf>
 800ce1c:	e032      	b.n	800ce84 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7d1b      	ldrb	r3, [r3, #20]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d106      	bne.n	800ce34 <tcp_recved+0x38>
 800ce26:	4b19      	ldr	r3, [pc, #100]	; (800ce8c <tcp_recved+0x90>)
 800ce28:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ce2c:	491a      	ldr	r1, [pc, #104]	; (800ce98 <tcp_recved+0x9c>)
 800ce2e:	4819      	ldr	r0, [pc, #100]	; (800ce94 <tcp_recved+0x98>)
 800ce30:	f008 feb4 	bl	8015b9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce38:	887b      	ldrh	r3, [r7, #2]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce3e:	89fb      	ldrh	r3, [r7, #14]
 800ce40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce44:	d804      	bhi.n	800ce50 <tcp_recved+0x54>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4a:	89fa      	ldrh	r2, [r7, #14]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d204      	bcs.n	800ce5a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce56:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce58:	e002      	b.n	800ce60 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	89fa      	ldrh	r2, [r7, #14]
 800ce5e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff ff71 	bl	800cd48 <tcp_update_rcv_ann_wnd>
 800ce66:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce6e:	d309      	bcc.n	800ce84 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	8b5b      	ldrh	r3, [r3, #26]
 800ce74:	f043 0302 	orr.w	r3, r3, #2
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f004 fbae 	bl	80115e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	080183a4 	.word	0x080183a4
 800ce90:	08018640 	.word	0x08018640
 800ce94:	080183e8 	.word	0x080183e8
 800ce98:	08018658 	.word	0x08018658

0800ce9c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cea6:	4b1e      	ldr	r3, [pc, #120]	; (800cf20 <tcp_new_port+0x84>)
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <tcp_new_port+0x84>)
 800ceb0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ceb2:	4b1b      	ldr	r3, [pc, #108]	; (800cf20 <tcp_new_port+0x84>)
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d103      	bne.n	800cec6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cebe:	4b18      	ldr	r3, [pc, #96]	; (800cf20 <tcp_new_port+0x84>)
 800cec0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cec4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cec6:	2300      	movs	r3, #0
 800cec8:	71fb      	strb	r3, [r7, #7]
 800ceca:	e01e      	b.n	800cf0a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <tcp_new_port+0x88>)
 800ced0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	e011      	b.n	800cefe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	8ada      	ldrh	r2, [r3, #22]
 800cede:	4b10      	ldr	r3, [pc, #64]	; (800cf20 <tcp_new_port+0x84>)
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d108      	bne.n	800cef8 <tcp_new_port+0x5c>
        n++;
 800cee6:	88bb      	ldrh	r3, [r7, #4]
 800cee8:	3301      	adds	r3, #1
 800ceea:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ceec:	88bb      	ldrh	r3, [r7, #4]
 800ceee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cef2:	d3d8      	bcc.n	800cea6 <tcp_new_port+0xa>
          return 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	e00d      	b.n	800cf14 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	603b      	str	r3, [r7, #0]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1ea      	bne.n	800ceda <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	3301      	adds	r3, #1
 800cf08:	71fb      	strb	r3, [r7, #7]
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d9dd      	bls.n	800cecc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cf10:	4b03      	ldr	r3, [pc, #12]	; (800cf20 <tcp_new_port+0x84>)
 800cf12:	881b      	ldrh	r3, [r3, #0]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	20000024 	.word	0x20000024
 800cf24:	0801a3c8 	.word	0x0801a3c8

0800cf28 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cf28:	b5b0      	push	{r4, r5, r7, lr}
 800cf2a:	b090      	sub	sp, #64	; 0x40
 800cf2c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cf34:	4b94      	ldr	r3, [pc, #592]	; (800d188 <tcp_slowtmr+0x260>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	4a93      	ldr	r2, [pc, #588]	; (800d188 <tcp_slowtmr+0x260>)
 800cf3c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cf3e:	4b93      	ldr	r3, [pc, #588]	; (800d18c <tcp_slowtmr+0x264>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	4b91      	ldr	r3, [pc, #580]	; (800d18c <tcp_slowtmr+0x264>)
 800cf48:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cf4e:	4b90      	ldr	r3, [pc, #576]	; (800d190 <tcp_slowtmr+0x268>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cf54:	e29d      	b.n	800d492 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	7d1b      	ldrb	r3, [r3, #20]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <tcp_slowtmr+0x44>
 800cf5e:	4b8d      	ldr	r3, [pc, #564]	; (800d194 <tcp_slowtmr+0x26c>)
 800cf60:	f240 42be 	movw	r2, #1214	; 0x4be
 800cf64:	498c      	ldr	r1, [pc, #560]	; (800d198 <tcp_slowtmr+0x270>)
 800cf66:	488d      	ldr	r0, [pc, #564]	; (800d19c <tcp_slowtmr+0x274>)
 800cf68:	f008 fe18 	bl	8015b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d106      	bne.n	800cf82 <tcp_slowtmr+0x5a>
 800cf74:	4b87      	ldr	r3, [pc, #540]	; (800d194 <tcp_slowtmr+0x26c>)
 800cf76:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cf7a:	4989      	ldr	r1, [pc, #548]	; (800d1a0 <tcp_slowtmr+0x278>)
 800cf7c:	4887      	ldr	r0, [pc, #540]	; (800d19c <tcp_slowtmr+0x274>)
 800cf7e:	f008 fe0d 	bl	8015b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	7d1b      	ldrb	r3, [r3, #20]
 800cf86:	2b0a      	cmp	r3, #10
 800cf88:	d106      	bne.n	800cf98 <tcp_slowtmr+0x70>
 800cf8a:	4b82      	ldr	r3, [pc, #520]	; (800d194 <tcp_slowtmr+0x26c>)
 800cf8c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cf90:	4984      	ldr	r1, [pc, #528]	; (800d1a4 <tcp_slowtmr+0x27c>)
 800cf92:	4882      	ldr	r0, [pc, #520]	; (800d19c <tcp_slowtmr+0x274>)
 800cf94:	f008 fe02 	bl	8015b9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	7f9a      	ldrb	r2, [r3, #30]
 800cf9c:	4b7b      	ldr	r3, [pc, #492]	; (800d18c <tcp_slowtmr+0x264>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d105      	bne.n	800cfb0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cfae:	e270      	b.n	800d492 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cfb0:	4b76      	ldr	r3, [pc, #472]	; (800d18c <tcp_slowtmr+0x264>)
 800cfb2:	781a      	ldrb	r2, [r3, #0]
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	7d1b      	ldrb	r3, [r3, #20]
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d10a      	bne.n	800cfe2 <tcp_slowtmr+0xba>
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfd2:	2b05      	cmp	r3, #5
 800cfd4:	d905      	bls.n	800cfe2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfda:	3301      	adds	r3, #1
 800cfdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfe0:	e11e      	b.n	800d220 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfe8:	2b0b      	cmp	r3, #11
 800cfea:	d905      	bls.n	800cff8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cfec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff0:	3301      	adds	r3, #1
 800cff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cff6:	e113      	b.n	800d220 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d075      	beq.n	800d0ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d006:	2b00      	cmp	r3, #0
 800d008:	d006      	beq.n	800d018 <tcp_slowtmr+0xf0>
 800d00a:	4b62      	ldr	r3, [pc, #392]	; (800d194 <tcp_slowtmr+0x26c>)
 800d00c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d010:	4965      	ldr	r1, [pc, #404]	; (800d1a8 <tcp_slowtmr+0x280>)
 800d012:	4862      	ldr	r0, [pc, #392]	; (800d19c <tcp_slowtmr+0x274>)
 800d014:	f008 fdc2 	bl	8015b9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <tcp_slowtmr+0x106>
 800d020:	4b5c      	ldr	r3, [pc, #368]	; (800d194 <tcp_slowtmr+0x26c>)
 800d022:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d026:	4961      	ldr	r1, [pc, #388]	; (800d1ac <tcp_slowtmr+0x284>)
 800d028:	485c      	ldr	r0, [pc, #368]	; (800d19c <tcp_slowtmr+0x274>)
 800d02a:	f008 fdb7 	bl	8015b9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d034:	2b0b      	cmp	r3, #11
 800d036:	d905      	bls.n	800d044 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d03c:	3301      	adds	r3, #1
 800d03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d042:	e0ed      	b.n	800d220 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d046:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a58      	ldr	r2, [pc, #352]	; (800d1b0 <tcp_slowtmr+0x288>)
 800d04e:	5cd3      	ldrb	r3, [r2, r3]
 800d050:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d054:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d058:	7c7a      	ldrb	r2, [r7, #17]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d907      	bls.n	800d06e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d064:	3301      	adds	r3, #1
 800d066:	b2da      	uxtb	r2, r3
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d074:	7c7a      	ldrb	r2, [r7, #17]
 800d076:	429a      	cmp	r2, r3
 800d078:	f200 80d2 	bhi.w	800d220 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d07c:	2301      	movs	r3, #1
 800d07e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d086:	2b00      	cmp	r3, #0
 800d088:	d108      	bne.n	800d09c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d08c:	f005 f950 	bl	8012330 <tcp_zero_window_probe>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d014      	beq.n	800d0c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d096:	2300      	movs	r3, #0
 800d098:	623b      	str	r3, [r7, #32]
 800d09a:	e011      	b.n	800d0c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0a6:	f004 f815 	bl	80110d4 <tcp_split_unsent_seg>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d107      	bne.n	800d0c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0b2:	f004 fa95 	bl	80115e0 <tcp_output>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 80ac 	beq.w	800d220 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0d6:	2b06      	cmp	r3, #6
 800d0d8:	f200 80a2 	bhi.w	800d220 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d0ec:	e098      	b.n	800d220 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	db0f      	blt.n	800d118 <tcp_slowtmr+0x1f0>
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d0fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d102:	4293      	cmp	r3, r2
 800d104:	d008      	beq.n	800d118 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3301      	adds	r3, #1
 800d110:	b29b      	uxth	r3, r3
 800d112:	b21a      	sxth	r2, r3
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d120:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d124:	429a      	cmp	r2, r3
 800d126:	db7b      	blt.n	800d220 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d12a:	f004 fd4b 	bl	8011bc4 <tcp_rexmit_rto_prepare>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <tcp_slowtmr+0x21c>
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d171      	bne.n	800d220 <tcp_slowtmr+0x2f8>
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d140:	2b00      	cmp	r3, #0
 800d142:	d06d      	beq.n	800d220 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	7d1b      	ldrb	r3, [r3, #20]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d03a      	beq.n	800d1c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d152:	2b0c      	cmp	r3, #12
 800d154:	bf28      	it	cs
 800d156:	230c      	movcs	r3, #12
 800d158:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d160:	10db      	asrs	r3, r3, #3
 800d162:	b21b      	sxth	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d16c:	4413      	add	r3, r2
 800d16e:	7efa      	ldrb	r2, [r7, #27]
 800d170:	4910      	ldr	r1, [pc, #64]	; (800d1b4 <tcp_slowtmr+0x28c>)
 800d172:	5c8a      	ldrb	r2, [r1, r2]
 800d174:	4093      	lsls	r3, r2
 800d176:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d17e:	4293      	cmp	r3, r2
 800d180:	dc1a      	bgt.n	800d1b8 <tcp_slowtmr+0x290>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	b21a      	sxth	r2, r3
 800d186:	e019      	b.n	800d1bc <tcp_slowtmr+0x294>
 800d188:	2000eec8 	.word	0x2000eec8
 800d18c:	2000eede 	.word	0x2000eede
 800d190:	2000eed4 	.word	0x2000eed4
 800d194:	080183a4 	.word	0x080183a4
 800d198:	080186e8 	.word	0x080186e8
 800d19c:	080183e8 	.word	0x080183e8
 800d1a0:	08018714 	.word	0x08018714
 800d1a4:	08018740 	.word	0x08018740
 800d1a8:	08018770 	.word	0x08018770
 800d1ac:	080187a4 	.word	0x080187a4
 800d1b0:	0801a3c0 	.word	0x0801a3c0
 800d1b4:	0801a3b0 	.word	0x0801a3b0
 800d1b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	bf28      	it	cs
 800d1d8:	4613      	movcs	r3, r2
 800d1da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d1dc:	8a7b      	ldrh	r3, [r7, #18]
 800d1de:	085b      	lsrs	r3, r3, #1
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d206      	bcs.n	800d208 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	b29a      	uxth	r2, r3
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2200      	movs	r2, #0
 800d216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d21c:	f004 fd42 	bl	8011ca4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	7d1b      	ldrb	r3, [r3, #20]
 800d224:	2b06      	cmp	r3, #6
 800d226:	d111      	bne.n	800d24c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	8b5b      	ldrh	r3, [r3, #26]
 800d22c:	f003 0310 	and.w	r3, r3, #16
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00b      	beq.n	800d24c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d234:	4b9c      	ldr	r3, [pc, #624]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	2b28      	cmp	r3, #40	; 0x28
 800d240:	d904      	bls.n	800d24c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d246:	3301      	adds	r3, #1
 800d248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	7a5b      	ldrb	r3, [r3, #9]
 800d250:	f003 0308 	and.w	r3, r3, #8
 800d254:	2b00      	cmp	r3, #0
 800d256:	d04a      	beq.n	800d2ee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d25c:	2b04      	cmp	r3, #4
 800d25e:	d003      	beq.n	800d268 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d264:	2b07      	cmp	r3, #7
 800d266:	d142      	bne.n	800d2ee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d268:	4b8f      	ldr	r3, [pc, #572]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d278:	4b8c      	ldr	r3, [pc, #560]	; (800d4ac <tcp_slowtmr+0x584>)
 800d27a:	440b      	add	r3, r1
 800d27c:	498c      	ldr	r1, [pc, #560]	; (800d4b0 <tcp_slowtmr+0x588>)
 800d27e:	fba1 1303 	umull	r1, r3, r1, r3
 800d282:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d284:	429a      	cmp	r2, r3
 800d286:	d90a      	bls.n	800d29e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d28c:	3301      	adds	r3, #1
 800d28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d296:	3301      	adds	r3, #1
 800d298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d29c:	e027      	b.n	800d2ee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d29e:	4b82      	ldr	r3, [pc, #520]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a4:	6a1b      	ldr	r3, [r3, #32]
 800d2a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	4b7f      	ldr	r3, [pc, #508]	; (800d4b4 <tcp_slowtmr+0x58c>)
 800d2b8:	fb00 f303 	mul.w	r3, r0, r3
 800d2bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d2be:	497c      	ldr	r1, [pc, #496]	; (800d4b0 <tcp_slowtmr+0x588>)
 800d2c0:	fba1 1303 	umull	r1, r3, r1, r3
 800d2c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d911      	bls.n	800d2ee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d2ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2cc:	f004 fff0 	bl	80122b0 <tcp_keepalive>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d2d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d107      	bne.n	800d2ee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	b2da      	uxtb	r2, r3
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d011      	beq.n	800d31a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2f6:	4b6c      	ldr	r3, [pc, #432]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	6a1b      	ldr	r3, [r3, #32]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d306:	4619      	mov	r1, r3
 800d308:	460b      	mov	r3, r1
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	440b      	add	r3, r1
 800d30e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d310:	429a      	cmp	r2, r3
 800d312:	d302      	bcc.n	800d31a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d316:	f000 feab 	bl	800e070 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	7d1b      	ldrb	r3, [r3, #20]
 800d31e:	2b03      	cmp	r3, #3
 800d320:	d10b      	bne.n	800d33a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d322:	4b61      	ldr	r3, [pc, #388]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	2b28      	cmp	r3, #40	; 0x28
 800d32e:	d904      	bls.n	800d33a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d334:	3301      	adds	r3, #1
 800d336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	7d1b      	ldrb	r3, [r3, #20]
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d10b      	bne.n	800d35a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d342:	4b59      	ldr	r3, [pc, #356]	; (800d4a8 <tcp_slowtmr+0x580>)
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	2bf0      	cmp	r3, #240	; 0xf0
 800d34e:	d904      	bls.n	800d35a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d354:	3301      	adds	r3, #1
 800d356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d060      	beq.n	800d424 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d368:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d36c:	f000 fccc 	bl	800dd08 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	2b00      	cmp	r3, #0
 800d374:	d010      	beq.n	800d398 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d376:	4b50      	ldr	r3, [pc, #320]	; (800d4b8 <tcp_slowtmr+0x590>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d106      	bne.n	800d38e <tcp_slowtmr+0x466>
 800d380:	4b4e      	ldr	r3, [pc, #312]	; (800d4bc <tcp_slowtmr+0x594>)
 800d382:	f240 526d 	movw	r2, #1389	; 0x56d
 800d386:	494e      	ldr	r1, [pc, #312]	; (800d4c0 <tcp_slowtmr+0x598>)
 800d388:	484e      	ldr	r0, [pc, #312]	; (800d4c4 <tcp_slowtmr+0x59c>)
 800d38a:	f008 fc07 	bl	8015b9c <iprintf>
        prev->next = pcb->next;
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	68da      	ldr	r2, [r3, #12]
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d394:	60da      	str	r2, [r3, #12]
 800d396:	e00f      	b.n	800d3b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d398:	4b47      	ldr	r3, [pc, #284]	; (800d4b8 <tcp_slowtmr+0x590>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d006      	beq.n	800d3b0 <tcp_slowtmr+0x488>
 800d3a2:	4b46      	ldr	r3, [pc, #280]	; (800d4bc <tcp_slowtmr+0x594>)
 800d3a4:	f240 5271 	movw	r2, #1393	; 0x571
 800d3a8:	4947      	ldr	r1, [pc, #284]	; (800d4c8 <tcp_slowtmr+0x5a0>)
 800d3aa:	4846      	ldr	r0, [pc, #280]	; (800d4c4 <tcp_slowtmr+0x59c>)
 800d3ac:	f008 fbf6 	bl	8015b9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	4a40      	ldr	r2, [pc, #256]	; (800d4b8 <tcp_slowtmr+0x590>)
 800d3b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d3b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d013      	beq.n	800d3e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d3c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3d0:	8ad2      	ldrh	r2, [r2, #22]
 800d3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3d4:	8b09      	ldrh	r1, [r1, #24]
 800d3d6:	9102      	str	r1, [sp, #8]
 800d3d8:	9201      	str	r2, [sp, #4]
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	462b      	mov	r3, r5
 800d3de:	4622      	mov	r2, r4
 800d3e0:	4601      	mov	r1, r0
 800d3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3e4:	f004 feb0 	bl	8012148 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	7d1b      	ldrb	r3, [r3, #20]
 800d3f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d3fe:	6838      	ldr	r0, [r7, #0]
 800d400:	f7fe fff0 	bl	800c3e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d404:	4b31      	ldr	r3, [pc, #196]	; (800d4cc <tcp_slowtmr+0x5a4>)
 800d406:	2200      	movs	r2, #0
 800d408:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <tcp_slowtmr+0x4f2>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f06f 010c 	mvn.w	r1, #12
 800d416:	68b8      	ldr	r0, [r7, #8]
 800d418:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d41a:	4b2c      	ldr	r3, [pc, #176]	; (800d4cc <tcp_slowtmr+0x5a4>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d037      	beq.n	800d492 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d422:	e592      	b.n	800cf4a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	7f1b      	ldrb	r3, [r3, #28]
 800d432:	3301      	adds	r3, #1
 800d434:	b2da      	uxtb	r2, r3
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	7f1a      	ldrb	r2, [r3, #28]
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	7f5b      	ldrb	r3, [r3, #29]
 800d442:	429a      	cmp	r2, r3
 800d444:	d325      	bcc.n	800d492 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	2200      	movs	r2, #0
 800d44a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d44c:	4b1f      	ldr	r3, [pc, #124]	; (800d4cc <tcp_slowtmr+0x5a4>)
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00b      	beq.n	800d474 <tcp_slowtmr+0x54c>
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d464:	6912      	ldr	r2, [r2, #16]
 800d466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d468:	4610      	mov	r0, r2
 800d46a:	4798      	blx	r3
 800d46c:	4603      	mov	r3, r0
 800d46e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d472:	e002      	b.n	800d47a <tcp_slowtmr+0x552>
 800d474:	2300      	movs	r3, #0
 800d476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d47a:	4b14      	ldr	r3, [pc, #80]	; (800d4cc <tcp_slowtmr+0x5a4>)
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d000      	beq.n	800d484 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d482:	e562      	b.n	800cf4a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d484:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d48e:	f004 f8a7 	bl	80115e0 <tcp_output>
  while (pcb != NULL) {
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	2b00      	cmp	r3, #0
 800d496:	f47f ad5e 	bne.w	800cf56 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d49e:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <tcp_slowtmr+0x5a8>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d4a4:	e069      	b.n	800d57a <tcp_slowtmr+0x652>
 800d4a6:	bf00      	nop
 800d4a8:	2000eec8 	.word	0x2000eec8
 800d4ac:	000a4cb8 	.word	0x000a4cb8
 800d4b0:	10624dd3 	.word	0x10624dd3
 800d4b4:	000124f8 	.word	0x000124f8
 800d4b8:	2000eed4 	.word	0x2000eed4
 800d4bc:	080183a4 	.word	0x080183a4
 800d4c0:	080187dc 	.word	0x080187dc
 800d4c4:	080183e8 	.word	0x080183e8
 800d4c8:	08018808 	.word	0x08018808
 800d4cc:	2000eedc 	.word	0x2000eedc
 800d4d0:	2000eed8 	.word	0x2000eed8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b0a      	cmp	r3, #10
 800d4da:	d006      	beq.n	800d4ea <tcp_slowtmr+0x5c2>
 800d4dc:	4b2b      	ldr	r3, [pc, #172]	; (800d58c <tcp_slowtmr+0x664>)
 800d4de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d4e2:	492b      	ldr	r1, [pc, #172]	; (800d590 <tcp_slowtmr+0x668>)
 800d4e4:	482b      	ldr	r0, [pc, #172]	; (800d594 <tcp_slowtmr+0x66c>)
 800d4e6:	f008 fb59 	bl	8015b9c <iprintf>
    pcb_remove = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4f0:	4b29      	ldr	r3, [pc, #164]	; (800d598 <tcp_slowtmr+0x670>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	6a1b      	ldr	r3, [r3, #32]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	2bf0      	cmp	r3, #240	; 0xf0
 800d4fc:	d904      	bls.n	800d508 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d502:	3301      	adds	r3, #1
 800d504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d02f      	beq.n	800d570 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d512:	f000 fbf9 	bl	800dd08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d010      	beq.n	800d53e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d51c:	4b1f      	ldr	r3, [pc, #124]	; (800d59c <tcp_slowtmr+0x674>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d522:	429a      	cmp	r2, r3
 800d524:	d106      	bne.n	800d534 <tcp_slowtmr+0x60c>
 800d526:	4b19      	ldr	r3, [pc, #100]	; (800d58c <tcp_slowtmr+0x664>)
 800d528:	f240 52af 	movw	r2, #1455	; 0x5af
 800d52c:	491c      	ldr	r1, [pc, #112]	; (800d5a0 <tcp_slowtmr+0x678>)
 800d52e:	4819      	ldr	r0, [pc, #100]	; (800d594 <tcp_slowtmr+0x66c>)
 800d530:	f008 fb34 	bl	8015b9c <iprintf>
        prev->next = pcb->next;
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	60da      	str	r2, [r3, #12]
 800d53c:	e00f      	b.n	800d55e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d53e:	4b17      	ldr	r3, [pc, #92]	; (800d59c <tcp_slowtmr+0x674>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d544:	429a      	cmp	r2, r3
 800d546:	d006      	beq.n	800d556 <tcp_slowtmr+0x62e>
 800d548:	4b10      	ldr	r3, [pc, #64]	; (800d58c <tcp_slowtmr+0x664>)
 800d54a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d54e:	4915      	ldr	r1, [pc, #84]	; (800d5a4 <tcp_slowtmr+0x67c>)
 800d550:	4810      	ldr	r0, [pc, #64]	; (800d594 <tcp_slowtmr+0x66c>)
 800d552:	f008 fb23 	bl	8015b9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	4a10      	ldr	r2, [pc, #64]	; (800d59c <tcp_slowtmr+0x674>)
 800d55c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d568:	69f8      	ldr	r0, [r7, #28]
 800d56a:	f7fe ff3b 	bl	800c3e4 <tcp_free>
 800d56e:	e004      	b.n	800d57a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1a9      	bne.n	800d4d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	3730      	adds	r7, #48	; 0x30
 800d586:	46bd      	mov	sp, r7
 800d588:	bdb0      	pop	{r4, r5, r7, pc}
 800d58a:	bf00      	nop
 800d58c:	080183a4 	.word	0x080183a4
 800d590:	08018834 	.word	0x08018834
 800d594:	080183e8 	.word	0x080183e8
 800d598:	2000eec8 	.word	0x2000eec8
 800d59c:	2000eed8 	.word	0x2000eed8
 800d5a0:	08018864 	.word	0x08018864
 800d5a4:	0801888c 	.word	0x0801888c

0800d5a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d5ae:	4b2d      	ldr	r3, [pc, #180]	; (800d664 <tcp_fasttmr+0xbc>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	4b2b      	ldr	r3, [pc, #172]	; (800d664 <tcp_fasttmr+0xbc>)
 800d5b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d5ba:	4b2b      	ldr	r3, [pc, #172]	; (800d668 <tcp_fasttmr+0xc0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d5c0:	e048      	b.n	800d654 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7f9a      	ldrb	r2, [r3, #30]
 800d5c6:	4b27      	ldr	r3, [pc, #156]	; (800d664 <tcp_fasttmr+0xbc>)
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d03f      	beq.n	800d64e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d5ce:	4b25      	ldr	r3, [pc, #148]	; (800d664 <tcp_fasttmr+0xbc>)
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	8b5b      	ldrh	r3, [r3, #26]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d010      	beq.n	800d604 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	8b5b      	ldrh	r3, [r3, #26]
 800d5e6:	f043 0302 	orr.w	r3, r3, #2
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f003 fff5 	bl	80115e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	8b5b      	ldrh	r3, [r3, #26]
 800d5fa:	f023 0303 	bic.w	r3, r3, #3
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	8b5b      	ldrh	r3, [r3, #26]
 800d608:	f003 0308 	and.w	r3, r3, #8
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8b5b      	ldrh	r3, [r3, #26]
 800d614:	f023 0308 	bic.w	r3, r3, #8
 800d618:	b29a      	uxth	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff f874 	bl	800c70c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d632:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <tcp_fasttmr+0xc4>)
 800d634:	2200      	movs	r2, #0
 800d636:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f819 	bl	800d670 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d63e:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <tcp_fasttmr+0xc4>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d000      	beq.n	800d648 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d646:	e7b8      	b.n	800d5ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	607b      	str	r3, [r7, #4]
 800d64c:	e002      	b.n	800d654 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1b3      	bne.n	800d5c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d65a:	bf00      	nop
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	2000eede 	.word	0x2000eede
 800d668:	2000eed4 	.word	0x2000eed4
 800d66c:	2000eedc 	.word	0x2000eedc

0800d670 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d670:	b590      	push	{r4, r7, lr}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d109      	bne.n	800d692 <tcp_process_refused_data+0x22>
 800d67e:	4b37      	ldr	r3, [pc, #220]	; (800d75c <tcp_process_refused_data+0xec>)
 800d680:	f240 6209 	movw	r2, #1545	; 0x609
 800d684:	4936      	ldr	r1, [pc, #216]	; (800d760 <tcp_process_refused_data+0xf0>)
 800d686:	4837      	ldr	r0, [pc, #220]	; (800d764 <tcp_process_refused_data+0xf4>)
 800d688:	f008 fa88 	bl	8015b9c <iprintf>
 800d68c:	f06f 030f 	mvn.w	r3, #15
 800d690:	e060      	b.n	800d754 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d696:	7b5b      	ldrb	r3, [r3, #13]
 800d698:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d69e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00b      	beq.n	800d6c8 <tcp_process_refused_data+0x58>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6918      	ldr	r0, [r3, #16]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	6879      	ldr	r1, [r7, #4]
 800d6c0:	47a0      	blx	r4
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]
 800d6c6:	e007      	b.n	800d6d8 <tcp_process_refused_data+0x68>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	6879      	ldr	r1, [r7, #4]
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	f000 f8a4 	bl	800d81c <tcp_recv_null>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d6d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d12a      	bne.n	800d736 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d6e0:	7bbb      	ldrb	r3, [r7, #14]
 800d6e2:	f003 0320 	and.w	r3, r3, #32
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d033      	beq.n	800d752 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6f2:	d005      	beq.n	800d700 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <tcp_process_refused_data+0xb2>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6918      	ldr	r0, [r3, #16]
 800d714:	2300      	movs	r3, #0
 800d716:	2200      	movs	r2, #0
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	47a0      	blx	r4
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
 800d720:	e001      	b.n	800d726 <tcp_process_refused_data+0xb6>
 800d722:	2300      	movs	r3, #0
 800d724:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d72a:	f113 0f0d 	cmn.w	r3, #13
 800d72e:	d110      	bne.n	800d752 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d730:	f06f 030c 	mvn.w	r3, #12
 800d734:	e00e      	b.n	800d754 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d73a:	f113 0f0d 	cmn.w	r3, #13
 800d73e:	d102      	bne.n	800d746 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d740:	f06f 030c 	mvn.w	r3, #12
 800d744:	e006      	b.n	800d754 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68ba      	ldr	r2, [r7, #8]
 800d74a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d74c:	f06f 0304 	mvn.w	r3, #4
 800d750:	e000      	b.n	800d754 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd90      	pop	{r4, r7, pc}
 800d75c:	080183a4 	.word	0x080183a4
 800d760:	080188b4 	.word	0x080188b4
 800d764:	080183e8 	.word	0x080183e8

0800d768 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d770:	e007      	b.n	800d782 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f000 f80a 	bl	800d792 <tcp_seg_free>
    seg = next;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1f4      	bne.n	800d772 <tcp_segs_free+0xa>
  }
}
 800d788:	bf00      	nop
 800d78a:	bf00      	nop
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00c      	beq.n	800d7ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fb6d 	bl	800be8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	2003      	movs	r0, #3
 800d7b6:	f7fd fcc5 	bl	800b144 <memp_free>
  }
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <tcp_seg_copy+0x1c>
 800d7d2:	4b0f      	ldr	r3, [pc, #60]	; (800d810 <tcp_seg_copy+0x4c>)
 800d7d4:	f240 6282 	movw	r2, #1666	; 0x682
 800d7d8:	490e      	ldr	r1, [pc, #56]	; (800d814 <tcp_seg_copy+0x50>)
 800d7da:	480f      	ldr	r0, [pc, #60]	; (800d818 <tcp_seg_copy+0x54>)
 800d7dc:	f008 f9de 	bl	8015b9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d7e0:	2003      	movs	r0, #3
 800d7e2:	f7fd fc39 	bl	800b058 <memp_malloc>
 800d7e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <tcp_seg_copy+0x2e>
    return NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e00a      	b.n	800d808 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d7f2:	2210      	movs	r2, #16
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f008 f8c0 	bl	801597c <memcpy>
  pbuf_ref(cseg->p);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe fbe9 	bl	800bfd8 <pbuf_ref>
  return cseg;
 800d806:	68fb      	ldr	r3, [r7, #12]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	080183a4 	.word	0x080183a4
 800d814:	080188f8 	.word	0x080188f8
 800d818:	080183e8 	.word	0x080183e8

0800d81c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <tcp_recv_null+0x28>
 800d830:	4b12      	ldr	r3, [pc, #72]	; (800d87c <tcp_recv_null+0x60>)
 800d832:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d836:	4912      	ldr	r1, [pc, #72]	; (800d880 <tcp_recv_null+0x64>)
 800d838:	4812      	ldr	r0, [pc, #72]	; (800d884 <tcp_recv_null+0x68>)
 800d83a:	f008 f9af 	bl	8015b9c <iprintf>
 800d83e:	f06f 030f 	mvn.w	r3, #15
 800d842:	e016      	b.n	800d872 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d009      	beq.n	800d85e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	891b      	ldrh	r3, [r3, #8]
 800d84e:	4619      	mov	r1, r3
 800d850:	68b8      	ldr	r0, [r7, #8]
 800d852:	f7ff fad3 	bl	800cdfc <tcp_recved>
    pbuf_free(p);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7fe fb18 	bl	800be8c <pbuf_free>
 800d85c:	e008      	b.n	800d870 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d85e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d104      	bne.n	800d870 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d866:	68b8      	ldr	r0, [r7, #8]
 800d868:	f7fe ffba 	bl	800c7e0 <tcp_close>
 800d86c:	4603      	mov	r3, r0
 800d86e:	e000      	b.n	800d872 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	080183a4 	.word	0x080183a4
 800d880:	08018914 	.word	0x08018914
 800d884:	080183e8 	.word	0x080183e8

0800d888 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d896:	2b00      	cmp	r3, #0
 800d898:	db01      	blt.n	800d89e <tcp_kill_prio+0x16>
 800d89a:	79fb      	ldrb	r3, [r7, #7]
 800d89c:	e000      	b.n	800d8a0 <tcp_kill_prio+0x18>
 800d89e:	237f      	movs	r3, #127	; 0x7f
 800d8a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d034      	beq.n	800d912 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8b6:	4b19      	ldr	r3, [pc, #100]	; (800d91c <tcp_kill_prio+0x94>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	617b      	str	r3, [r7, #20]
 800d8bc:	e01f      	b.n	800d8fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	7d5b      	ldrb	r3, [r3, #21]
 800d8c2:	7afa      	ldrb	r2, [r7, #11]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d80c      	bhi.n	800d8e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d8cc:	7afa      	ldrb	r2, [r7, #11]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d112      	bne.n	800d8f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8d2:	4b13      	ldr	r3, [pc, #76]	; (800d920 <tcp_kill_prio+0x98>)
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d80a      	bhi.n	800d8f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <tcp_kill_prio+0x98>)
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	7d5b      	ldrb	r3, [r3, #21]
 800d8f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	617b      	str	r3, [r7, #20]
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1dc      	bne.n	800d8be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d004      	beq.n	800d914 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d90a:	6938      	ldr	r0, [r7, #16]
 800d90c:	f7ff f8ae 	bl	800ca6c <tcp_abort>
 800d910:	e000      	b.n	800d914 <tcp_kill_prio+0x8c>
    return;
 800d912:	bf00      	nop
  }
}
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	2000eed4 	.word	0x2000eed4
 800d920:	2000eec8 	.word	0x2000eec8

0800d924 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	2b08      	cmp	r3, #8
 800d932:	d009      	beq.n	800d948 <tcp_kill_state+0x24>
 800d934:	79fb      	ldrb	r3, [r7, #7]
 800d936:	2b09      	cmp	r3, #9
 800d938:	d006      	beq.n	800d948 <tcp_kill_state+0x24>
 800d93a:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <tcp_kill_state+0x80>)
 800d93c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d940:	4919      	ldr	r1, [pc, #100]	; (800d9a8 <tcp_kill_state+0x84>)
 800d942:	481a      	ldr	r0, [pc, #104]	; (800d9ac <tcp_kill_state+0x88>)
 800d944:	f008 f92a 	bl	8015b9c <iprintf>

  inactivity = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d94c:	2300      	movs	r3, #0
 800d94e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d950:	4b17      	ldr	r3, [pc, #92]	; (800d9b0 <tcp_kill_state+0x8c>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	617b      	str	r3, [r7, #20]
 800d956:	e017      	b.n	800d988 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	7d1b      	ldrb	r3, [r3, #20]
 800d95c:	79fa      	ldrb	r2, [r7, #7]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d10f      	bne.n	800d982 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d962:	4b14      	ldr	r3, [pc, #80]	; (800d9b4 <tcp_kill_state+0x90>)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d807      	bhi.n	800d982 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d972:	4b10      	ldr	r3, [pc, #64]	; (800d9b4 <tcp_kill_state+0x90>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	617b      	str	r3, [r7, #20]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1e4      	bne.n	800d958 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d994:	2100      	movs	r1, #0
 800d996:	6938      	ldr	r0, [r7, #16]
 800d998:	f7fe ffaa 	bl	800c8f0 <tcp_abandon>
  }
}
 800d99c:	bf00      	nop
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	080183a4 	.word	0x080183a4
 800d9a8:	08018930 	.word	0x08018930
 800d9ac:	080183e8 	.word	0x080183e8
 800d9b0:	2000eed4 	.word	0x2000eed4
 800d9b4:	2000eec8 	.word	0x2000eec8

0800d9b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9c6:	4b12      	ldr	r3, [pc, #72]	; (800da10 <tcp_kill_timewait+0x58>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	60fb      	str	r3, [r7, #12]
 800d9cc:	e012      	b.n	800d9f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9ce:	4b11      	ldr	r3, [pc, #68]	; (800da14 <tcp_kill_timewait+0x5c>)
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d807      	bhi.n	800d9ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9de:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <tcp_kill_timewait+0x5c>)
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1e9      	bne.n	800d9ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800da00:	68b8      	ldr	r0, [r7, #8]
 800da02:	f7ff f833 	bl	800ca6c <tcp_abort>
  }
}
 800da06:	bf00      	nop
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	2000eed8 	.word	0x2000eed8
 800da14:	2000eec8 	.word	0x2000eec8

0800da18 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800da1e:	4b10      	ldr	r3, [pc, #64]	; (800da60 <tcp_handle_closepend+0x48>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da24:	e014      	b.n	800da50 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8b5b      	ldrh	r3, [r3, #26]
 800da30:	f003 0308 	and.w	r3, r3, #8
 800da34:	2b00      	cmp	r3, #0
 800da36:	d009      	beq.n	800da4c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8b5b      	ldrh	r3, [r3, #26]
 800da3c:	f023 0308 	bic.w	r3, r3, #8
 800da40:	b29a      	uxth	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7fe fe60 	bl	800c70c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1e7      	bne.n	800da26 <tcp_handle_closepend+0xe>
  }
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	2000eed4 	.word	0x2000eed4

0800da64 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da6e:	2001      	movs	r0, #1
 800da70:	f7fd faf2 	bl	800b058 <memp_malloc>
 800da74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d126      	bne.n	800daca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da7c:	f7ff ffcc 	bl	800da18 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da80:	f7ff ff9a 	bl	800d9b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da84:	2001      	movs	r0, #1
 800da86:	f7fd fae7 	bl	800b058 <memp_malloc>
 800da8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d11b      	bne.n	800daca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da92:	2009      	movs	r0, #9
 800da94:	f7ff ff46 	bl	800d924 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da98:	2001      	movs	r0, #1
 800da9a:	f7fd fadd 	bl	800b058 <memp_malloc>
 800da9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d111      	bne.n	800daca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800daa6:	2008      	movs	r0, #8
 800daa8:	f7ff ff3c 	bl	800d924 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800daac:	2001      	movs	r0, #1
 800daae:	f7fd fad3 	bl	800b058 <memp_malloc>
 800dab2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d107      	bne.n	800daca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800daba:	79fb      	ldrb	r3, [r7, #7]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff fee3 	bl	800d888 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dac2:	2001      	movs	r0, #1
 800dac4:	f7fd fac8 	bl	800b058 <memp_malloc>
 800dac8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d03f      	beq.n	800db50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dad0:	229c      	movs	r2, #156	; 0x9c
 800dad2:	2100      	movs	r1, #0
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f007 ff79 	bl	80159cc <memset>
    pcb->prio = prio;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	79fa      	ldrb	r2, [r7, #7]
 800dade:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dae6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800daf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	22ff      	movs	r2, #255	; 0xff
 800dafe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f44f 7206 	mov.w	r2, #536	; 0x218
 800db06:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2206      	movs	r2, #6
 800db0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2206      	movs	r2, #6
 800db14:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db1c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2201      	movs	r2, #1
 800db22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800db26:	4b0d      	ldr	r3, [pc, #52]	; (800db5c <tcp_alloc+0xf8>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800db2e:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <tcp_alloc+0xfc>)
 800db30:	781a      	ldrb	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800db3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a08      	ldr	r2, [pc, #32]	; (800db64 <tcp_alloc+0x100>)
 800db44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	4a07      	ldr	r2, [pc, #28]	; (800db68 <tcp_alloc+0x104>)
 800db4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db50:	68fb      	ldr	r3, [r7, #12]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	2000eec8 	.word	0x2000eec8
 800db60:	2000eede 	.word	0x2000eede
 800db64:	0800d81d 	.word	0x0800d81d
 800db68:	006ddd00 	.word	0x006ddd00

0800db6c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800db76:	2040      	movs	r0, #64	; 0x40
 800db78:	f7ff ff74 	bl	800da64 <tcp_alloc>
 800db7c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800db7e:	68fb      	ldr	r3, [r7, #12]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	611a      	str	r2, [r3, #16]
  }
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
	...

0800dbac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00e      	beq.n	800dbda <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	7d1b      	ldrb	r3, [r3, #20]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d106      	bne.n	800dbd2 <tcp_recv+0x26>
 800dbc4:	4b07      	ldr	r3, [pc, #28]	; (800dbe4 <tcp_recv+0x38>)
 800dbc6:	f240 72df 	movw	r2, #2015	; 0x7df
 800dbca:	4907      	ldr	r1, [pc, #28]	; (800dbe8 <tcp_recv+0x3c>)
 800dbcc:	4807      	ldr	r0, [pc, #28]	; (800dbec <tcp_recv+0x40>)
 800dbce:	f007 ffe5 	bl	8015b9c <iprintf>
    pcb->recv = recv;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	683a      	ldr	r2, [r7, #0]
 800dbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	080183a4 	.word	0x080183a4
 800dbe8:	08018940 	.word	0x08018940
 800dbec:	080183e8 	.word	0x080183e8

0800dbf0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00e      	beq.n	800dc1e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d106      	bne.n	800dc16 <tcp_sent+0x26>
 800dc08:	4b07      	ldr	r3, [pc, #28]	; (800dc28 <tcp_sent+0x38>)
 800dc0a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800dc0e:	4907      	ldr	r1, [pc, #28]	; (800dc2c <tcp_sent+0x3c>)
 800dc10:	4807      	ldr	r0, [pc, #28]	; (800dc30 <tcp_sent+0x40>)
 800dc12:	f007 ffc3 	bl	8015b9c <iprintf>
    pcb->sent = sent;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	080183a4 	.word	0x080183a4
 800dc2c:	08018968 	.word	0x08018968
 800dc30:	080183e8 	.word	0x080183e8

0800dc34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00e      	beq.n	800dc62 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d106      	bne.n	800dc5a <tcp_err+0x26>
 800dc4c:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <tcp_err+0x38>)
 800dc4e:	f640 020d 	movw	r2, #2061	; 0x80d
 800dc52:	4907      	ldr	r1, [pc, #28]	; (800dc70 <tcp_err+0x3c>)
 800dc54:	4807      	ldr	r0, [pc, #28]	; (800dc74 <tcp_err+0x40>)
 800dc56:	f007 ffa1 	bl	8015b9c <iprintf>
    pcb->errf = err;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dc62:	bf00      	nop
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	080183a4 	.word	0x080183a4
 800dc70:	08018990 	.word	0x08018990
 800dc74:	080183e8 	.word	0x080183e8

0800dc78 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d008      	beq.n	800dc9a <tcp_accept+0x22>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7d1b      	ldrb	r3, [r3, #20]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d104      	bne.n	800dc9a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	619a      	str	r2, [r3, #24]
  }
}
 800dc9a:	bf00      	nop
 800dc9c:	3714      	adds	r7, #20
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr
	...

0800dca8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d107      	bne.n	800dccc <tcp_poll+0x24>
 800dcbc:	4b0e      	ldr	r3, [pc, #56]	; (800dcf8 <tcp_poll+0x50>)
 800dcbe:	f640 023d 	movw	r2, #2109	; 0x83d
 800dcc2:	490e      	ldr	r1, [pc, #56]	; (800dcfc <tcp_poll+0x54>)
 800dcc4:	480e      	ldr	r0, [pc, #56]	; (800dd00 <tcp_poll+0x58>)
 800dcc6:	f007 ff69 	bl	8015b9c <iprintf>
 800dcca:	e011      	b.n	800dcf0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	7d1b      	ldrb	r3, [r3, #20]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d106      	bne.n	800dce2 <tcp_poll+0x3a>
 800dcd4:	4b08      	ldr	r3, [pc, #32]	; (800dcf8 <tcp_poll+0x50>)
 800dcd6:	f640 023e 	movw	r2, #2110	; 0x83e
 800dcda:	490a      	ldr	r1, [pc, #40]	; (800dd04 <tcp_poll+0x5c>)
 800dcdc:	4808      	ldr	r0, [pc, #32]	; (800dd00 <tcp_poll+0x58>)
 800dcde:	f007 ff5d 	bl	8015b9c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	79fa      	ldrb	r2, [r7, #7]
 800dcee:	775a      	strb	r2, [r3, #29]
}
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	080183a4 	.word	0x080183a4
 800dcfc:	080189b8 	.word	0x080189b8
 800dd00:	080183e8 	.word	0x080183e8
 800dd04:	080189d0 	.word	0x080189d0

0800dd08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <tcp_pcb_purge+0x1e>
 800dd16:	4b21      	ldr	r3, [pc, #132]	; (800dd9c <tcp_pcb_purge+0x94>)
 800dd18:	f640 0251 	movw	r2, #2129	; 0x851
 800dd1c:	4920      	ldr	r1, [pc, #128]	; (800dda0 <tcp_pcb_purge+0x98>)
 800dd1e:	4821      	ldr	r0, [pc, #132]	; (800dda4 <tcp_pcb_purge+0x9c>)
 800dd20:	f007 ff3c 	bl	8015b9c <iprintf>
 800dd24:	e037      	b.n	800dd96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	7d1b      	ldrb	r3, [r3, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d033      	beq.n	800dd96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd32:	2b0a      	cmp	r3, #10
 800dd34:	d02f      	beq.n	800dd96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d02b      	beq.n	800dd96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d007      	beq.n	800dd56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe f89e 	bl	800be8c <pbuf_free>
      pcb->refused_data = NULL;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f986 	bl	800e070 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd6a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff fcf9 	bl	800d768 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7ff fcf4 	bl	800d768 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	080183a4 	.word	0x080183a4
 800dda0:	080189f0 	.word	0x080189f0
 800dda4:	080183e8 	.word	0x080183e8

0800dda8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d106      	bne.n	800ddc6 <tcp_pcb_remove+0x1e>
 800ddb8:	4b3e      	ldr	r3, [pc, #248]	; (800deb4 <tcp_pcb_remove+0x10c>)
 800ddba:	f640 0283 	movw	r2, #2179	; 0x883
 800ddbe:	493e      	ldr	r1, [pc, #248]	; (800deb8 <tcp_pcb_remove+0x110>)
 800ddc0:	483e      	ldr	r0, [pc, #248]	; (800debc <tcp_pcb_remove+0x114>)
 800ddc2:	f007 feeb 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d106      	bne.n	800ddda <tcp_pcb_remove+0x32>
 800ddcc:	4b39      	ldr	r3, [pc, #228]	; (800deb4 <tcp_pcb_remove+0x10c>)
 800ddce:	f640 0284 	movw	r2, #2180	; 0x884
 800ddd2:	493b      	ldr	r1, [pc, #236]	; (800dec0 <tcp_pcb_remove+0x118>)
 800ddd4:	4839      	ldr	r0, [pc, #228]	; (800debc <tcp_pcb_remove+0x114>)
 800ddd6:	f007 fee1 	bl	8015b9c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d105      	bne.n	800ddf0 <tcp_pcb_remove+0x48>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	e013      	b.n	800de18 <tcp_pcb_remove+0x70>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e00c      	b.n	800de12 <tcp_pcb_remove+0x6a>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d104      	bne.n	800de0c <tcp_pcb_remove+0x64>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	e005      	b.n	800de18 <tcp_pcb_remove+0x70>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1ef      	bne.n	800ddf8 <tcp_pcb_remove+0x50>
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	2200      	movs	r2, #0
 800de1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800de1e:	6838      	ldr	r0, [r7, #0]
 800de20:	f7ff ff72 	bl	800dd08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	7d1b      	ldrb	r3, [r3, #20]
 800de28:	2b0a      	cmp	r3, #10
 800de2a:	d013      	beq.n	800de54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de30:	2b01      	cmp	r3, #1
 800de32:	d00f      	beq.n	800de54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	8b5b      	ldrh	r3, [r3, #26]
 800de38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d009      	beq.n	800de54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	8b5b      	ldrh	r3, [r3, #26]
 800de44:	f043 0302 	orr.w	r3, r3, #2
 800de48:	b29a      	uxth	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de4e:	6838      	ldr	r0, [r7, #0]
 800de50:	f003 fbc6 	bl	80115e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	7d1b      	ldrb	r3, [r3, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d020      	beq.n	800de9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d006      	beq.n	800de72 <tcp_pcb_remove+0xca>
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <tcp_pcb_remove+0x10c>)
 800de66:	f640 0293 	movw	r2, #2195	; 0x893
 800de6a:	4916      	ldr	r1, [pc, #88]	; (800dec4 <tcp_pcb_remove+0x11c>)
 800de6c:	4813      	ldr	r0, [pc, #76]	; (800debc <tcp_pcb_remove+0x114>)
 800de6e:	f007 fe95 	bl	8015b9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de76:	2b00      	cmp	r3, #0
 800de78:	d006      	beq.n	800de88 <tcp_pcb_remove+0xe0>
 800de7a:	4b0e      	ldr	r3, [pc, #56]	; (800deb4 <tcp_pcb_remove+0x10c>)
 800de7c:	f640 0294 	movw	r2, #2196	; 0x894
 800de80:	4911      	ldr	r1, [pc, #68]	; (800dec8 <tcp_pcb_remove+0x120>)
 800de82:	480e      	ldr	r0, [pc, #56]	; (800debc <tcp_pcb_remove+0x114>)
 800de84:	f007 fe8a 	bl	8015b9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d006      	beq.n	800de9e <tcp_pcb_remove+0xf6>
 800de90:	4b08      	ldr	r3, [pc, #32]	; (800deb4 <tcp_pcb_remove+0x10c>)
 800de92:	f640 0296 	movw	r2, #2198	; 0x896
 800de96:	490d      	ldr	r1, [pc, #52]	; (800decc <tcp_pcb_remove+0x124>)
 800de98:	4808      	ldr	r0, [pc, #32]	; (800debc <tcp_pcb_remove+0x114>)
 800de9a:	f007 fe7f 	bl	8015b9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2200      	movs	r2, #0
 800dea2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	2200      	movs	r2, #0
 800dea8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800deaa:	bf00      	nop
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	080183a4 	.word	0x080183a4
 800deb8:	08018a0c 	.word	0x08018a0c
 800debc:	080183e8 	.word	0x080183e8
 800dec0:	08018a28 	.word	0x08018a28
 800dec4:	08018a48 	.word	0x08018a48
 800dec8:	08018a60 	.word	0x08018a60
 800decc:	08018a7c 	.word	0x08018a7c

0800ded0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <tcp_next_iss+0x1c>
 800dede:	4b0a      	ldr	r3, [pc, #40]	; (800df08 <tcp_next_iss+0x38>)
 800dee0:	f640 02af 	movw	r2, #2223	; 0x8af
 800dee4:	4909      	ldr	r1, [pc, #36]	; (800df0c <tcp_next_iss+0x3c>)
 800dee6:	480a      	ldr	r0, [pc, #40]	; (800df10 <tcp_next_iss+0x40>)
 800dee8:	f007 fe58 	bl	8015b9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800deec:	4b09      	ldr	r3, [pc, #36]	; (800df14 <tcp_next_iss+0x44>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	4b09      	ldr	r3, [pc, #36]	; (800df18 <tcp_next_iss+0x48>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4413      	add	r3, r2
 800def6:	4a07      	ldr	r2, [pc, #28]	; (800df14 <tcp_next_iss+0x44>)
 800def8:	6013      	str	r3, [r2, #0]
  return iss;
 800defa:	4b06      	ldr	r3, [pc, #24]	; (800df14 <tcp_next_iss+0x44>)
 800defc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800defe:	4618      	mov	r0, r3
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	080183a4 	.word	0x080183a4
 800df0c:	08018a94 	.word	0x08018a94
 800df10:	080183e8 	.word	0x080183e8
 800df14:	20000028 	.word	0x20000028
 800df18:	2000eec8 	.word	0x2000eec8

0800df1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b086      	sub	sp, #24
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	607a      	str	r2, [r7, #4]
 800df28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <tcp_eff_send_mss_netif+0x22>
 800df30:	4b14      	ldr	r3, [pc, #80]	; (800df84 <tcp_eff_send_mss_netif+0x68>)
 800df32:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800df36:	4914      	ldr	r1, [pc, #80]	; (800df88 <tcp_eff_send_mss_netif+0x6c>)
 800df38:	4814      	ldr	r0, [pc, #80]	; (800df8c <tcp_eff_send_mss_netif+0x70>)
 800df3a:	f007 fe2f 	bl	8015b9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df44:	89fb      	ldrh	r3, [r7, #14]
 800df46:	e019      	b.n	800df7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df4e:	8afb      	ldrh	r3, [r7, #22]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d012      	beq.n	800df7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df54:	2328      	movs	r3, #40	; 0x28
 800df56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df58:	8afa      	ldrh	r2, [r7, #22]
 800df5a:	8abb      	ldrh	r3, [r7, #20]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d904      	bls.n	800df6a <tcp_eff_send_mss_netif+0x4e>
 800df60:	8afa      	ldrh	r2, [r7, #22]
 800df62:	8abb      	ldrh	r3, [r7, #20]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	b29b      	uxth	r3, r3
 800df68:	e000      	b.n	800df6c <tcp_eff_send_mss_netif+0x50>
 800df6a:	2300      	movs	r3, #0
 800df6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df6e:	8a7a      	ldrh	r2, [r7, #18]
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	4293      	cmp	r3, r2
 800df74:	bf28      	it	cs
 800df76:	4613      	movcs	r3, r2
 800df78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800df7a:	89fb      	ldrh	r3, [r7, #14]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3718      	adds	r7, #24
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	080183a4 	.word	0x080183a4
 800df88:	08018ab0 	.word	0x08018ab0
 800df8c:	080183e8 	.word	0x080183e8

0800df90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d119      	bne.n	800dfd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dfa4:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dfa6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dfaa:	4910      	ldr	r1, [pc, #64]	; (800dfec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dfac:	4810      	ldr	r0, [pc, #64]	; (800dff0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dfae:	f007 fdf5 	bl	8015b9c <iprintf>

  while (pcb != NULL) {
 800dfb2:	e011      	b.n	800dfd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d108      	bne.n	800dfd2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f7fe fd50 	bl	800ca6c <tcp_abort>
      pcb = next;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	60fb      	str	r3, [r7, #12]
 800dfd0:	e002      	b.n	800dfd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1ea      	bne.n	800dfb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dfde:	bf00      	nop
 800dfe0:	bf00      	nop
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	080183a4 	.word	0x080183a4
 800dfec:	08018ad8 	.word	0x08018ad8
 800dff0:	080183e8 	.word	0x080183e8

0800dff4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d02a      	beq.n	800e05a <tcp_netif_ip_addr_changed+0x66>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d026      	beq.n	800e05a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e00c:	4b15      	ldr	r3, [pc, #84]	; (800e064 <tcp_netif_ip_addr_changed+0x70>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff ffbc 	bl	800df90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e018:	4b13      	ldr	r3, [pc, #76]	; (800e068 <tcp_netif_ip_addr_changed+0x74>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff ffb6 	bl	800df90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d017      	beq.n	800e05a <tcp_netif_ip_addr_changed+0x66>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d013      	beq.n	800e05a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <tcp_netif_ip_addr_changed+0x78>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	60fb      	str	r3, [r7, #12]
 800e038:	e00c      	b.n	800e054 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	429a      	cmp	r2, r3
 800e044:	d103      	bne.n	800e04e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1ef      	bne.n	800e03a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e05a:	bf00      	nop
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	2000eed4 	.word	0x2000eed4
 800e068:	2000eecc 	.word	0x2000eecc
 800e06c:	2000eed0 	.word	0x2000eed0

0800e070 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff fb6f 	bl	800d768 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e098:	b590      	push	{r4, r7, lr}
 800e09a:	b08d      	sub	sp, #52	; 0x34
 800e09c:	af04      	add	r7, sp, #16
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d105      	bne.n	800e0b4 <tcp_input+0x1c>
 800e0a8:	4b9b      	ldr	r3, [pc, #620]	; (800e318 <tcp_input+0x280>)
 800e0aa:	2283      	movs	r2, #131	; 0x83
 800e0ac:	499b      	ldr	r1, [pc, #620]	; (800e31c <tcp_input+0x284>)
 800e0ae:	489c      	ldr	r0, [pc, #624]	; (800e320 <tcp_input+0x288>)
 800e0b0:	f007 fd74 	bl	8015b9c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	4a9a      	ldr	r2, [pc, #616]	; (800e324 <tcp_input+0x28c>)
 800e0ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	895b      	ldrh	r3, [r3, #10]
 800e0c0:	2b13      	cmp	r3, #19
 800e0c2:	f240 83d1 	bls.w	800e868 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0c6:	4b98      	ldr	r3, [pc, #608]	; (800e328 <tcp_input+0x290>)
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	4a97      	ldr	r2, [pc, #604]	; (800e328 <tcp_input+0x290>)
 800e0cc:	6812      	ldr	r2, [r2, #0]
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f006 f9e5 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f040 83c7 	bne.w	800e86c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e0de:	4b92      	ldr	r3, [pc, #584]	; (800e328 <tcp_input+0x290>)
 800e0e0:	695b      	ldr	r3, [r3, #20]
 800e0e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0e6:	2be0      	cmp	r3, #224	; 0xe0
 800e0e8:	f000 83c0 	beq.w	800e86c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e0ec:	4b8d      	ldr	r3, [pc, #564]	; (800e324 <tcp_input+0x28c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	899b      	ldrh	r3, [r3, #12]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fc fad7 	bl	800a6a8 <lwip_htons>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	0b1b      	lsrs	r3, r3, #12
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	b2db      	uxtb	r3, r3
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e106:	7cbb      	ldrb	r3, [r7, #18]
 800e108:	2b13      	cmp	r3, #19
 800e10a:	f240 83b1 	bls.w	800e870 <tcp_input+0x7d8>
 800e10e:	7cbb      	ldrb	r3, [r7, #18]
 800e110:	b29a      	uxth	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	891b      	ldrh	r3, [r3, #8]
 800e116:	429a      	cmp	r2, r3
 800e118:	f200 83aa 	bhi.w	800e870 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e11c:	7cbb      	ldrb	r3, [r7, #18]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3b14      	subs	r3, #20
 800e122:	b29a      	uxth	r2, r3
 800e124:	4b81      	ldr	r3, [pc, #516]	; (800e32c <tcp_input+0x294>)
 800e126:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e128:	4b81      	ldr	r3, [pc, #516]	; (800e330 <tcp_input+0x298>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	895a      	ldrh	r2, [r3, #10]
 800e132:	7cbb      	ldrb	r3, [r7, #18]
 800e134:	b29b      	uxth	r3, r3
 800e136:	429a      	cmp	r2, r3
 800e138:	d309      	bcc.n	800e14e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e13a:	4b7c      	ldr	r3, [pc, #496]	; (800e32c <tcp_input+0x294>)
 800e13c:	881a      	ldrh	r2, [r3, #0]
 800e13e:	4b7d      	ldr	r3, [pc, #500]	; (800e334 <tcp_input+0x29c>)
 800e140:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e142:	7cbb      	ldrb	r3, [r7, #18]
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7fd fe1a 	bl	800bd80 <pbuf_remove_header>
 800e14c:	e04e      	b.n	800e1ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d105      	bne.n	800e162 <tcp_input+0xca>
 800e156:	4b70      	ldr	r3, [pc, #448]	; (800e318 <tcp_input+0x280>)
 800e158:	22c2      	movs	r2, #194	; 0xc2
 800e15a:	4977      	ldr	r1, [pc, #476]	; (800e338 <tcp_input+0x2a0>)
 800e15c:	4870      	ldr	r0, [pc, #448]	; (800e320 <tcp_input+0x288>)
 800e15e:	f007 fd1d 	bl	8015b9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e162:	2114      	movs	r1, #20
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7fd fe0b 	bl	800bd80 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	895a      	ldrh	r2, [r3, #10]
 800e16e:	4b71      	ldr	r3, [pc, #452]	; (800e334 <tcp_input+0x29c>)
 800e170:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e172:	4b6e      	ldr	r3, [pc, #440]	; (800e32c <tcp_input+0x294>)
 800e174:	881a      	ldrh	r2, [r3, #0]
 800e176:	4b6f      	ldr	r3, [pc, #444]	; (800e334 <tcp_input+0x29c>)
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e17e:	4b6d      	ldr	r3, [pc, #436]	; (800e334 <tcp_input+0x29c>)
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fd fdfb 	bl	800bd80 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	895b      	ldrh	r3, [r3, #10]
 800e190:	8a3a      	ldrh	r2, [r7, #16]
 800e192:	429a      	cmp	r2, r3
 800e194:	f200 836e 	bhi.w	800e874 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	4a64      	ldr	r2, [pc, #400]	; (800e330 <tcp_input+0x298>)
 800e1a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	8a3a      	ldrh	r2, [r7, #16]
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fd fde8 	bl	800bd80 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	891a      	ldrh	r2, [r3, #8]
 800e1b4:	8a3b      	ldrh	r3, [r7, #16]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	895b      	ldrh	r3, [r3, #10]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d005      	beq.n	800e1d2 <tcp_input+0x13a>
 800e1c6:	4b54      	ldr	r3, [pc, #336]	; (800e318 <tcp_input+0x280>)
 800e1c8:	22df      	movs	r2, #223	; 0xdf
 800e1ca:	495c      	ldr	r1, [pc, #368]	; (800e33c <tcp_input+0x2a4>)
 800e1cc:	4854      	ldr	r0, [pc, #336]	; (800e320 <tcp_input+0x288>)
 800e1ce:	f007 fce5 	bl	8015b9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	891a      	ldrh	r2, [r3, #8]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	891b      	ldrh	r3, [r3, #8]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d005      	beq.n	800e1ec <tcp_input+0x154>
 800e1e0:	4b4d      	ldr	r3, [pc, #308]	; (800e318 <tcp_input+0x280>)
 800e1e2:	22e0      	movs	r2, #224	; 0xe0
 800e1e4:	4956      	ldr	r1, [pc, #344]	; (800e340 <tcp_input+0x2a8>)
 800e1e6:	484e      	ldr	r0, [pc, #312]	; (800e320 <tcp_input+0x288>)
 800e1e8:	f007 fcd8 	bl	8015b9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e1ec:	4b4d      	ldr	r3, [pc, #308]	; (800e324 <tcp_input+0x28c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	4a4b      	ldr	r2, [pc, #300]	; (800e324 <tcp_input+0x28c>)
 800e1f6:	6814      	ldr	r4, [r2, #0]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc fa55 	bl	800a6a8 <lwip_htons>
 800e1fe:	4603      	mov	r3, r0
 800e200:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e202:	4b48      	ldr	r3, [pc, #288]	; (800e324 <tcp_input+0x28c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	885b      	ldrh	r3, [r3, #2]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	4a46      	ldr	r2, [pc, #280]	; (800e324 <tcp_input+0x28c>)
 800e20c:	6814      	ldr	r4, [r2, #0]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fc fa4a 	bl	800a6a8 <lwip_htons>
 800e214:	4603      	mov	r3, r0
 800e216:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e218:	4b42      	ldr	r3, [pc, #264]	; (800e324 <tcp_input+0x28c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	4a41      	ldr	r2, [pc, #260]	; (800e324 <tcp_input+0x28c>)
 800e220:	6814      	ldr	r4, [r2, #0]
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc fa55 	bl	800a6d2 <lwip_htonl>
 800e228:	4603      	mov	r3, r0
 800e22a:	6063      	str	r3, [r4, #4]
 800e22c:	6863      	ldr	r3, [r4, #4]
 800e22e:	4a45      	ldr	r2, [pc, #276]	; (800e344 <tcp_input+0x2ac>)
 800e230:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e232:	4b3c      	ldr	r3, [pc, #240]	; (800e324 <tcp_input+0x28c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	4a3a      	ldr	r2, [pc, #232]	; (800e324 <tcp_input+0x28c>)
 800e23a:	6814      	ldr	r4, [r2, #0]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fc fa48 	bl	800a6d2 <lwip_htonl>
 800e242:	4603      	mov	r3, r0
 800e244:	60a3      	str	r3, [r4, #8]
 800e246:	68a3      	ldr	r3, [r4, #8]
 800e248:	4a3f      	ldr	r2, [pc, #252]	; (800e348 <tcp_input+0x2b0>)
 800e24a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e24c:	4b35      	ldr	r3, [pc, #212]	; (800e324 <tcp_input+0x28c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	89db      	ldrh	r3, [r3, #14]
 800e252:	b29b      	uxth	r3, r3
 800e254:	4a33      	ldr	r2, [pc, #204]	; (800e324 <tcp_input+0x28c>)
 800e256:	6814      	ldr	r4, [r2, #0]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fc fa25 	bl	800a6a8 <lwip_htons>
 800e25e:	4603      	mov	r3, r0
 800e260:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e262:	4b30      	ldr	r3, [pc, #192]	; (800e324 <tcp_input+0x28c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc fa1c 	bl	800a6a8 <lwip_htons>
 800e270:	4603      	mov	r3, r0
 800e272:	b2db      	uxtb	r3, r3
 800e274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	4b34      	ldr	r3, [pc, #208]	; (800e34c <tcp_input+0x2b4>)
 800e27c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	891a      	ldrh	r2, [r3, #8]
 800e282:	4b33      	ldr	r3, [pc, #204]	; (800e350 <tcp_input+0x2b8>)
 800e284:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e286:	4b31      	ldr	r3, [pc, #196]	; (800e34c <tcp_input+0x2b4>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	f003 0303 	and.w	r3, r3, #3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00c      	beq.n	800e2ac <tcp_input+0x214>
    tcplen++;
 800e292:	4b2f      	ldr	r3, [pc, #188]	; (800e350 <tcp_input+0x2b8>)
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	3301      	adds	r3, #1
 800e298:	b29a      	uxth	r2, r3
 800e29a:	4b2d      	ldr	r3, [pc, #180]	; (800e350 <tcp_input+0x2b8>)
 800e29c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	891a      	ldrh	r2, [r3, #8]
 800e2a2:	4b2b      	ldr	r3, [pc, #172]	; (800e350 <tcp_input+0x2b8>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	f200 82e6 	bhi.w	800e878 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b0:	4b28      	ldr	r3, [pc, #160]	; (800e354 <tcp_input+0x2bc>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	61fb      	str	r3, [r7, #28]
 800e2b6:	e09d      	b.n	800e3f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	7d1b      	ldrb	r3, [r3, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d105      	bne.n	800e2cc <tcp_input+0x234>
 800e2c0:	4b15      	ldr	r3, [pc, #84]	; (800e318 <tcp_input+0x280>)
 800e2c2:	22fb      	movs	r2, #251	; 0xfb
 800e2c4:	4924      	ldr	r1, [pc, #144]	; (800e358 <tcp_input+0x2c0>)
 800e2c6:	4816      	ldr	r0, [pc, #88]	; (800e320 <tcp_input+0x288>)
 800e2c8:	f007 fc68 	bl	8015b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	7d1b      	ldrb	r3, [r3, #20]
 800e2d0:	2b0a      	cmp	r3, #10
 800e2d2:	d105      	bne.n	800e2e0 <tcp_input+0x248>
 800e2d4:	4b10      	ldr	r3, [pc, #64]	; (800e318 <tcp_input+0x280>)
 800e2d6:	22fc      	movs	r2, #252	; 0xfc
 800e2d8:	4920      	ldr	r1, [pc, #128]	; (800e35c <tcp_input+0x2c4>)
 800e2da:	4811      	ldr	r0, [pc, #68]	; (800e320 <tcp_input+0x288>)
 800e2dc:	f007 fc5e 	bl	8015b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	7d1b      	ldrb	r3, [r3, #20]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d105      	bne.n	800e2f4 <tcp_input+0x25c>
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <tcp_input+0x280>)
 800e2ea:	22fd      	movs	r2, #253	; 0xfd
 800e2ec:	491c      	ldr	r1, [pc, #112]	; (800e360 <tcp_input+0x2c8>)
 800e2ee:	480c      	ldr	r0, [pc, #48]	; (800e320 <tcp_input+0x288>)
 800e2f0:	f007 fc54 	bl	8015b9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	7a1b      	ldrb	r3, [r3, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d033      	beq.n	800e364 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	7a1a      	ldrb	r2, [r3, #8]
 800e300:	4b09      	ldr	r3, [pc, #36]	; (800e328 <tcp_input+0x290>)
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e308:	3301      	adds	r3, #1
 800e30a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d029      	beq.n	800e364 <tcp_input+0x2cc>
      prev = pcb;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	61bb      	str	r3, [r7, #24]
      continue;
 800e314:	e06b      	b.n	800e3ee <tcp_input+0x356>
 800e316:	bf00      	nop
 800e318:	08018b0c 	.word	0x08018b0c
 800e31c:	08018b40 	.word	0x08018b40
 800e320:	08018b58 	.word	0x08018b58
 800e324:	2000eef0 	.word	0x2000eef0
 800e328:	200095b4 	.word	0x200095b4
 800e32c:	2000eef4 	.word	0x2000eef4
 800e330:	2000eef8 	.word	0x2000eef8
 800e334:	2000eef6 	.word	0x2000eef6
 800e338:	08018b80 	.word	0x08018b80
 800e33c:	08018b90 	.word	0x08018b90
 800e340:	08018b9c 	.word	0x08018b9c
 800e344:	2000ef00 	.word	0x2000ef00
 800e348:	2000ef04 	.word	0x2000ef04
 800e34c:	2000ef0c 	.word	0x2000ef0c
 800e350:	2000ef0a 	.word	0x2000ef0a
 800e354:	2000eed4 	.word	0x2000eed4
 800e358:	08018bbc 	.word	0x08018bbc
 800e35c:	08018be4 	.word	0x08018be4
 800e360:	08018c10 	.word	0x08018c10
    }

    if (pcb->remote_port == tcphdr->src &&
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	8b1a      	ldrh	r2, [r3, #24]
 800e368:	4b72      	ldr	r3, [pc, #456]	; (800e534 <tcp_input+0x49c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	429a      	cmp	r2, r3
 800e372:	d13a      	bne.n	800e3ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	8ada      	ldrh	r2, [r3, #22]
 800e378:	4b6e      	ldr	r3, [pc, #440]	; (800e534 <tcp_input+0x49c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	885b      	ldrh	r3, [r3, #2]
 800e37e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e380:	429a      	cmp	r2, r3
 800e382:	d132      	bne.n	800e3ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	4b6b      	ldr	r3, [pc, #428]	; (800e538 <tcp_input+0x4a0>)
 800e38a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d12c      	bne.n	800e3ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	4b68      	ldr	r3, [pc, #416]	; (800e538 <tcp_input+0x4a0>)
 800e396:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e398:	429a      	cmp	r2, r3
 800e39a:	d126      	bne.n	800e3ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d106      	bne.n	800e3b4 <tcp_input+0x31c>
 800e3a6:	4b65      	ldr	r3, [pc, #404]	; (800e53c <tcp_input+0x4a4>)
 800e3a8:	f240 120d 	movw	r2, #269	; 0x10d
 800e3ac:	4964      	ldr	r1, [pc, #400]	; (800e540 <tcp_input+0x4a8>)
 800e3ae:	4865      	ldr	r0, [pc, #404]	; (800e544 <tcp_input+0x4ac>)
 800e3b0:	f007 fbf4 	bl	8015b9c <iprintf>
      if (prev != NULL) {
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e3c2:	4b61      	ldr	r3, [pc, #388]	; (800e548 <tcp_input+0x4b0>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3ca:	4a5f      	ldr	r2, [pc, #380]	; (800e548 <tcp_input+0x4b0>)
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	69fa      	ldr	r2, [r7, #28]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d111      	bne.n	800e3fe <tcp_input+0x366>
 800e3da:	4b58      	ldr	r3, [pc, #352]	; (800e53c <tcp_input+0x4a4>)
 800e3dc:	f240 1215 	movw	r2, #277	; 0x115
 800e3e0:	495a      	ldr	r1, [pc, #360]	; (800e54c <tcp_input+0x4b4>)
 800e3e2:	4858      	ldr	r0, [pc, #352]	; (800e544 <tcp_input+0x4ac>)
 800e3e4:	f007 fbda 	bl	8015b9c <iprintf>
      break;
 800e3e8:	e009      	b.n	800e3fe <tcp_input+0x366>
    }
    prev = pcb;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	61fb      	str	r3, [r7, #28]
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f47f af5e 	bne.w	800e2b8 <tcp_input+0x220>
 800e3fc:	e000      	b.n	800e400 <tcp_input+0x368>
      break;
 800e3fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2b00      	cmp	r3, #0
 800e404:	f040 80aa 	bne.w	800e55c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e408:	4b51      	ldr	r3, [pc, #324]	; (800e550 <tcp_input+0x4b8>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	61fb      	str	r3, [r7, #28]
 800e40e:	e03f      	b.n	800e490 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	2b0a      	cmp	r3, #10
 800e416:	d006      	beq.n	800e426 <tcp_input+0x38e>
 800e418:	4b48      	ldr	r3, [pc, #288]	; (800e53c <tcp_input+0x4a4>)
 800e41a:	f240 121f 	movw	r2, #287	; 0x11f
 800e41e:	494d      	ldr	r1, [pc, #308]	; (800e554 <tcp_input+0x4bc>)
 800e420:	4848      	ldr	r0, [pc, #288]	; (800e544 <tcp_input+0x4ac>)
 800e422:	f007 fbbb 	bl	8015b9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	7a1b      	ldrb	r3, [r3, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d009      	beq.n	800e442 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	7a1a      	ldrb	r2, [r3, #8]
 800e432:	4b41      	ldr	r3, [pc, #260]	; (800e538 <tcp_input+0x4a0>)
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e43a:	3301      	adds	r3, #1
 800e43c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e43e:	429a      	cmp	r2, r3
 800e440:	d122      	bne.n	800e488 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	8b1a      	ldrh	r2, [r3, #24]
 800e446:	4b3b      	ldr	r3, [pc, #236]	; (800e534 <tcp_input+0x49c>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	881b      	ldrh	r3, [r3, #0]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	429a      	cmp	r2, r3
 800e450:	d11b      	bne.n	800e48a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	8ada      	ldrh	r2, [r3, #22]
 800e456:	4b37      	ldr	r3, [pc, #220]	; (800e534 <tcp_input+0x49c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	885b      	ldrh	r3, [r3, #2]
 800e45c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e45e:	429a      	cmp	r2, r3
 800e460:	d113      	bne.n	800e48a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	685a      	ldr	r2, [r3, #4]
 800e466:	4b34      	ldr	r3, [pc, #208]	; (800e538 <tcp_input+0x4a0>)
 800e468:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d10d      	bne.n	800e48a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	4b31      	ldr	r3, [pc, #196]	; (800e538 <tcp_input+0x4a0>)
 800e474:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e476:	429a      	cmp	r2, r3
 800e478:	d107      	bne.n	800e48a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e47a:	69f8      	ldr	r0, [r7, #28]
 800e47c:	f000 fb56 	bl	800eb2c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7fd fd03 	bl	800be8c <pbuf_free>
        return;
 800e486:	e1fd      	b.n	800e884 <tcp_input+0x7ec>
        continue;
 800e488:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	61fb      	str	r3, [r7, #28]
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1bc      	bne.n	800e410 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e496:	2300      	movs	r3, #0
 800e498:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e49a:	4b2f      	ldr	r3, [pc, #188]	; (800e558 <tcp_input+0x4c0>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	617b      	str	r3, [r7, #20]
 800e4a0:	e02a      	b.n	800e4f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	7a1b      	ldrb	r3, [r3, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	7a1a      	ldrb	r2, [r3, #8]
 800e4ae:	4b22      	ldr	r3, [pc, #136]	; (800e538 <tcp_input+0x4a0>)
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d002      	beq.n	800e4c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	61bb      	str	r3, [r7, #24]
        continue;
 800e4c2:	e016      	b.n	800e4f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	8ada      	ldrh	r2, [r3, #22]
 800e4c8:	4b1a      	ldr	r3, [pc, #104]	; (800e534 <tcp_input+0x49c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	885b      	ldrh	r3, [r3, #2]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d10c      	bne.n	800e4ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	4b17      	ldr	r3, [pc, #92]	; (800e538 <tcp_input+0x4a0>)
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d00f      	beq.n	800e500 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00d      	beq.n	800e502 <tcp_input+0x46a>
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d009      	beq.n	800e502 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1d1      	bne.n	800e4a2 <tcp_input+0x40a>
 800e4fe:	e000      	b.n	800e502 <tcp_input+0x46a>
            break;
 800e500:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d029      	beq.n	800e55c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	68da      	ldr	r2, [r3, #12]
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e516:	4b10      	ldr	r3, [pc, #64]	; (800e558 <tcp_input+0x4c0>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e51e:	4a0e      	ldr	r2, [pc, #56]	; (800e558 <tcp_input+0x4c0>)
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f000 fa03 	bl	800e930 <tcp_listen_input>
      }
      pbuf_free(p);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7fd fcae 	bl	800be8c <pbuf_free>
      return;
 800e530:	e1a8      	b.n	800e884 <tcp_input+0x7ec>
 800e532:	bf00      	nop
 800e534:	2000eef0 	.word	0x2000eef0
 800e538:	200095b4 	.word	0x200095b4
 800e53c:	08018b0c 	.word	0x08018b0c
 800e540:	08018c38 	.word	0x08018c38
 800e544:	08018b58 	.word	0x08018b58
 800e548:	2000eed4 	.word	0x2000eed4
 800e54c:	08018c64 	.word	0x08018c64
 800e550:	2000eed8 	.word	0x2000eed8
 800e554:	08018c90 	.word	0x08018c90
 800e558:	2000eed0 	.word	0x2000eed0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 8158 	beq.w	800e814 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e564:	4b95      	ldr	r3, [pc, #596]	; (800e7bc <tcp_input+0x724>)
 800e566:	2200      	movs	r2, #0
 800e568:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	891a      	ldrh	r2, [r3, #8]
 800e56e:	4b93      	ldr	r3, [pc, #588]	; (800e7bc <tcp_input+0x724>)
 800e570:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e572:	4a92      	ldr	r2, [pc, #584]	; (800e7bc <tcp_input+0x724>)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e578:	4b91      	ldr	r3, [pc, #580]	; (800e7c0 <tcp_input+0x728>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a8f      	ldr	r2, [pc, #572]	; (800e7bc <tcp_input+0x724>)
 800e57e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e580:	4b90      	ldr	r3, [pc, #576]	; (800e7c4 <tcp_input+0x72c>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e586:	4b90      	ldr	r3, [pc, #576]	; (800e7c8 <tcp_input+0x730>)
 800e588:	2200      	movs	r2, #0
 800e58a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e58c:	4b8f      	ldr	r3, [pc, #572]	; (800e7cc <tcp_input+0x734>)
 800e58e:	2200      	movs	r2, #0
 800e590:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e592:	4b8f      	ldr	r3, [pc, #572]	; (800e7d0 <tcp_input+0x738>)
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	f003 0308 	and.w	r3, r3, #8
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	7b5b      	ldrb	r3, [r3, #13]
 800e5a2:	f043 0301 	orr.w	r3, r3, #1
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d017      	beq.n	800e5e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5b4:	69f8      	ldr	r0, [r7, #28]
 800e5b6:	f7ff f85b 	bl	800d670 <tcp_process_refused_data>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f113 0f0d 	cmn.w	r3, #13
 800e5c0:	d007      	beq.n	800e5d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00c      	beq.n	800e5e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5ca:	4b82      	ldr	r3, [pc, #520]	; (800e7d4 <tcp_input+0x73c>)
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f040 80e3 	bne.w	800e7a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e5dc:	69f8      	ldr	r0, [r7, #28]
 800e5de:	f003 fe05 	bl	80121ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e5e2:	e0de      	b.n	800e7a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e5e4:	4a7c      	ldr	r2, [pc, #496]	; (800e7d8 <tcp_input+0x740>)
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e5ea:	69f8      	ldr	r0, [r7, #28]
 800e5ec:	f000 fb18 	bl	800ec20 <tcp_process>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e5f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5f8:	f113 0f0d 	cmn.w	r3, #13
 800e5fc:	f000 80d3 	beq.w	800e7a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e600:	4b71      	ldr	r3, [pc, #452]	; (800e7c8 <tcp_input+0x730>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 0308 	and.w	r3, r3, #8
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d015      	beq.n	800e638 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e612:	2b00      	cmp	r3, #0
 800e614:	d008      	beq.n	800e628 <tcp_input+0x590>
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e61c:	69fa      	ldr	r2, [r7, #28]
 800e61e:	6912      	ldr	r2, [r2, #16]
 800e620:	f06f 010d 	mvn.w	r1, #13
 800e624:	4610      	mov	r0, r2
 800e626:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e628:	69f9      	ldr	r1, [r7, #28]
 800e62a:	486c      	ldr	r0, [pc, #432]	; (800e7dc <tcp_input+0x744>)
 800e62c:	f7ff fbbc 	bl	800dda8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e630:	69f8      	ldr	r0, [r7, #28]
 800e632:	f7fd fed7 	bl	800c3e4 <tcp_free>
 800e636:	e0da      	b.n	800e7ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e63c:	4b63      	ldr	r3, [pc, #396]	; (800e7cc <tcp_input+0x734>)
 800e63e:	881b      	ldrh	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d01d      	beq.n	800e680 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e644:	4b61      	ldr	r3, [pc, #388]	; (800e7cc <tcp_input+0x734>)
 800e646:	881b      	ldrh	r3, [r3, #0]
 800e648:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00a      	beq.n	800e66a <tcp_input+0x5d2>
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	6910      	ldr	r0, [r2, #16]
 800e65e:	89fa      	ldrh	r2, [r7, #14]
 800e660:	69f9      	ldr	r1, [r7, #28]
 800e662:	4798      	blx	r3
 800e664:	4603      	mov	r3, r0
 800e666:	74fb      	strb	r3, [r7, #19]
 800e668:	e001      	b.n	800e66e <tcp_input+0x5d6>
 800e66a:	2300      	movs	r3, #0
 800e66c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e66e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e672:	f113 0f0d 	cmn.w	r3, #13
 800e676:	f000 8098 	beq.w	800e7aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e67a:	4b54      	ldr	r3, [pc, #336]	; (800e7cc <tcp_input+0x734>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e680:	69f8      	ldr	r0, [r7, #28]
 800e682:	f000 f915 	bl	800e8b0 <tcp_input_delayed_close>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f040 8090 	bne.w	800e7ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e68e:	4b4d      	ldr	r3, [pc, #308]	; (800e7c4 <tcp_input+0x72c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d041      	beq.n	800e71a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d006      	beq.n	800e6ac <tcp_input+0x614>
 800e69e:	4b50      	ldr	r3, [pc, #320]	; (800e7e0 <tcp_input+0x748>)
 800e6a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e6a4:	494f      	ldr	r1, [pc, #316]	; (800e7e4 <tcp_input+0x74c>)
 800e6a6:	4850      	ldr	r0, [pc, #320]	; (800e7e8 <tcp_input+0x750>)
 800e6a8:	f007 fa78 	bl	8015b9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	8b5b      	ldrh	r3, [r3, #26]
 800e6b0:	f003 0310 	and.w	r3, r3, #16
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d008      	beq.n	800e6ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6b8:	4b42      	ldr	r3, [pc, #264]	; (800e7c4 <tcp_input+0x72c>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fd fbe5 	bl	800be8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e6c2:	69f8      	ldr	r0, [r7, #28]
 800e6c4:	f7fe f9d2 	bl	800ca6c <tcp_abort>
            goto aborted;
 800e6c8:	e091      	b.n	800e7ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00c      	beq.n	800e6ee <tcp_input+0x656>
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	6918      	ldr	r0, [r3, #16]
 800e6de:	4b39      	ldr	r3, [pc, #228]	; (800e7c4 <tcp_input+0x72c>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	69f9      	ldr	r1, [r7, #28]
 800e6e6:	47a0      	blx	r4
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	74fb      	strb	r3, [r7, #19]
 800e6ec:	e008      	b.n	800e700 <tcp_input+0x668>
 800e6ee:	4b35      	ldr	r3, [pc, #212]	; (800e7c4 <tcp_input+0x72c>)
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	69f9      	ldr	r1, [r7, #28]
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	f7ff f890 	bl	800d81c <tcp_recv_null>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e704:	f113 0f0d 	cmn.w	r3, #13
 800e708:	d053      	beq.n	800e7b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e70a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d003      	beq.n	800e71a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e712:	4b2c      	ldr	r3, [pc, #176]	; (800e7c4 <tcp_input+0x72c>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e71a:	4b2b      	ldr	r3, [pc, #172]	; (800e7c8 <tcp_input+0x730>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d030      	beq.n	800e788 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d009      	beq.n	800e742 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e732:	7b5a      	ldrb	r2, [r3, #13]
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e738:	f042 0220 	orr.w	r2, r2, #32
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	735a      	strb	r2, [r3, #13]
 800e740:	e022      	b.n	800e788 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e746:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e74a:	d005      	beq.n	800e758 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e750:	3301      	adds	r3, #1
 800e752:	b29a      	uxth	r2, r3
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00b      	beq.n	800e77a <tcp_input+0x6e2>
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	6918      	ldr	r0, [r3, #16]
 800e76c:	2300      	movs	r3, #0
 800e76e:	2200      	movs	r2, #0
 800e770:	69f9      	ldr	r1, [r7, #28]
 800e772:	47a0      	blx	r4
 800e774:	4603      	mov	r3, r0
 800e776:	74fb      	strb	r3, [r7, #19]
 800e778:	e001      	b.n	800e77e <tcp_input+0x6e6>
 800e77a:	2300      	movs	r3, #0
 800e77c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e77e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e782:	f113 0f0d 	cmn.w	r3, #13
 800e786:	d016      	beq.n	800e7b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e788:	4b13      	ldr	r3, [pc, #76]	; (800e7d8 <tcp_input+0x740>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e78e:	69f8      	ldr	r0, [r7, #28]
 800e790:	f000 f88e 	bl	800e8b0 <tcp_input_delayed_close>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d128      	bne.n	800e7ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e79a:	69f8      	ldr	r0, [r7, #28]
 800e79c:	f002 ff20 	bl	80115e0 <tcp_output>
 800e7a0:	e025      	b.n	800e7ee <tcp_input+0x756>
        goto aborted;
 800e7a2:	bf00      	nop
 800e7a4:	e023      	b.n	800e7ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e7a6:	bf00      	nop
 800e7a8:	e021      	b.n	800e7ee <tcp_input+0x756>
              goto aborted;
 800e7aa:	bf00      	nop
 800e7ac:	e01f      	b.n	800e7ee <tcp_input+0x756>
          goto aborted;
 800e7ae:	bf00      	nop
 800e7b0:	e01d      	b.n	800e7ee <tcp_input+0x756>
            goto aborted;
 800e7b2:	bf00      	nop
 800e7b4:	e01b      	b.n	800e7ee <tcp_input+0x756>
              goto aborted;
 800e7b6:	bf00      	nop
 800e7b8:	e019      	b.n	800e7ee <tcp_input+0x756>
 800e7ba:	bf00      	nop
 800e7bc:	2000eee0 	.word	0x2000eee0
 800e7c0:	2000eef0 	.word	0x2000eef0
 800e7c4:	2000ef10 	.word	0x2000ef10
 800e7c8:	2000ef0d 	.word	0x2000ef0d
 800e7cc:	2000ef08 	.word	0x2000ef08
 800e7d0:	2000ef0c 	.word	0x2000ef0c
 800e7d4:	2000ef0a 	.word	0x2000ef0a
 800e7d8:	2000ef14 	.word	0x2000ef14
 800e7dc:	2000eed4 	.word	0x2000eed4
 800e7e0:	08018b0c 	.word	0x08018b0c
 800e7e4:	08018cc0 	.word	0x08018cc0
 800e7e8:	08018b58 	.word	0x08018b58
          goto aborted;
 800e7ec:	bf00      	nop
    tcp_input_pcb = NULL;
 800e7ee:	4b27      	ldr	r3, [pc, #156]	; (800e88c <tcp_input+0x7f4>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e7f4:	4b26      	ldr	r3, [pc, #152]	; (800e890 <tcp_input+0x7f8>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e7fa:	4b26      	ldr	r3, [pc, #152]	; (800e894 <tcp_input+0x7fc>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d03f      	beq.n	800e882 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e802:	4b24      	ldr	r3, [pc, #144]	; (800e894 <tcp_input+0x7fc>)
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	f7fd fb40 	bl	800be8c <pbuf_free>
      inseg.p = NULL;
 800e80c:	4b21      	ldr	r3, [pc, #132]	; (800e894 <tcp_input+0x7fc>)
 800e80e:	2200      	movs	r2, #0
 800e810:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e812:	e036      	b.n	800e882 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e814:	4b20      	ldr	r3, [pc, #128]	; (800e898 <tcp_input+0x800>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	899b      	ldrh	r3, [r3, #12]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fb ff43 	bl	800a6a8 <lwip_htons>
 800e822:	4603      	mov	r3, r0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	f003 0304 	and.w	r3, r3, #4
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d118      	bne.n	800e860 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e82e:	4b1b      	ldr	r3, [pc, #108]	; (800e89c <tcp_input+0x804>)
 800e830:	6819      	ldr	r1, [r3, #0]
 800e832:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <tcp_input+0x808>)
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	4b1a      	ldr	r3, [pc, #104]	; (800e8a4 <tcp_input+0x80c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e83e:	4b16      	ldr	r3, [pc, #88]	; (800e898 <tcp_input+0x800>)
 800e840:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e842:	885b      	ldrh	r3, [r3, #2]
 800e844:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e846:	4a14      	ldr	r2, [pc, #80]	; (800e898 <tcp_input+0x800>)
 800e848:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e84a:	8812      	ldrh	r2, [r2, #0]
 800e84c:	b292      	uxth	r2, r2
 800e84e:	9202      	str	r2, [sp, #8]
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <tcp_input+0x810>)
 800e854:	9300      	str	r3, [sp, #0]
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <tcp_input+0x814>)
 800e858:	4602      	mov	r2, r0
 800e85a:	2000      	movs	r0, #0
 800e85c:	f003 fc74 	bl	8012148 <tcp_rst>
    pbuf_free(p);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fd fb13 	bl	800be8c <pbuf_free>
  return;
 800e866:	e00c      	b.n	800e882 <tcp_input+0x7ea>
    goto dropped;
 800e868:	bf00      	nop
 800e86a:	e006      	b.n	800e87a <tcp_input+0x7e2>
    goto dropped;
 800e86c:	bf00      	nop
 800e86e:	e004      	b.n	800e87a <tcp_input+0x7e2>
    goto dropped;
 800e870:	bf00      	nop
 800e872:	e002      	b.n	800e87a <tcp_input+0x7e2>
      goto dropped;
 800e874:	bf00      	nop
 800e876:	e000      	b.n	800e87a <tcp_input+0x7e2>
      goto dropped;
 800e878:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7fd fb06 	bl	800be8c <pbuf_free>
 800e880:	e000      	b.n	800e884 <tcp_input+0x7ec>
  return;
 800e882:	bf00      	nop
}
 800e884:	3724      	adds	r7, #36	; 0x24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd90      	pop	{r4, r7, pc}
 800e88a:	bf00      	nop
 800e88c:	2000ef14 	.word	0x2000ef14
 800e890:	2000ef10 	.word	0x2000ef10
 800e894:	2000eee0 	.word	0x2000eee0
 800e898:	2000eef0 	.word	0x2000eef0
 800e89c:	2000ef04 	.word	0x2000ef04
 800e8a0:	2000ef0a 	.word	0x2000ef0a
 800e8a4:	2000ef00 	.word	0x2000ef00
 800e8a8:	200095c4 	.word	0x200095c4
 800e8ac:	200095c8 	.word	0x200095c8

0800e8b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <tcp_input_delayed_close+0x1c>
 800e8be:	4b17      	ldr	r3, [pc, #92]	; (800e91c <tcp_input_delayed_close+0x6c>)
 800e8c0:	f240 225a 	movw	r2, #602	; 0x25a
 800e8c4:	4916      	ldr	r1, [pc, #88]	; (800e920 <tcp_input_delayed_close+0x70>)
 800e8c6:	4817      	ldr	r0, [pc, #92]	; (800e924 <tcp_input_delayed_close+0x74>)
 800e8c8:	f007 f968 	bl	8015b9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e8cc:	4b16      	ldr	r3, [pc, #88]	; (800e928 <tcp_input_delayed_close+0x78>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	f003 0310 	and.w	r3, r3, #16
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d01c      	beq.n	800e912 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	8b5b      	ldrh	r3, [r3, #26]
 800e8dc:	f003 0310 	and.w	r3, r3, #16
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10d      	bne.n	800e900 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d008      	beq.n	800e900 <tcp_input_delayed_close+0x50>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	6912      	ldr	r2, [r2, #16]
 800e8f8:	f06f 010e 	mvn.w	r1, #14
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e900:	6879      	ldr	r1, [r7, #4]
 800e902:	480a      	ldr	r0, [pc, #40]	; (800e92c <tcp_input_delayed_close+0x7c>)
 800e904:	f7ff fa50 	bl	800dda8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7fd fd6b 	bl	800c3e4 <tcp_free>
    return 1;
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	08018b0c 	.word	0x08018b0c
 800e920:	08018cdc 	.word	0x08018cdc
 800e924:	08018b58 	.word	0x08018b58
 800e928:	2000ef0d 	.word	0x2000ef0d
 800e92c:	2000eed4 	.word	0x2000eed4

0800e930 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e930:	b590      	push	{r4, r7, lr}
 800e932:	b08b      	sub	sp, #44	; 0x2c
 800e934:	af04      	add	r7, sp, #16
 800e936:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e938:	4b6f      	ldr	r3, [pc, #444]	; (800eaf8 <tcp_listen_input+0x1c8>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f003 0304 	and.w	r3, r3, #4
 800e940:	2b00      	cmp	r3, #0
 800e942:	f040 80d2 	bne.w	800eaea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d106      	bne.n	800e95a <tcp_listen_input+0x2a>
 800e94c:	4b6b      	ldr	r3, [pc, #428]	; (800eafc <tcp_listen_input+0x1cc>)
 800e94e:	f240 2281 	movw	r2, #641	; 0x281
 800e952:	496b      	ldr	r1, [pc, #428]	; (800eb00 <tcp_listen_input+0x1d0>)
 800e954:	486b      	ldr	r0, [pc, #428]	; (800eb04 <tcp_listen_input+0x1d4>)
 800e956:	f007 f921 	bl	8015b9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e95a:	4b67      	ldr	r3, [pc, #412]	; (800eaf8 <tcp_listen_input+0x1c8>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0310 	and.w	r3, r3, #16
 800e962:	2b00      	cmp	r3, #0
 800e964:	d019      	beq.n	800e99a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e966:	4b68      	ldr	r3, [pc, #416]	; (800eb08 <tcp_listen_input+0x1d8>)
 800e968:	6819      	ldr	r1, [r3, #0]
 800e96a:	4b68      	ldr	r3, [pc, #416]	; (800eb0c <tcp_listen_input+0x1dc>)
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	4b67      	ldr	r3, [pc, #412]	; (800eb10 <tcp_listen_input+0x1e0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e976:	4b67      	ldr	r3, [pc, #412]	; (800eb14 <tcp_listen_input+0x1e4>)
 800e978:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e97a:	885b      	ldrh	r3, [r3, #2]
 800e97c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e97e:	4a65      	ldr	r2, [pc, #404]	; (800eb14 <tcp_listen_input+0x1e4>)
 800e980:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e982:	8812      	ldrh	r2, [r2, #0]
 800e984:	b292      	uxth	r2, r2
 800e986:	9202      	str	r2, [sp, #8]
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	4b63      	ldr	r3, [pc, #396]	; (800eb18 <tcp_listen_input+0x1e8>)
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	4b63      	ldr	r3, [pc, #396]	; (800eb1c <tcp_listen_input+0x1ec>)
 800e990:	4602      	mov	r2, r0
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f003 fbd8 	bl	8012148 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e998:	e0a9      	b.n	800eaee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e99a:	4b57      	ldr	r3, [pc, #348]	; (800eaf8 <tcp_listen_input+0x1c8>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f000 80a3 	beq.w	800eaee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	7d5b      	ldrb	r3, [r3, #21]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7ff f859 	bl	800da64 <tcp_alloc>
 800e9b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d111      	bne.n	800e9de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00a      	beq.n	800e9d8 <tcp_listen_input+0xa8>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	6910      	ldr	r0, [r2, #16]
 800e9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4798      	blx	r3
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73bb      	strb	r3, [r7, #14]
      return;
 800e9d6:	e08b      	b.n	800eaf0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9d8:	23f0      	movs	r3, #240	; 0xf0
 800e9da:	73bb      	strb	r3, [r7, #14]
      return;
 800e9dc:	e088      	b.n	800eaf0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e9de:	4b50      	ldr	r3, [pc, #320]	; (800eb20 <tcp_listen_input+0x1f0>)
 800e9e0:	695a      	ldr	r2, [r3, #20]
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e9e6:	4b4e      	ldr	r3, [pc, #312]	; (800eb20 <tcp_listen_input+0x1f0>)
 800e9e8:	691a      	ldr	r2, [r3, #16]
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8ada      	ldrh	r2, [r3, #22]
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e9f6:	4b47      	ldr	r3, [pc, #284]	; (800eb14 <tcp_listen_input+0x1e4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2203      	movs	r2, #3
 800ea06:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ea08:	4b41      	ldr	r3, [pc, #260]	; (800eb10 <tcp_listen_input+0x1e0>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ea1a:	6978      	ldr	r0, [r7, #20]
 800ea1c:	f7ff fa58 	bl	800ded0 <tcp_next_iss>
 800ea20:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	693a      	ldr	r2, [r7, #16]
 800ea26:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	693a      	ldr	r2, [r7, #16]
 800ea32:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea3a:	4b35      	ldr	r3, [pc, #212]	; (800eb10 <tcp_listen_input+0x1e0>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	1e5a      	subs	r2, r3, #1
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	691a      	ldr	r2, [r3, #16]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7a5b      	ldrb	r3, [r3, #9]
 800ea56:	f003 030c 	and.w	r3, r3, #12
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	7a1a      	ldrb	r2, [r3, #8]
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea68:	4b2e      	ldr	r3, [pc, #184]	; (800eb24 <tcp_listen_input+0x1f4>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	60da      	str	r2, [r3, #12]
 800ea70:	4a2c      	ldr	r2, [pc, #176]	; (800eb24 <tcp_listen_input+0x1f4>)
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	6013      	str	r3, [r2, #0]
 800ea76:	f003 fd29 	bl	80124cc <tcp_timer_needed>
 800ea7a:	4b2b      	ldr	r3, [pc, #172]	; (800eb28 <tcp_listen_input+0x1f8>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ea80:	6978      	ldr	r0, [r7, #20]
 800ea82:	f001 fd8f 	bl	80105a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ea86:	4b23      	ldr	r3, [pc, #140]	; (800eb14 <tcp_listen_input+0x1e4>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	89db      	ldrh	r3, [r3, #14]
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f005 fa63 	bl	8013f74 <ip4_route>
 800eaae:	4601      	mov	r1, r0
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	3304      	adds	r3, #4
 800eab4:	461a      	mov	r2, r3
 800eab6:	4620      	mov	r0, r4
 800eab8:	f7ff fa30 	bl	800df1c <tcp_eff_send_mss_netif>
 800eabc:	4603      	mov	r3, r0
 800eabe:	461a      	mov	r2, r3
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eac4:	2112      	movs	r1, #18
 800eac6:	6978      	ldr	r0, [r7, #20]
 800eac8:	f002 fc9c 	bl	8011404 <tcp_enqueue_flags>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ead0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d004      	beq.n	800eae2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ead8:	2100      	movs	r1, #0
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	f7fd ff08 	bl	800c8f0 <tcp_abandon>
      return;
 800eae0:	e006      	b.n	800eaf0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eae2:	6978      	ldr	r0, [r7, #20]
 800eae4:	f002 fd7c 	bl	80115e0 <tcp_output>
  return;
 800eae8:	e001      	b.n	800eaee <tcp_listen_input+0x1be>
    return;
 800eaea:	bf00      	nop
 800eaec:	e000      	b.n	800eaf0 <tcp_listen_input+0x1c0>
  return;
 800eaee:	bf00      	nop
}
 800eaf0:	371c      	adds	r7, #28
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd90      	pop	{r4, r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	2000ef0c 	.word	0x2000ef0c
 800eafc:	08018b0c 	.word	0x08018b0c
 800eb00:	08018d04 	.word	0x08018d04
 800eb04:	08018b58 	.word	0x08018b58
 800eb08:	2000ef04 	.word	0x2000ef04
 800eb0c:	2000ef0a 	.word	0x2000ef0a
 800eb10:	2000ef00 	.word	0x2000ef00
 800eb14:	2000eef0 	.word	0x2000eef0
 800eb18:	200095c4 	.word	0x200095c4
 800eb1c:	200095c8 	.word	0x200095c8
 800eb20:	200095b4 	.word	0x200095b4
 800eb24:	2000eed4 	.word	0x2000eed4
 800eb28:	2000eedc 	.word	0x2000eedc

0800eb2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af04      	add	r7, sp, #16
 800eb32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb34:	4b2f      	ldr	r3, [pc, #188]	; (800ebf4 <tcp_timewait_input+0xc8>)
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	f003 0304 	and.w	r3, r3, #4
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d153      	bne.n	800ebe8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d106      	bne.n	800eb54 <tcp_timewait_input+0x28>
 800eb46:	4b2c      	ldr	r3, [pc, #176]	; (800ebf8 <tcp_timewait_input+0xcc>)
 800eb48:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eb4c:	492b      	ldr	r1, [pc, #172]	; (800ebfc <tcp_timewait_input+0xd0>)
 800eb4e:	482c      	ldr	r0, [pc, #176]	; (800ec00 <tcp_timewait_input+0xd4>)
 800eb50:	f007 f824 	bl	8015b9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb54:	4b27      	ldr	r3, [pc, #156]	; (800ebf4 <tcp_timewait_input+0xc8>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	f003 0302 	and.w	r3, r3, #2
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d02a      	beq.n	800ebb6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb60:	4b28      	ldr	r3, [pc, #160]	; (800ec04 <tcp_timewait_input+0xd8>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	db2d      	blt.n	800ebca <tcp_timewait_input+0x9e>
 800eb6e:	4b25      	ldr	r3, [pc, #148]	; (800ec04 <tcp_timewait_input+0xd8>)
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb76:	6879      	ldr	r1, [r7, #4]
 800eb78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb7a:	440b      	add	r3, r1
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	dc23      	bgt.n	800ebca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb82:	4b21      	ldr	r3, [pc, #132]	; (800ec08 <tcp_timewait_input+0xdc>)
 800eb84:	6819      	ldr	r1, [r3, #0]
 800eb86:	4b21      	ldr	r3, [pc, #132]	; (800ec0c <tcp_timewait_input+0xe0>)
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	4b1d      	ldr	r3, [pc, #116]	; (800ec04 <tcp_timewait_input+0xd8>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb92:	4b1f      	ldr	r3, [pc, #124]	; (800ec10 <tcp_timewait_input+0xe4>)
 800eb94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb96:	885b      	ldrh	r3, [r3, #2]
 800eb98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb9a:	4a1d      	ldr	r2, [pc, #116]	; (800ec10 <tcp_timewait_input+0xe4>)
 800eb9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb9e:	8812      	ldrh	r2, [r2, #0]
 800eba0:	b292      	uxth	r2, r2
 800eba2:	9202      	str	r2, [sp, #8]
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	4b1b      	ldr	r3, [pc, #108]	; (800ec14 <tcp_timewait_input+0xe8>)
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	4b1b      	ldr	r3, [pc, #108]	; (800ec18 <tcp_timewait_input+0xec>)
 800ebac:	4602      	mov	r2, r0
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f003 faca 	bl	8012148 <tcp_rst>
      return;
 800ebb4:	e01b      	b.n	800ebee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ebb6:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <tcp_timewait_input+0xc8>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ebc2:	4b16      	ldr	r3, [pc, #88]	; (800ec1c <tcp_timewait_input+0xf0>)
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ebca:	4b10      	ldr	r3, [pc, #64]	; (800ec0c <tcp_timewait_input+0xe0>)
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00c      	beq.n	800ebec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	8b5b      	ldrh	r3, [r3, #26]
 800ebd6:	f043 0302 	orr.w	r3, r3, #2
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f002 fcfd 	bl	80115e0 <tcp_output>
  }
  return;
 800ebe6:	e001      	b.n	800ebec <tcp_timewait_input+0xc0>
    return;
 800ebe8:	bf00      	nop
 800ebea:	e000      	b.n	800ebee <tcp_timewait_input+0xc2>
  return;
 800ebec:	bf00      	nop
}
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	2000ef0c 	.word	0x2000ef0c
 800ebf8:	08018b0c 	.word	0x08018b0c
 800ebfc:	08018d24 	.word	0x08018d24
 800ec00:	08018b58 	.word	0x08018b58
 800ec04:	2000ef00 	.word	0x2000ef00
 800ec08:	2000ef04 	.word	0x2000ef04
 800ec0c:	2000ef0a 	.word	0x2000ef0a
 800ec10:	2000eef0 	.word	0x2000eef0
 800ec14:	200095c4 	.word	0x200095c4
 800ec18:	200095c8 	.word	0x200095c8
 800ec1c:	2000eec8 	.word	0x2000eec8

0800ec20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ec20:	b590      	push	{r4, r7, lr}
 800ec22:	b08d      	sub	sp, #52	; 0x34
 800ec24:	af04      	add	r7, sp, #16
 800ec26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <tcp_process+0x24>
 800ec36:	4b9d      	ldr	r3, [pc, #628]	; (800eeac <tcp_process+0x28c>)
 800ec38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ec3c:	499c      	ldr	r1, [pc, #624]	; (800eeb0 <tcp_process+0x290>)
 800ec3e:	489d      	ldr	r0, [pc, #628]	; (800eeb4 <tcp_process+0x294>)
 800ec40:	f006 ffac 	bl	8015b9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec44:	4b9c      	ldr	r3, [pc, #624]	; (800eeb8 <tcp_process+0x298>)
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d04e      	beq.n	800ecee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	7d1b      	ldrb	r3, [r3, #20]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d108      	bne.n	800ec6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec5c:	4b97      	ldr	r3, [pc, #604]	; (800eebc <tcp_process+0x29c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d123      	bne.n	800ecac <tcp_process+0x8c>
        acceptable = 1;
 800ec64:	2301      	movs	r3, #1
 800ec66:	76fb      	strb	r3, [r7, #27]
 800ec68:	e020      	b.n	800ecac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec6e:	4b94      	ldr	r3, [pc, #592]	; (800eec0 <tcp_process+0x2a0>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d102      	bne.n	800ec7c <tcp_process+0x5c>
        acceptable = 1;
 800ec76:	2301      	movs	r3, #1
 800ec78:	76fb      	strb	r3, [r7, #27]
 800ec7a:	e017      	b.n	800ecac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec7c:	4b90      	ldr	r3, [pc, #576]	; (800eec0 <tcp_process+0x2a0>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	db10      	blt.n	800ecac <tcp_process+0x8c>
 800ec8a:	4b8d      	ldr	r3, [pc, #564]	; (800eec0 <tcp_process+0x2a0>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec92:	6879      	ldr	r1, [r7, #4]
 800ec94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec96:	440b      	add	r3, r1
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	dc06      	bgt.n	800ecac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	8b5b      	ldrh	r3, [r3, #26]
 800eca2:	f043 0302 	orr.w	r3, r3, #2
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ecac:	7efb      	ldrb	r3, [r7, #27]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d01b      	beq.n	800ecea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	7d1b      	ldrb	r3, [r3, #20]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d106      	bne.n	800ecc8 <tcp_process+0xa8>
 800ecba:	4b7c      	ldr	r3, [pc, #496]	; (800eeac <tcp_process+0x28c>)
 800ecbc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ecc0:	4980      	ldr	r1, [pc, #512]	; (800eec4 <tcp_process+0x2a4>)
 800ecc2:	487c      	ldr	r0, [pc, #496]	; (800eeb4 <tcp_process+0x294>)
 800ecc4:	f006 ff6a 	bl	8015b9c <iprintf>
      recv_flags |= TF_RESET;
 800ecc8:	4b7f      	ldr	r3, [pc, #508]	; (800eec8 <tcp_process+0x2a8>)
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	f043 0308 	orr.w	r3, r3, #8
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	4b7d      	ldr	r3, [pc, #500]	; (800eec8 <tcp_process+0x2a8>)
 800ecd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	8b5b      	ldrh	r3, [r3, #26]
 800ecda:	f023 0301 	bic.w	r3, r3, #1
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ece4:	f06f 030d 	mvn.w	r3, #13
 800ece8:	e37a      	b.n	800f3e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ecea:	2300      	movs	r3, #0
 800ecec:	e378      	b.n	800f3e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ecee:	4b72      	ldr	r3, [pc, #456]	; (800eeb8 <tcp_process+0x298>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	f003 0302 	and.w	r3, r3, #2
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d010      	beq.n	800ed1c <tcp_process+0xfc>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	7d1b      	ldrb	r3, [r3, #20]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d00c      	beq.n	800ed1c <tcp_process+0xfc>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7d1b      	ldrb	r3, [r3, #20]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d008      	beq.n	800ed1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	8b5b      	ldrh	r3, [r3, #26]
 800ed0e:	f043 0302 	orr.w	r3, r3, #2
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e361      	b.n	800f3e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	8b5b      	ldrh	r3, [r3, #26]
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d103      	bne.n	800ed30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ed28:	4b68      	ldr	r3, [pc, #416]	; (800eecc <tcp_process+0x2ac>)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f001 fc2f 	bl	80105a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7d1b      	ldrb	r3, [r3, #20]
 800ed4a:	3b02      	subs	r3, #2
 800ed4c:	2b07      	cmp	r3, #7
 800ed4e:	f200 8337 	bhi.w	800f3c0 <tcp_process+0x7a0>
 800ed52:	a201      	add	r2, pc, #4	; (adr r2, 800ed58 <tcp_process+0x138>)
 800ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed58:	0800ed79 	.word	0x0800ed79
 800ed5c:	0800efa9 	.word	0x0800efa9
 800ed60:	0800f121 	.word	0x0800f121
 800ed64:	0800f14b 	.word	0x0800f14b
 800ed68:	0800f26f 	.word	0x0800f26f
 800ed6c:	0800f121 	.word	0x0800f121
 800ed70:	0800f2fb 	.word	0x0800f2fb
 800ed74:	0800f38b 	.word	0x0800f38b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ed78:	4b4f      	ldr	r3, [pc, #316]	; (800eeb8 <tcp_process+0x298>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	f003 0310 	and.w	r3, r3, #16
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f000 80e4 	beq.w	800ef4e <tcp_process+0x32e>
 800ed86:	4b4c      	ldr	r3, [pc, #304]	; (800eeb8 <tcp_process+0x298>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	f003 0302 	and.w	r3, r3, #2
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 80dd 	beq.w	800ef4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	4b48      	ldr	r3, [pc, #288]	; (800eebc <tcp_process+0x29c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	f040 80d5 	bne.w	800ef4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eda4:	4b46      	ldr	r3, [pc, #280]	; (800eec0 <tcp_process+0x2a0>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	1c5a      	adds	r2, r3, #1
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800edb6:	4b41      	ldr	r3, [pc, #260]	; (800eebc <tcp_process+0x29c>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800edbe:	4b44      	ldr	r3, [pc, #272]	; (800eed0 <tcp_process+0x2b0>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	89db      	ldrh	r3, [r3, #14]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800edd8:	4b39      	ldr	r3, [pc, #228]	; (800eec0 <tcp_process+0x2a0>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	1e5a      	subs	r2, r3, #1
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2204      	movs	r2, #4
 800ede6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f005 f8bf 	bl	8013f74 <ip4_route>
 800edf6:	4601      	mov	r1, r0
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3304      	adds	r3, #4
 800edfc:	461a      	mov	r2, r3
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff f88c 	bl	800df1c <tcp_eff_send_mss_netif>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee10:	009a      	lsls	r2, r3, #2
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	f241 111c 	movw	r1, #4380	; 0x111c
 800ee1c:	428b      	cmp	r3, r1
 800ee1e:	bf38      	it	cc
 800ee20:	460b      	movcc	r3, r1
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d204      	bcs.n	800ee30 <tcp_process+0x210>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	e00d      	b.n	800ee4c <tcp_process+0x22c>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	f241 121c 	movw	r2, #4380	; 0x111c
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d904      	bls.n	800ee48 <tcp_process+0x228>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	e001      	b.n	800ee4c <tcp_process+0x22c>
 800ee48:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d106      	bne.n	800ee6a <tcp_process+0x24a>
 800ee5c:	4b13      	ldr	r3, [pc, #76]	; (800eeac <tcp_process+0x28c>)
 800ee5e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ee62:	491c      	ldr	r1, [pc, #112]	; (800eed4 <tcp_process+0x2b4>)
 800ee64:	4813      	ldr	r0, [pc, #76]	; (800eeb4 <tcp_process+0x294>)
 800ee66:	f006 fe99 	bl	8015b9c <iprintf>
        --pcb->snd_queuelen;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee70:	3b01      	subs	r3, #1
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d12a      	bne.n	800eedc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <tcp_process+0x280>
 800ee92:	4b06      	ldr	r3, [pc, #24]	; (800eeac <tcp_process+0x28c>)
 800ee94:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ee98:	490f      	ldr	r1, [pc, #60]	; (800eed8 <tcp_process+0x2b8>)
 800ee9a:	4806      	ldr	r0, [pc, #24]	; (800eeb4 <tcp_process+0x294>)
 800ee9c:	f006 fe7e 	bl	8015b9c <iprintf>
          pcb->unsent = rseg->next;
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	66da      	str	r2, [r3, #108]	; 0x6c
 800eea8:	e01c      	b.n	800eee4 <tcp_process+0x2c4>
 800eeaa:	bf00      	nop
 800eeac:	08018b0c 	.word	0x08018b0c
 800eeb0:	08018d44 	.word	0x08018d44
 800eeb4:	08018b58 	.word	0x08018b58
 800eeb8:	2000ef0c 	.word	0x2000ef0c
 800eebc:	2000ef04 	.word	0x2000ef04
 800eec0:	2000ef00 	.word	0x2000ef00
 800eec4:	08018d60 	.word	0x08018d60
 800eec8:	2000ef0d 	.word	0x2000ef0d
 800eecc:	2000eec8 	.word	0x2000eec8
 800eed0:	2000eef0 	.word	0x2000eef0
 800eed4:	08018d80 	.word	0x08018d80
 800eed8:	08018d98 	.word	0x08018d98
        } else {
          pcb->unacked = rseg->next;
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eee4:	69f8      	ldr	r0, [r7, #28]
 800eee6:	f7fe fc54 	bl	800d792 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d104      	bne.n	800eefc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef8:	861a      	strh	r2, [r3, #48]	; 0x30
 800eefa:	e006      	b.n	800ef0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00a      	beq.n	800ef2a <tcp_process+0x30a>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	6910      	ldr	r0, [r2, #16]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	6879      	ldr	r1, [r7, #4]
 800ef22:	4798      	blx	r3
 800ef24:	4603      	mov	r3, r0
 800ef26:	76bb      	strb	r3, [r7, #26]
 800ef28:	e001      	b.n	800ef2e <tcp_process+0x30e>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ef2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef32:	f113 0f0d 	cmn.w	r3, #13
 800ef36:	d102      	bne.n	800ef3e <tcp_process+0x31e>
          return ERR_ABRT;
 800ef38:	f06f 030c 	mvn.w	r3, #12
 800ef3c:	e250      	b.n	800f3e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	8b5b      	ldrh	r3, [r3, #26]
 800ef42:	f043 0302 	orr.w	r3, r3, #2
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef4c:	e23a      	b.n	800f3c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef4e:	4b98      	ldr	r3, [pc, #608]	; (800f1b0 <tcp_process+0x590>)
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	f003 0310 	and.w	r3, r3, #16
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 8234 	beq.w	800f3c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef5c:	4b95      	ldr	r3, [pc, #596]	; (800f1b4 <tcp_process+0x594>)
 800ef5e:	6819      	ldr	r1, [r3, #0]
 800ef60:	4b95      	ldr	r3, [pc, #596]	; (800f1b8 <tcp_process+0x598>)
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	461a      	mov	r2, r3
 800ef66:	4b95      	ldr	r3, [pc, #596]	; (800f1bc <tcp_process+0x59c>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef6c:	4b94      	ldr	r3, [pc, #592]	; (800f1c0 <tcp_process+0x5a0>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef70:	885b      	ldrh	r3, [r3, #2]
 800ef72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef74:	4a92      	ldr	r2, [pc, #584]	; (800f1c0 <tcp_process+0x5a0>)
 800ef76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef78:	8812      	ldrh	r2, [r2, #0]
 800ef7a:	b292      	uxth	r2, r2
 800ef7c:	9202      	str	r2, [sp, #8]
 800ef7e:	9301      	str	r3, [sp, #4]
 800ef80:	4b90      	ldr	r3, [pc, #576]	; (800f1c4 <tcp_process+0x5a4>)
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	4b90      	ldr	r3, [pc, #576]	; (800f1c8 <tcp_process+0x5a8>)
 800ef86:	4602      	mov	r2, r0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f003 f8dd 	bl	8012148 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef94:	2b05      	cmp	r3, #5
 800ef96:	f200 8215 	bhi.w	800f3c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f002 fea7 	bl	8011cf4 <tcp_rexmit_rto>
      break;
 800efa6:	e20d      	b.n	800f3c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800efa8:	4b81      	ldr	r3, [pc, #516]	; (800f1b0 <tcp_process+0x590>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 80a1 	beq.w	800f0f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efb6:	4b7f      	ldr	r3, [pc, #508]	; (800f1b4 <tcp_process+0x594>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	db7e      	blt.n	800f0c4 <tcp_process+0x4a4>
 800efc6:	4b7b      	ldr	r3, [pc, #492]	; (800f1b4 <tcp_process+0x594>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	dc77      	bgt.n	800f0c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2204      	movs	r2, #4
 800efd8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800efe2:	23fa      	movs	r3, #250	; 0xfa
 800efe4:	76bb      	strb	r3, [r7, #26]
 800efe6:	e01d      	b.n	800f024 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efec:	699b      	ldr	r3, [r3, #24]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d106      	bne.n	800f000 <tcp_process+0x3e0>
 800eff2:	4b76      	ldr	r3, [pc, #472]	; (800f1cc <tcp_process+0x5ac>)
 800eff4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800eff8:	4975      	ldr	r1, [pc, #468]	; (800f1d0 <tcp_process+0x5b0>)
 800effa:	4876      	ldr	r0, [pc, #472]	; (800f1d4 <tcp_process+0x5b4>)
 800effc:	f006 fdce 	bl	8015b9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00a      	beq.n	800f020 <tcp_process+0x400>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f00e:	699b      	ldr	r3, [r3, #24]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	6910      	ldr	r0, [r2, #16]
 800f014:	2200      	movs	r2, #0
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	4798      	blx	r3
 800f01a:	4603      	mov	r3, r0
 800f01c:	76bb      	strb	r3, [r7, #26]
 800f01e:	e001      	b.n	800f024 <tcp_process+0x404>
 800f020:	23f0      	movs	r3, #240	; 0xf0
 800f022:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f024:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00a      	beq.n	800f042 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f02c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f030:	f113 0f0d 	cmn.w	r3, #13
 800f034:	d002      	beq.n	800f03c <tcp_process+0x41c>
              tcp_abort(pcb);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7fd fd18 	bl	800ca6c <tcp_abort>
            }
            return ERR_ABRT;
 800f03c:	f06f 030c 	mvn.w	r3, #12
 800f040:	e1ce      	b.n	800f3e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fae0 	bl	800f608 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f048:	4b63      	ldr	r3, [pc, #396]	; (800f1d8 <tcp_process+0x5b8>)
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d005      	beq.n	800f05c <tcp_process+0x43c>
            recv_acked--;
 800f050:	4b61      	ldr	r3, [pc, #388]	; (800f1d8 <tcp_process+0x5b8>)
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	3b01      	subs	r3, #1
 800f056:	b29a      	uxth	r2, r3
 800f058:	4b5f      	ldr	r3, [pc, #380]	; (800f1d8 <tcp_process+0x5b8>)
 800f05a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f060:	009a      	lsls	r2, r3, #2
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	f241 111c 	movw	r1, #4380	; 0x111c
 800f06c:	428b      	cmp	r3, r1
 800f06e:	bf38      	it	cc
 800f070:	460b      	movcc	r3, r1
 800f072:	429a      	cmp	r2, r3
 800f074:	d204      	bcs.n	800f080 <tcp_process+0x460>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	e00d      	b.n	800f09c <tcp_process+0x47c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	f241 121c 	movw	r2, #4380	; 0x111c
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d904      	bls.n	800f098 <tcp_process+0x478>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	e001      	b.n	800f09c <tcp_process+0x47c>
 800f098:	f241 131c 	movw	r3, #4380	; 0x111c
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f0a2:	4b4e      	ldr	r3, [pc, #312]	; (800f1dc <tcp_process+0x5bc>)
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	f003 0320 	and.w	r3, r3, #32
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d037      	beq.n	800f11e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	8b5b      	ldrh	r3, [r3, #26]
 800f0b2:	f043 0302 	orr.w	r3, r3, #2
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2207      	movs	r2, #7
 800f0c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f0c2:	e02c      	b.n	800f11e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0c4:	4b3b      	ldr	r3, [pc, #236]	; (800f1b4 <tcp_process+0x594>)
 800f0c6:	6819      	ldr	r1, [r3, #0]
 800f0c8:	4b3b      	ldr	r3, [pc, #236]	; (800f1b8 <tcp_process+0x598>)
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	4b3b      	ldr	r3, [pc, #236]	; (800f1bc <tcp_process+0x59c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0d4:	4b3a      	ldr	r3, [pc, #232]	; (800f1c0 <tcp_process+0x5a0>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0d8:	885b      	ldrh	r3, [r3, #2]
 800f0da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0dc:	4a38      	ldr	r2, [pc, #224]	; (800f1c0 <tcp_process+0x5a0>)
 800f0de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0e0:	8812      	ldrh	r2, [r2, #0]
 800f0e2:	b292      	uxth	r2, r2
 800f0e4:	9202      	str	r2, [sp, #8]
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	4b36      	ldr	r3, [pc, #216]	; (800f1c4 <tcp_process+0x5a4>)
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	4b36      	ldr	r3, [pc, #216]	; (800f1c8 <tcp_process+0x5a8>)
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f003 f829 	bl	8012148 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f0f6:	e167      	b.n	800f3c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f0f8:	4b2d      	ldr	r3, [pc, #180]	; (800f1b0 <tcp_process+0x590>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b00      	cmp	r3, #0
 800f102:	f000 8161 	beq.w	800f3c8 <tcp_process+0x7a8>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10a:	1e5a      	subs	r2, r3, #1
 800f10c:	4b2b      	ldr	r3, [pc, #172]	; (800f1bc <tcp_process+0x59c>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	429a      	cmp	r2, r3
 800f112:	f040 8159 	bne.w	800f3c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f002 fe0e 	bl	8011d38 <tcp_rexmit>
      break;
 800f11c:	e154      	b.n	800f3c8 <tcp_process+0x7a8>
 800f11e:	e153      	b.n	800f3c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 fa71 	bl	800f608 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f126:	4b2d      	ldr	r3, [pc, #180]	; (800f1dc <tcp_process+0x5bc>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 814c 	beq.w	800f3cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8b5b      	ldrh	r3, [r3, #26]
 800f138:	f043 0302 	orr.w	r3, r3, #2
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2207      	movs	r2, #7
 800f146:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f148:	e140      	b.n	800f3cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 fa5c 	bl	800f608 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f150:	4b22      	ldr	r3, [pc, #136]	; (800f1dc <tcp_process+0x5bc>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	f003 0320 	and.w	r3, r3, #32
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d071      	beq.n	800f240 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f15c:	4b14      	ldr	r3, [pc, #80]	; (800f1b0 <tcp_process+0x590>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	f003 0310 	and.w	r3, r3, #16
 800f164:	2b00      	cmp	r3, #0
 800f166:	d060      	beq.n	800f22a <tcp_process+0x60a>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f16c:	4b11      	ldr	r3, [pc, #68]	; (800f1b4 <tcp_process+0x594>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d15a      	bne.n	800f22a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d156      	bne.n	800f22a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	8b5b      	ldrh	r3, [r3, #26]
 800f180:	f043 0302 	orr.w	r3, r3, #2
 800f184:	b29a      	uxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fe fdbc 	bl	800dd08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f190:	4b13      	ldr	r3, [pc, #76]	; (800f1e0 <tcp_process+0x5c0>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	429a      	cmp	r2, r3
 800f198:	d105      	bne.n	800f1a6 <tcp_process+0x586>
 800f19a:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <tcp_process+0x5c0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	4a0f      	ldr	r2, [pc, #60]	; (800f1e0 <tcp_process+0x5c0>)
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	e02e      	b.n	800f204 <tcp_process+0x5e4>
 800f1a6:	4b0e      	ldr	r3, [pc, #56]	; (800f1e0 <tcp_process+0x5c0>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	e027      	b.n	800f1fe <tcp_process+0x5de>
 800f1ae:	bf00      	nop
 800f1b0:	2000ef0c 	.word	0x2000ef0c
 800f1b4:	2000ef04 	.word	0x2000ef04
 800f1b8:	2000ef0a 	.word	0x2000ef0a
 800f1bc:	2000ef00 	.word	0x2000ef00
 800f1c0:	2000eef0 	.word	0x2000eef0
 800f1c4:	200095c4 	.word	0x200095c4
 800f1c8:	200095c8 	.word	0x200095c8
 800f1cc:	08018b0c 	.word	0x08018b0c
 800f1d0:	08018dac 	.word	0x08018dac
 800f1d4:	08018b58 	.word	0x08018b58
 800f1d8:	2000ef08 	.word	0x2000ef08
 800f1dc:	2000ef0d 	.word	0x2000ef0d
 800f1e0:	2000eed4 	.word	0x2000eed4
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d104      	bne.n	800f1f8 <tcp_process+0x5d8>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	68da      	ldr	r2, [r3, #12]
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	60da      	str	r2, [r3, #12]
 800f1f6:	e005      	b.n	800f204 <tcp_process+0x5e4>
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	617b      	str	r3, [r7, #20]
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1ef      	bne.n	800f1e4 <tcp_process+0x5c4>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	60da      	str	r2, [r3, #12]
 800f20a:	4b77      	ldr	r3, [pc, #476]	; (800f3e8 <tcp_process+0x7c8>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	220a      	movs	r2, #10
 800f214:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f216:	4b75      	ldr	r3, [pc, #468]	; (800f3ec <tcp_process+0x7cc>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	60da      	str	r2, [r3, #12]
 800f21e:	4a73      	ldr	r2, [pc, #460]	; (800f3ec <tcp_process+0x7cc>)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6013      	str	r3, [r2, #0]
 800f224:	f003 f952 	bl	80124cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f228:	e0d2      	b.n	800f3d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	8b5b      	ldrh	r3, [r3, #26]
 800f22e:	f043 0302 	orr.w	r3, r3, #2
 800f232:	b29a      	uxth	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2208      	movs	r2, #8
 800f23c:	751a      	strb	r2, [r3, #20]
      break;
 800f23e:	e0c7      	b.n	800f3d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f240:	4b6b      	ldr	r3, [pc, #428]	; (800f3f0 <tcp_process+0x7d0>)
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	f003 0310 	and.w	r3, r3, #16
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f000 80c1 	beq.w	800f3d0 <tcp_process+0x7b0>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f252:	4b68      	ldr	r3, [pc, #416]	; (800f3f4 <tcp_process+0x7d4>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	429a      	cmp	r2, r3
 800f258:	f040 80ba 	bne.w	800f3d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f260:	2b00      	cmp	r3, #0
 800f262:	f040 80b5 	bne.w	800f3d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2206      	movs	r2, #6
 800f26a:	751a      	strb	r2, [r3, #20]
      break;
 800f26c:	e0b0      	b.n	800f3d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f9ca 	bl	800f608 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f274:	4b60      	ldr	r3, [pc, #384]	; (800f3f8 <tcp_process+0x7d8>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	f003 0320 	and.w	r3, r3, #32
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f000 80a9 	beq.w	800f3d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	8b5b      	ldrh	r3, [r3, #26]
 800f286:	f043 0302 	orr.w	r3, r3, #2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7fe fd39 	bl	800dd08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f296:	4b59      	ldr	r3, [pc, #356]	; (800f3fc <tcp_process+0x7dc>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d105      	bne.n	800f2ac <tcp_process+0x68c>
 800f2a0:	4b56      	ldr	r3, [pc, #344]	; (800f3fc <tcp_process+0x7dc>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	4a55      	ldr	r2, [pc, #340]	; (800f3fc <tcp_process+0x7dc>)
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	e013      	b.n	800f2d4 <tcp_process+0x6b4>
 800f2ac:	4b53      	ldr	r3, [pc, #332]	; (800f3fc <tcp_process+0x7dc>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	613b      	str	r3, [r7, #16]
 800f2b2:	e00c      	b.n	800f2ce <tcp_process+0x6ae>
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d104      	bne.n	800f2c8 <tcp_process+0x6a8>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	68da      	ldr	r2, [r3, #12]
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	60da      	str	r2, [r3, #12]
 800f2c6:	e005      	b.n	800f2d4 <tcp_process+0x6b4>
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	613b      	str	r3, [r7, #16]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1ef      	bne.n	800f2b4 <tcp_process+0x694>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	60da      	str	r2, [r3, #12]
 800f2da:	4b43      	ldr	r3, [pc, #268]	; (800f3e8 <tcp_process+0x7c8>)
 800f2dc:	2201      	movs	r2, #1
 800f2de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	220a      	movs	r2, #10
 800f2e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f2e6:	4b41      	ldr	r3, [pc, #260]	; (800f3ec <tcp_process+0x7cc>)
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	60da      	str	r2, [r3, #12]
 800f2ee:	4a3f      	ldr	r2, [pc, #252]	; (800f3ec <tcp_process+0x7cc>)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	f003 f8ea 	bl	80124cc <tcp_timer_needed>
      }
      break;
 800f2f8:	e06c      	b.n	800f3d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 f984 	bl	800f608 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f300:	4b3b      	ldr	r3, [pc, #236]	; (800f3f0 <tcp_process+0x7d0>)
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f003 0310 	and.w	r3, r3, #16
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d065      	beq.n	800f3d8 <tcp_process+0x7b8>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f310:	4b38      	ldr	r3, [pc, #224]	; (800f3f4 <tcp_process+0x7d4>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d15f      	bne.n	800f3d8 <tcp_process+0x7b8>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d15b      	bne.n	800f3d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7fe fcf1 	bl	800dd08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f326:	4b35      	ldr	r3, [pc, #212]	; (800f3fc <tcp_process+0x7dc>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d105      	bne.n	800f33c <tcp_process+0x71c>
 800f330:	4b32      	ldr	r3, [pc, #200]	; (800f3fc <tcp_process+0x7dc>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	4a31      	ldr	r2, [pc, #196]	; (800f3fc <tcp_process+0x7dc>)
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	e013      	b.n	800f364 <tcp_process+0x744>
 800f33c:	4b2f      	ldr	r3, [pc, #188]	; (800f3fc <tcp_process+0x7dc>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	60fb      	str	r3, [r7, #12]
 800f342:	e00c      	b.n	800f35e <tcp_process+0x73e>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d104      	bne.n	800f358 <tcp_process+0x738>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	68da      	ldr	r2, [r3, #12]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	60da      	str	r2, [r3, #12]
 800f356:	e005      	b.n	800f364 <tcp_process+0x744>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1ef      	bne.n	800f344 <tcp_process+0x724>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	60da      	str	r2, [r3, #12]
 800f36a:	4b1f      	ldr	r3, [pc, #124]	; (800f3e8 <tcp_process+0x7c8>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	220a      	movs	r2, #10
 800f374:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f376:	4b1d      	ldr	r3, [pc, #116]	; (800f3ec <tcp_process+0x7cc>)
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	60da      	str	r2, [r3, #12]
 800f37e:	4a1b      	ldr	r2, [pc, #108]	; (800f3ec <tcp_process+0x7cc>)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	f003 f8a2 	bl	80124cc <tcp_timer_needed>
      }
      break;
 800f388:	e026      	b.n	800f3d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f93c 	bl	800f608 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f390:	4b17      	ldr	r3, [pc, #92]	; (800f3f0 <tcp_process+0x7d0>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0310 	and.w	r3, r3, #16
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d01f      	beq.n	800f3dc <tcp_process+0x7bc>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3a0:	4b14      	ldr	r3, [pc, #80]	; (800f3f4 <tcp_process+0x7d4>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d119      	bne.n	800f3dc <tcp_process+0x7bc>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d115      	bne.n	800f3dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f3b0:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <tcp_process+0x7d8>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f043 0310 	orr.w	r3, r3, #16
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <tcp_process+0x7d8>)
 800f3bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f3be:	e00d      	b.n	800f3dc <tcp_process+0x7bc>
    default:
      break;
 800f3c0:	bf00      	nop
 800f3c2:	e00c      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3c4:	bf00      	nop
 800f3c6:	e00a      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3c8:	bf00      	nop
 800f3ca:	e008      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3cc:	bf00      	nop
 800f3ce:	e006      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3d0:	bf00      	nop
 800f3d2:	e004      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3d4:	bf00      	nop
 800f3d6:	e002      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3d8:	bf00      	nop
 800f3da:	e000      	b.n	800f3de <tcp_process+0x7be>
      break;
 800f3dc:	bf00      	nop
  }
  return ERR_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3724      	adds	r7, #36	; 0x24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd90      	pop	{r4, r7, pc}
 800f3e8:	2000eedc 	.word	0x2000eedc
 800f3ec:	2000eed8 	.word	0x2000eed8
 800f3f0:	2000ef0c 	.word	0x2000ef0c
 800f3f4:	2000ef04 	.word	0x2000ef04
 800f3f8:	2000ef0d 	.word	0x2000ef0d
 800f3fc:	2000eed4 	.word	0x2000eed4

0800f400 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f400:	b590      	push	{r4, r7, lr}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d106      	bne.n	800f41e <tcp_oos_insert_segment+0x1e>
 800f410:	4b3b      	ldr	r3, [pc, #236]	; (800f500 <tcp_oos_insert_segment+0x100>)
 800f412:	f240 421f 	movw	r2, #1055	; 0x41f
 800f416:	493b      	ldr	r1, [pc, #236]	; (800f504 <tcp_oos_insert_segment+0x104>)
 800f418:	483b      	ldr	r0, [pc, #236]	; (800f508 <tcp_oos_insert_segment+0x108>)
 800f41a:	f006 fbbf 	bl	8015b9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68db      	ldr	r3, [r3, #12]
 800f422:	899b      	ldrh	r3, [r3, #12]
 800f424:	b29b      	uxth	r3, r3
 800f426:	4618      	mov	r0, r3
 800f428:	f7fb f93e 	bl	800a6a8 <lwip_htons>
 800f42c:	4603      	mov	r3, r0
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	f003 0301 	and.w	r3, r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	d028      	beq.n	800f48a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f438:	6838      	ldr	r0, [r7, #0]
 800f43a:	f7fe f995 	bl	800d768 <tcp_segs_free>
    next = NULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	603b      	str	r3, [r7, #0]
 800f442:	e056      	b.n	800f4f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	899b      	ldrh	r3, [r3, #12]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fb f92b 	bl	800a6a8 <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	f003 0301 	and.w	r3, r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00d      	beq.n	800f47a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	899b      	ldrh	r3, [r3, #12]
 800f464:	b29c      	uxth	r4, r3
 800f466:	2001      	movs	r0, #1
 800f468:	f7fb f91e 	bl	800a6a8 <lwip_htons>
 800f46c:	4603      	mov	r3, r0
 800f46e:	461a      	mov	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	4322      	orrs	r2, r4
 800f476:	b292      	uxth	r2, r2
 800f478:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f7fe f984 	bl	800d792 <tcp_seg_free>
    while (next &&
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00e      	beq.n	800f4ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	891b      	ldrh	r3, [r3, #8]
 800f494:	461a      	mov	r2, r3
 800f496:	4b1d      	ldr	r3, [pc, #116]	; (800f50c <tcp_oos_insert_segment+0x10c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	441a      	add	r2, r3
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	8909      	ldrh	r1, [r1, #8]
 800f4a6:	440b      	add	r3, r1
 800f4a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	daca      	bge.n	800f444 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01e      	beq.n	800f4f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	891b      	ldrh	r3, [r3, #8]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4b14      	ldr	r3, [pc, #80]	; (800f50c <tcp_oos_insert_segment+0x10c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	441a      	add	r2, r3
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dd12      	ble.n	800f4f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	4b0d      	ldr	r3, [pc, #52]	; (800f50c <tcp_oos_insert_segment+0x10c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	891b      	ldrh	r3, [r3, #8]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	f7fc fb47 	bl	800bb80 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	601a      	str	r2, [r3, #0]
}
 800f4f8:	bf00      	nop
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd90      	pop	{r4, r7, pc}
 800f500:	08018b0c 	.word	0x08018b0c
 800f504:	08018dcc 	.word	0x08018dcc
 800f508:	08018b58 	.word	0x08018b58
 800f50c:	2000ef00 	.word	0x2000ef00

0800f510 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f510:	b5b0      	push	{r4, r5, r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
 800f51c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f51e:	e03e      	b.n	800f59e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fc fd3a 	bl	800bfa8 <pbuf_clen>
 800f534:	4603      	mov	r3, r0
 800f536:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f53e:	8a7a      	ldrh	r2, [r7, #18]
 800f540:	429a      	cmp	r2, r3
 800f542:	d906      	bls.n	800f552 <tcp_free_acked_segments+0x42>
 800f544:	4b2a      	ldr	r3, [pc, #168]	; (800f5f0 <tcp_free_acked_segments+0xe0>)
 800f546:	f240 4257 	movw	r2, #1111	; 0x457
 800f54a:	492a      	ldr	r1, [pc, #168]	; (800f5f4 <tcp_free_acked_segments+0xe4>)
 800f54c:	482a      	ldr	r0, [pc, #168]	; (800f5f8 <tcp_free_acked_segments+0xe8>)
 800f54e:	f006 fb25 	bl	8015b9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f558:	8a7b      	ldrh	r3, [r7, #18]
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	891a      	ldrh	r2, [r3, #8]
 800f568:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <tcp_free_acked_segments+0xec>)
 800f56a:	881b      	ldrh	r3, [r3, #0]
 800f56c:	4413      	add	r3, r2
 800f56e:	b29a      	uxth	r2, r3
 800f570:	4b22      	ldr	r3, [pc, #136]	; (800f5fc <tcp_free_acked_segments+0xec>)
 800f572:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f574:	6978      	ldr	r0, [r7, #20]
 800f576:	f7fe f90c 	bl	800d792 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00c      	beq.n	800f59e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d109      	bne.n	800f59e <tcp_free_acked_segments+0x8e>
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d106      	bne.n	800f59e <tcp_free_acked_segments+0x8e>
 800f590:	4b17      	ldr	r3, [pc, #92]	; (800f5f0 <tcp_free_acked_segments+0xe0>)
 800f592:	f240 4261 	movw	r2, #1121	; 0x461
 800f596:	491a      	ldr	r1, [pc, #104]	; (800f600 <tcp_free_acked_segments+0xf0>)
 800f598:	4817      	ldr	r0, [pc, #92]	; (800f5f8 <tcp_free_acked_segments+0xe8>)
 800f59a:	f006 faff 	bl	8015b9c <iprintf>
  while (seg_list != NULL &&
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d020      	beq.n	800f5e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fb f891 	bl	800a6d2 <lwip_htonl>
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	891b      	ldrh	r3, [r3, #8]
 800f5b6:	461d      	mov	r5, r3
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	899b      	ldrh	r3, [r3, #12]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fb f871 	bl	800a6a8 <lwip_htons>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	f003 0303 	and.w	r3, r3, #3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <tcp_free_acked_segments+0xc6>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <tcp_free_acked_segments+0xc8>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	442b      	add	r3, r5
 800f5da:	18e2      	adds	r2, r4, r3
 800f5dc:	4b09      	ldr	r3, [pc, #36]	; (800f604 <tcp_free_acked_segments+0xf4>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	dd9c      	ble.n	800f520 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3718      	adds	r7, #24
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bdb0      	pop	{r4, r5, r7, pc}
 800f5f0:	08018b0c 	.word	0x08018b0c
 800f5f4:	08018df4 	.word	0x08018df4
 800f5f8:	08018b58 	.word	0x08018b58
 800f5fc:	2000ef08 	.word	0x2000ef08
 800f600:	08018e1c 	.word	0x08018e1c
 800f604:	2000ef04 	.word	0x2000ef04

0800f608 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f608:	b5b0      	push	{r4, r5, r7, lr}
 800f60a:	b094      	sub	sp, #80	; 0x50
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <tcp_receive+0x20>
 800f61a:	4b91      	ldr	r3, [pc, #580]	; (800f860 <tcp_receive+0x258>)
 800f61c:	f240 427b 	movw	r2, #1147	; 0x47b
 800f620:	4990      	ldr	r1, [pc, #576]	; (800f864 <tcp_receive+0x25c>)
 800f622:	4891      	ldr	r0, [pc, #580]	; (800f868 <tcp_receive+0x260>)
 800f624:	f006 faba 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b03      	cmp	r3, #3
 800f62e:	d806      	bhi.n	800f63e <tcp_receive+0x36>
 800f630:	4b8b      	ldr	r3, [pc, #556]	; (800f860 <tcp_receive+0x258>)
 800f632:	f240 427c 	movw	r2, #1148	; 0x47c
 800f636:	498d      	ldr	r1, [pc, #564]	; (800f86c <tcp_receive+0x264>)
 800f638:	488b      	ldr	r0, [pc, #556]	; (800f868 <tcp_receive+0x260>)
 800f63a:	f006 faaf 	bl	8015b9c <iprintf>

  if (flags & TCP_ACK) {
 800f63e:	4b8c      	ldr	r3, [pc, #560]	; (800f870 <tcp_receive+0x268>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f003 0310 	and.w	r3, r3, #16
 800f646:	2b00      	cmp	r3, #0
 800f648:	f000 8264 	beq.w	800fb14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f658:	4413      	add	r3, r2
 800f65a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f660:	4b84      	ldr	r3, [pc, #528]	; (800f874 <tcp_receive+0x26c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	db1b      	blt.n	800f6a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f66e:	4b81      	ldr	r3, [pc, #516]	; (800f874 <tcp_receive+0x26c>)
 800f670:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f672:	429a      	cmp	r2, r3
 800f674:	d106      	bne.n	800f684 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f67a:	4b7f      	ldr	r3, [pc, #508]	; (800f878 <tcp_receive+0x270>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	2b00      	cmp	r3, #0
 800f682:	db0e      	blt.n	800f6a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f688:	4b7b      	ldr	r3, [pc, #492]	; (800f878 <tcp_receive+0x270>)
 800f68a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d125      	bne.n	800f6dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f690:	4b7a      	ldr	r3, [pc, #488]	; (800f87c <tcp_receive+0x274>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	89db      	ldrh	r3, [r3, #14]
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d91c      	bls.n	800f6dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f6a2:	4b76      	ldr	r3, [pc, #472]	; (800f87c <tcp_receive+0x274>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	89db      	ldrh	r3, [r3, #14]
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d205      	bcs.n	800f6cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f6cc:	4b69      	ldr	r3, [pc, #420]	; (800f874 <tcp_receive+0x26c>)
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f6d4:	4b68      	ldr	r3, [pc, #416]	; (800f878 <tcp_receive+0x270>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f6dc:	4b66      	ldr	r3, [pc, #408]	; (800f878 <tcp_receive+0x270>)
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	dc58      	bgt.n	800f79c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f6ea:	4b65      	ldr	r3, [pc, #404]	; (800f880 <tcp_receive+0x278>)
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d14b      	bne.n	800f78a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f6fc:	4413      	add	r3, r2
 800f6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f700:	429a      	cmp	r2, r3
 800f702:	d142      	bne.n	800f78a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	db3d      	blt.n	800f78a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f712:	4b59      	ldr	r3, [pc, #356]	; (800f878 <tcp_receive+0x270>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	429a      	cmp	r2, r3
 800f718:	d137      	bne.n	800f78a <tcp_receive+0x182>
              found_dupack = 1;
 800f71a:	2301      	movs	r3, #1
 800f71c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f724:	2bff      	cmp	r3, #255	; 0xff
 800f726:	d007      	beq.n	800f738 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f72e:	3301      	adds	r3, #1
 800f730:	b2da      	uxtb	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d91b      	bls.n	800f77a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f74c:	4413      	add	r3, r2
 800f74e:	b29a      	uxth	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f756:	429a      	cmp	r2, r3
 800f758:	d30a      	bcc.n	800f770 <tcp_receive+0x168>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f764:	4413      	add	r3, r2
 800f766:	b29a      	uxth	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f76e:	e004      	b.n	800f77a <tcp_receive+0x172>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f776:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f780:	2b02      	cmp	r3, #2
 800f782:	d902      	bls.n	800f78a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f002 fb43 	bl	8011e10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f040 8161 	bne.w	800fa54 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f79a:	e15b      	b.n	800fa54 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f79c:	4b36      	ldr	r3, [pc, #216]	; (800f878 <tcp_receive+0x270>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a4:	1ad3      	subs	r3, r2, r3
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f2c0 814e 	blt.w	800fa4a <tcp_receive+0x442>
 800f7ae:	4b32      	ldr	r3, [pc, #200]	; (800f878 <tcp_receive+0x270>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f300 8146 	bgt.w	800fa4a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	8b5b      	ldrh	r3, [r3, #26]
 800f7c2:	f003 0304 	and.w	r3, r3, #4
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d010      	beq.n	800f7ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	8b5b      	ldrh	r3, [r3, #26]
 800f7ce:	f023 0304 	bic.w	r3, r3, #4
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7fa:	10db      	asrs	r3, r3, #3
 800f7fc:	b21b      	sxth	r3, r3
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f806:	b29b      	uxth	r3, r3
 800f808:	4413      	add	r3, r2
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	b21a      	sxth	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f814:	4b18      	ldr	r3, [pc, #96]	; (800f878 <tcp_receive+0x270>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	b29a      	uxth	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f81e:	b29b      	uxth	r3, r3
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f82c:	4b12      	ldr	r3, [pc, #72]	; (800f878 <tcp_receive+0x270>)
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7d1b      	ldrb	r3, [r3, #20]
 800f838:	2b03      	cmp	r3, #3
 800f83a:	f240 8097 	bls.w	800f96c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d245      	bcs.n	800f8da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	8b5b      	ldrh	r3, [r3, #26]
 800f852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f856:	2b00      	cmp	r3, #0
 800f858:	d014      	beq.n	800f884 <tcp_receive+0x27c>
 800f85a:	2301      	movs	r3, #1
 800f85c:	e013      	b.n	800f886 <tcp_receive+0x27e>
 800f85e:	bf00      	nop
 800f860:	08018b0c 	.word	0x08018b0c
 800f864:	08018e3c 	.word	0x08018e3c
 800f868:	08018b58 	.word	0x08018b58
 800f86c:	08018e58 	.word	0x08018e58
 800f870:	2000ef0c 	.word	0x2000ef0c
 800f874:	2000ef00 	.word	0x2000ef00
 800f878:	2000ef04 	.word	0x2000ef04
 800f87c:	2000eef0 	.word	0x2000eef0
 800f880:	2000ef0a 	.word	0x2000ef0a
 800f884:	2302      	movs	r3, #2
 800f886:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f88a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f88e:	b29a      	uxth	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f894:	fb12 f303 	smulbb	r3, r2, r3
 800f898:	b29b      	uxth	r3, r3
 800f89a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f89c:	4293      	cmp	r3, r2
 800f89e:	bf28      	it	cs
 800f8a0:	4613      	movcs	r3, r2
 800f8a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8ac:	4413      	add	r3, r2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d309      	bcc.n	800f8ce <tcp_receive+0x2c6>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8c2:	4413      	add	r3, r2
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f8cc:	e04e      	b.n	800f96c <tcp_receive+0x364>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f8d8:	e048      	b.n	800f96c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8e2:	4413      	add	r3, r2
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d309      	bcc.n	800f904 <tcp_receive+0x2fc>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8f8:	4413      	add	r3, r2
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f902:	e004      	b.n	800f90e <tcp_receive+0x306>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f90a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d326      	bcc.n	800f96c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f93e:	4413      	add	r3, r2
 800f940:	b29a      	uxth	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f948:	429a      	cmp	r2, r3
 800f94a:	d30a      	bcc.n	800f962 <tcp_receive+0x35a>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f956:	4413      	add	r3, r2
 800f958:	b29a      	uxth	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f960:	e004      	b.n	800f96c <tcp_receive+0x364>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f968:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f974:	4a98      	ldr	r2, [pc, #608]	; (800fbd8 <tcp_receive+0x5d0>)
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff fdca 	bl	800f510 <tcp_free_acked_segments>
 800f97c:	4602      	mov	r2, r0
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f98a:	4a94      	ldr	r2, [pc, #592]	; (800fbdc <tcp_receive+0x5d4>)
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff fdbf 	bl	800f510 <tcp_free_acked_segments>
 800f992:	4602      	mov	r2, r0
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d104      	bne.n	800f9aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9a6:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9a8:	e002      	b.n	800f9b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d103      	bne.n	800f9c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f9cc:	4b84      	ldr	r3, [pc, #528]	; (800fbe0 <tcp_receive+0x5d8>)
 800f9ce:	881b      	ldrh	r3, [r3, #0]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	8b5b      	ldrh	r3, [r3, #26]
 800f9de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d035      	beq.n	800fa52 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d118      	bne.n	800fa20 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00c      	beq.n	800fa10 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fa fe65 	bl	800a6d2 <lwip_htonl>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dc20      	bgt.n	800fa52 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8b5b      	ldrh	r3, [r3, #26]
 800fa14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa1e:	e018      	b.n	800fa52 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fa fe50 	bl	800a6d2 <lwip_htonl>
 800fa32:	4603      	mov	r3, r0
 800fa34:	1ae3      	subs	r3, r4, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	dc0b      	bgt.n	800fa52 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8b5b      	ldrh	r3, [r3, #26]
 800fa3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa48:	e003      	b.n	800fa52 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f002 fbce 	bl	80121ec <tcp_send_empty_ack>
 800fa50:	e000      	b.n	800fa54 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa52:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d05b      	beq.n	800fb14 <tcp_receive+0x50c>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa60:	4b60      	ldr	r3, [pc, #384]	; (800fbe4 <tcp_receive+0x5dc>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	da54      	bge.n	800fb14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fa6a:	4b5f      	ldr	r3, [pc, #380]	; (800fbe8 <tcp_receive+0x5e0>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fa7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa88:	10db      	asrs	r3, r3, #3
 800fa8a:	b21b      	sxth	r3, r3
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800faa2:	4413      	add	r3, r2
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	b21a      	sxth	r2, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800faac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	da05      	bge.n	800fac0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fab8:	425b      	negs	r3, r3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fac0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800faca:	109b      	asrs	r3, r3, #2
 800facc:	b21b      	sxth	r3, r3
 800face:	b29b      	uxth	r3, r3
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fade:	b29a      	uxth	r2, r3
 800fae0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fae4:	4413      	add	r3, r2
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	b21a      	sxth	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800faf4:	10db      	asrs	r3, r3, #3
 800faf6:	b21b      	sxth	r3, r3
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4413      	add	r3, r2
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	b21a      	sxth	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fb14:	4b35      	ldr	r3, [pc, #212]	; (800fbec <tcp_receive+0x5e4>)
 800fb16:	881b      	ldrh	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f000 84e2 	beq.w	80104e2 <tcp_receive+0xeda>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	7d1b      	ldrb	r3, [r3, #20]
 800fb22:	2b06      	cmp	r3, #6
 800fb24:	f200 84dd 	bhi.w	80104e2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb2c:	4b30      	ldr	r3, [pc, #192]	; (800fbf0 <tcp_receive+0x5e8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	3b01      	subs	r3, #1
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f2c0 808f 	blt.w	800fc58 <tcp_receive+0x650>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb3e:	4b2b      	ldr	r3, [pc, #172]	; (800fbec <tcp_receive+0x5e4>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	4619      	mov	r1, r3
 800fb44:	4b2a      	ldr	r3, [pc, #168]	; (800fbf0 <tcp_receive+0x5e8>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	440b      	add	r3, r1
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f300 8082 	bgt.w	800fc58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb54:	4b27      	ldr	r3, [pc, #156]	; (800fbf4 <tcp_receive+0x5ec>)
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb5e:	4b24      	ldr	r3, [pc, #144]	; (800fbf0 <tcp_receive+0x5e8>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fb66:	4b23      	ldr	r3, [pc, #140]	; (800fbf4 <tcp_receive+0x5ec>)
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_receive+0x574>
 800fb6e:	4b22      	ldr	r3, [pc, #136]	; (800fbf8 <tcp_receive+0x5f0>)
 800fb70:	f240 5294 	movw	r2, #1428	; 0x594
 800fb74:	4921      	ldr	r1, [pc, #132]	; (800fbfc <tcp_receive+0x5f4>)
 800fb76:	4822      	ldr	r0, [pc, #136]	; (800fc00 <tcp_receive+0x5f8>)
 800fb78:	f006 f810 	bl	8015b9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d906      	bls.n	800fb94 <tcp_receive+0x58c>
 800fb86:	4b1c      	ldr	r3, [pc, #112]	; (800fbf8 <tcp_receive+0x5f0>)
 800fb88:	f240 5295 	movw	r2, #1429	; 0x595
 800fb8c:	491d      	ldr	r1, [pc, #116]	; (800fc04 <tcp_receive+0x5fc>)
 800fb8e:	481c      	ldr	r0, [pc, #112]	; (800fc00 <tcp_receive+0x5f8>)
 800fb90:	f006 f804 	bl	8015b9c <iprintf>
      off = (u16_t)off32;
 800fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fb9a:	4b16      	ldr	r3, [pc, #88]	; (800fbf4 <tcp_receive+0x5ec>)
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	891b      	ldrh	r3, [r3, #8]
 800fba0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d906      	bls.n	800fbb6 <tcp_receive+0x5ae>
 800fba8:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <tcp_receive+0x5f0>)
 800fbaa:	f240 5297 	movw	r2, #1431	; 0x597
 800fbae:	4916      	ldr	r1, [pc, #88]	; (800fc08 <tcp_receive+0x600>)
 800fbb0:	4813      	ldr	r0, [pc, #76]	; (800fc00 <tcp_receive+0x5f8>)
 800fbb2:	f005 fff3 	bl	8015b9c <iprintf>
      inseg.len -= off;
 800fbb6:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <tcp_receive+0x5ec>)
 800fbb8:	891a      	ldrh	r2, [r3, #8]
 800fbba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b0c      	ldr	r3, [pc, #48]	; (800fbf4 <tcp_receive+0x5ec>)
 800fbc4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fbc6:	4b0b      	ldr	r3, [pc, #44]	; (800fbf4 <tcp_receive+0x5ec>)
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	891a      	ldrh	r2, [r3, #8]
 800fbcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fbd4:	e02a      	b.n	800fc2c <tcp_receive+0x624>
 800fbd6:	bf00      	nop
 800fbd8:	08018e74 	.word	0x08018e74
 800fbdc:	08018e7c 	.word	0x08018e7c
 800fbe0:	2000ef08 	.word	0x2000ef08
 800fbe4:	2000ef04 	.word	0x2000ef04
 800fbe8:	2000eec8 	.word	0x2000eec8
 800fbec:	2000ef0a 	.word	0x2000ef0a
 800fbf0:	2000ef00 	.word	0x2000ef00
 800fbf4:	2000eee0 	.word	0x2000eee0
 800fbf8:	08018b0c 	.word	0x08018b0c
 800fbfc:	08018e84 	.word	0x08018e84
 800fc00:	08018b58 	.word	0x08018b58
 800fc04:	08018e94 	.word	0x08018e94
 800fc08:	08018ea4 	.word	0x08018ea4
        off -= p->len;
 800fc0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc0e:	895b      	ldrh	r3, [r3, #10]
 800fc10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fc1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc22:	2200      	movs	r2, #0
 800fc24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fc26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc2e:	895b      	ldrh	r3, [r3, #10]
 800fc30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d8e9      	bhi.n	800fc0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fc38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc40:	f7fc f89e 	bl	800bd80 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc48:	4a91      	ldr	r2, [pc, #580]	; (800fe90 <tcp_receive+0x888>)
 800fc4a:	6013      	str	r3, [r2, #0]
 800fc4c:	4b91      	ldr	r3, [pc, #580]	; (800fe94 <tcp_receive+0x88c>)
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	4a8f      	ldr	r2, [pc, #572]	; (800fe90 <tcp_receive+0x888>)
 800fc52:	6812      	ldr	r2, [r2, #0]
 800fc54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc56:	e00d      	b.n	800fc74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc58:	4b8d      	ldr	r3, [pc, #564]	; (800fe90 <tcp_receive+0x888>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	da06      	bge.n	800fc74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8b5b      	ldrh	r3, [r3, #26]
 800fc6a:	f043 0302 	orr.w	r3, r3, #2
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc74:	4b86      	ldr	r3, [pc, #536]	; (800fe90 <tcp_receive+0x888>)
 800fc76:	681a      	ldr	r2, [r3, #0]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7c:	1ad3      	subs	r3, r2, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f2c0 842a 	blt.w	80104d8 <tcp_receive+0xed0>
 800fc84:	4b82      	ldr	r3, [pc, #520]	; (800fe90 <tcp_receive+0x888>)
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc90:	440b      	add	r3, r1
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	3301      	adds	r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f300 841e 	bgt.w	80104d8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fca0:	4b7b      	ldr	r3, [pc, #492]	; (800fe90 <tcp_receive+0x888>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	f040 829a 	bne.w	80101de <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fcaa:	4b7a      	ldr	r3, [pc, #488]	; (800fe94 <tcp_receive+0x88c>)
 800fcac:	891c      	ldrh	r4, [r3, #8]
 800fcae:	4b79      	ldr	r3, [pc, #484]	; (800fe94 <tcp_receive+0x88c>)
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	899b      	ldrh	r3, [r3, #12]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fa fcf6 	bl	800a6a8 <lwip_htons>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d001      	beq.n	800fccc <tcp_receive+0x6c4>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e000      	b.n	800fcce <tcp_receive+0x6c6>
 800fccc:	2300      	movs	r3, #0
 800fcce:	4423      	add	r3, r4
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	4b71      	ldr	r3, [pc, #452]	; (800fe98 <tcp_receive+0x890>)
 800fcd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcda:	4b6f      	ldr	r3, [pc, #444]	; (800fe98 <tcp_receive+0x890>)
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d275      	bcs.n	800fdce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fce2:	4b6c      	ldr	r3, [pc, #432]	; (800fe94 <tcp_receive+0x88c>)
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fa fcdc 	bl	800a6a8 <lwip_htons>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d01f      	beq.n	800fd3c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fcfc:	4b65      	ldr	r3, [pc, #404]	; (800fe94 <tcp_receive+0x88c>)
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	899b      	ldrh	r3, [r3, #12]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	b21b      	sxth	r3, r3
 800fd06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd0a:	b21c      	sxth	r4, r3
 800fd0c:	4b61      	ldr	r3, [pc, #388]	; (800fe94 <tcp_receive+0x88c>)
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	899b      	ldrh	r3, [r3, #12]
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fa fcc7 	bl	800a6a8 <lwip_htons>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fa fcbe 	bl	800a6a8 <lwip_htons>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	b21b      	sxth	r3, r3
 800fd30:	4323      	orrs	r3, r4
 800fd32:	b21a      	sxth	r2, r3
 800fd34:	4b57      	ldr	r3, [pc, #348]	; (800fe94 <tcp_receive+0x88c>)
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	b292      	uxth	r2, r2
 800fd3a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd40:	4b54      	ldr	r3, [pc, #336]	; (800fe94 <tcp_receive+0x88c>)
 800fd42:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd44:	4b53      	ldr	r3, [pc, #332]	; (800fe94 <tcp_receive+0x88c>)
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	899b      	ldrh	r3, [r3, #12]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fa fcab 	bl	800a6a8 <lwip_htons>
 800fd52:	4603      	mov	r3, r0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	f003 0302 	and.w	r3, r3, #2
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d005      	beq.n	800fd6a <tcp_receive+0x762>
            inseg.len -= 1;
 800fd5e:	4b4d      	ldr	r3, [pc, #308]	; (800fe94 <tcp_receive+0x88c>)
 800fd60:	891b      	ldrh	r3, [r3, #8]
 800fd62:	3b01      	subs	r3, #1
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	4b4b      	ldr	r3, [pc, #300]	; (800fe94 <tcp_receive+0x88c>)
 800fd68:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fd6a:	4b4a      	ldr	r3, [pc, #296]	; (800fe94 <tcp_receive+0x88c>)
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	4a49      	ldr	r2, [pc, #292]	; (800fe94 <tcp_receive+0x88c>)
 800fd70:	8912      	ldrh	r2, [r2, #8]
 800fd72:	4611      	mov	r1, r2
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fb ff03 	bl	800bb80 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fd7a:	4b46      	ldr	r3, [pc, #280]	; (800fe94 <tcp_receive+0x88c>)
 800fd7c:	891c      	ldrh	r4, [r3, #8]
 800fd7e:	4b45      	ldr	r3, [pc, #276]	; (800fe94 <tcp_receive+0x88c>)
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	899b      	ldrh	r3, [r3, #12]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fa fc8e 	bl	800a6a8 <lwip_htons>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	f003 0303 	and.w	r3, r3, #3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d001      	beq.n	800fd9c <tcp_receive+0x794>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e000      	b.n	800fd9e <tcp_receive+0x796>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4423      	add	r3, r4
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	4b3d      	ldr	r3, [pc, #244]	; (800fe98 <tcp_receive+0x890>)
 800fda4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fda6:	4b3c      	ldr	r3, [pc, #240]	; (800fe98 <tcp_receive+0x890>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4b38      	ldr	r3, [pc, #224]	; (800fe90 <tcp_receive+0x888>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	441a      	add	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdba:	440b      	add	r3, r1
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d006      	beq.n	800fdce <tcp_receive+0x7c6>
 800fdc0:	4b36      	ldr	r3, [pc, #216]	; (800fe9c <tcp_receive+0x894>)
 800fdc2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fdc6:	4936      	ldr	r1, [pc, #216]	; (800fea0 <tcp_receive+0x898>)
 800fdc8:	4836      	ldr	r0, [pc, #216]	; (800fea4 <tcp_receive+0x89c>)
 800fdca:	f005 fee7 	bl	8015b9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f000 80e7 	beq.w	800ffa6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fdd8:	4b2e      	ldr	r3, [pc, #184]	; (800fe94 <tcp_receive+0x88c>)
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	899b      	ldrh	r3, [r3, #12]
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fa fc61 	bl	800a6a8 <lwip_htons>
 800fde6:	4603      	mov	r3, r0
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	f003 0301 	and.w	r3, r3, #1
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d010      	beq.n	800fe14 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fdf2:	e00a      	b.n	800fe0a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7fd fcc4 	bl	800d792 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1f0      	bne.n	800fdf4 <tcp_receive+0x7ec>
 800fe12:	e0c8      	b.n	800ffa6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe18:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fe1a:	e052      	b.n	800fec2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	899b      	ldrh	r3, [r3, #12]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fa fc3f 	bl	800a6a8 <lwip_htons>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d03d      	beq.n	800feb2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fe36:	4b17      	ldr	r3, [pc, #92]	; (800fe94 <tcp_receive+0x88c>)
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	899b      	ldrh	r3, [r3, #12]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fa fc32 	bl	800a6a8 <lwip_htons>
 800fe44:	4603      	mov	r3, r0
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d130      	bne.n	800feb2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe50:	4b10      	ldr	r3, [pc, #64]	; (800fe94 <tcp_receive+0x88c>)
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	b29c      	uxth	r4, r3
 800fe58:	2001      	movs	r0, #1
 800fe5a:	f7fa fc25 	bl	800a6a8 <lwip_htons>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	461a      	mov	r2, r3
 800fe62:	4b0c      	ldr	r3, [pc, #48]	; (800fe94 <tcp_receive+0x88c>)
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	4322      	orrs	r2, r4
 800fe68:	b292      	uxth	r2, r2
 800fe6a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <tcp_receive+0x88c>)
 800fe6e:	891c      	ldrh	r4, [r3, #8]
 800fe70:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <tcp_receive+0x88c>)
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fa fc15 	bl	800a6a8 <lwip_htons>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	f003 0303 	and.w	r3, r3, #3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00e      	beq.n	800fea8 <tcp_receive+0x8a0>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e00d      	b.n	800feaa <tcp_receive+0x8a2>
 800fe8e:	bf00      	nop
 800fe90:	2000ef00 	.word	0x2000ef00
 800fe94:	2000eee0 	.word	0x2000eee0
 800fe98:	2000ef0a 	.word	0x2000ef0a
 800fe9c:	08018b0c 	.word	0x08018b0c
 800fea0:	08018eb4 	.word	0x08018eb4
 800fea4:	08018b58 	.word	0x08018b58
 800fea8:	2300      	movs	r3, #0
 800feaa:	4423      	add	r3, r4
 800feac:	b29a      	uxth	r2, r3
 800feae:	4b98      	ldr	r3, [pc, #608]	; (8010110 <tcp_receive+0xb08>)
 800feb0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800feb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800feb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800febc:	6938      	ldr	r0, [r7, #16]
 800febe:	f7fd fc68 	bl	800d792 <tcp_seg_free>
            while (next &&
 800fec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00e      	beq.n	800fee6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fec8:	4b91      	ldr	r3, [pc, #580]	; (8010110 <tcp_receive+0xb08>)
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	461a      	mov	r2, r3
 800fece:	4b91      	ldr	r3, [pc, #580]	; (8010114 <tcp_receive+0xb0c>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	441a      	add	r2, r3
 800fed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fedc:	8909      	ldrh	r1, [r1, #8]
 800fede:	440b      	add	r3, r1
 800fee0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	da9a      	bge.n	800fe1c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d059      	beq.n	800ffa0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800feec:	4b88      	ldr	r3, [pc, #544]	; (8010110 <tcp_receive+0xb08>)
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	461a      	mov	r2, r3
 800fef2:	4b88      	ldr	r3, [pc, #544]	; (8010114 <tcp_receive+0xb0c>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	441a      	add	r2, r3
 800fef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	dd4d      	ble.n	800ffa0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	4b81      	ldr	r3, [pc, #516]	; (8010114 <tcp_receive+0xb0c>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	4b80      	ldr	r3, [pc, #512]	; (8010118 <tcp_receive+0xb10>)
 800ff18:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff1a:	4b7f      	ldr	r3, [pc, #508]	; (8010118 <tcp_receive+0xb10>)
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	899b      	ldrh	r3, [r3, #12]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fa fbc0 	bl	800a6a8 <lwip_htons>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	f003 0302 	and.w	r3, r3, #2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d005      	beq.n	800ff40 <tcp_receive+0x938>
                inseg.len -= 1;
 800ff34:	4b78      	ldr	r3, [pc, #480]	; (8010118 <tcp_receive+0xb10>)
 800ff36:	891b      	ldrh	r3, [r3, #8]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	4b76      	ldr	r3, [pc, #472]	; (8010118 <tcp_receive+0xb10>)
 800ff3e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ff40:	4b75      	ldr	r3, [pc, #468]	; (8010118 <tcp_receive+0xb10>)
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	4a74      	ldr	r2, [pc, #464]	; (8010118 <tcp_receive+0xb10>)
 800ff46:	8912      	ldrh	r2, [r2, #8]
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fb fe18 	bl	800bb80 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff50:	4b71      	ldr	r3, [pc, #452]	; (8010118 <tcp_receive+0xb10>)
 800ff52:	891c      	ldrh	r4, [r3, #8]
 800ff54:	4b70      	ldr	r3, [pc, #448]	; (8010118 <tcp_receive+0xb10>)
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	899b      	ldrh	r3, [r3, #12]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fa fba3 	bl	800a6a8 <lwip_htons>
 800ff62:	4603      	mov	r3, r0
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	f003 0303 	and.w	r3, r3, #3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <tcp_receive+0x96a>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e000      	b.n	800ff74 <tcp_receive+0x96c>
 800ff72:	2300      	movs	r3, #0
 800ff74:	4423      	add	r3, r4
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	4b65      	ldr	r3, [pc, #404]	; (8010110 <tcp_receive+0xb08>)
 800ff7a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ff7c:	4b64      	ldr	r3, [pc, #400]	; (8010110 <tcp_receive+0xb08>)
 800ff7e:	881b      	ldrh	r3, [r3, #0]
 800ff80:	461a      	mov	r2, r3
 800ff82:	4b64      	ldr	r3, [pc, #400]	; (8010114 <tcp_receive+0xb0c>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	441a      	add	r2, r3
 800ff88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d006      	beq.n	800ffa0 <tcp_receive+0x998>
 800ff92:	4b62      	ldr	r3, [pc, #392]	; (801011c <tcp_receive+0xb14>)
 800ff94:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ff98:	4961      	ldr	r1, [pc, #388]	; (8010120 <tcp_receive+0xb18>)
 800ff9a:	4862      	ldr	r0, [pc, #392]	; (8010124 <tcp_receive+0xb1c>)
 800ff9c:	f005 fdfe 	bl	8015b9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffa4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ffa6:	4b5a      	ldr	r3, [pc, #360]	; (8010110 <tcp_receive+0xb08>)
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4b59      	ldr	r3, [pc, #356]	; (8010114 <tcp_receive+0xb0c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffba:	4b55      	ldr	r3, [pc, #340]	; (8010110 <tcp_receive+0xb08>)
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d206      	bcs.n	800ffd0 <tcp_receive+0x9c8>
 800ffc2:	4b56      	ldr	r3, [pc, #344]	; (801011c <tcp_receive+0xb14>)
 800ffc4:	f240 6207 	movw	r2, #1543	; 0x607
 800ffc8:	4957      	ldr	r1, [pc, #348]	; (8010128 <tcp_receive+0xb20>)
 800ffca:	4856      	ldr	r0, [pc, #344]	; (8010124 <tcp_receive+0xb1c>)
 800ffcc:	f005 fde6 	bl	8015b9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffd4:	4b4e      	ldr	r3, [pc, #312]	; (8010110 <tcp_receive+0xb08>)
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	1ad3      	subs	r3, r2, r3
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7fc feb1 	bl	800cd48 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ffe6:	4b4c      	ldr	r3, [pc, #304]	; (8010118 <tcp_receive+0xb10>)
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	891b      	ldrh	r3, [r3, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d006      	beq.n	800fffe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800fff0:	4b49      	ldr	r3, [pc, #292]	; (8010118 <tcp_receive+0xb10>)
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	4a4d      	ldr	r2, [pc, #308]	; (801012c <tcp_receive+0xb24>)
 800fff6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fff8:	4b47      	ldr	r3, [pc, #284]	; (8010118 <tcp_receive+0xb10>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fffe:	4b46      	ldr	r3, [pc, #280]	; (8010118 <tcp_receive+0xb10>)
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	899b      	ldrh	r3, [r3, #12]
 8010004:	b29b      	uxth	r3, r3
 8010006:	4618      	mov	r0, r3
 8010008:	f7fa fb4e 	bl	800a6a8 <lwip_htons>
 801000c:	4603      	mov	r3, r0
 801000e:	b2db      	uxtb	r3, r3
 8010010:	f003 0301 	and.w	r3, r3, #1
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 80b8 	beq.w	801018a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801001a:	4b45      	ldr	r3, [pc, #276]	; (8010130 <tcp_receive+0xb28>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	f043 0320 	orr.w	r3, r3, #32
 8010022:	b2da      	uxtb	r2, r3
 8010024:	4b42      	ldr	r3, [pc, #264]	; (8010130 <tcp_receive+0xb28>)
 8010026:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010028:	e0af      	b.n	801018a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801002e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	4a36      	ldr	r2, [pc, #216]	; (8010114 <tcp_receive+0xb0c>)
 801003a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	891b      	ldrh	r3, [r3, #8]
 8010040:	461c      	mov	r4, r3
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	899b      	ldrh	r3, [r3, #12]
 8010048:	b29b      	uxth	r3, r3
 801004a:	4618      	mov	r0, r3
 801004c:	f7fa fb2c 	bl	800a6a8 <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	b2db      	uxtb	r3, r3
 8010054:	f003 0303 	and.w	r3, r3, #3
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <tcp_receive+0xa58>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <tcp_receive+0xa5a>
 8010060:	2300      	movs	r3, #0
 8010062:	191a      	adds	r2, r3, r4
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010068:	441a      	add	r2, r3
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010072:	461c      	mov	r4, r3
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	891b      	ldrh	r3, [r3, #8]
 8010078:	461d      	mov	r5, r3
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	899b      	ldrh	r3, [r3, #12]
 8010080:	b29b      	uxth	r3, r3
 8010082:	4618      	mov	r0, r3
 8010084:	f7fa fb10 	bl	800a6a8 <lwip_htons>
 8010088:	4603      	mov	r3, r0
 801008a:	b2db      	uxtb	r3, r3
 801008c:	f003 0303 	and.w	r3, r3, #3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d001      	beq.n	8010098 <tcp_receive+0xa90>
 8010094:	2301      	movs	r3, #1
 8010096:	e000      	b.n	801009a <tcp_receive+0xa92>
 8010098:	2300      	movs	r3, #0
 801009a:	442b      	add	r3, r5
 801009c:	429c      	cmp	r4, r3
 801009e:	d206      	bcs.n	80100ae <tcp_receive+0xaa6>
 80100a0:	4b1e      	ldr	r3, [pc, #120]	; (801011c <tcp_receive+0xb14>)
 80100a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80100a6:	4923      	ldr	r1, [pc, #140]	; (8010134 <tcp_receive+0xb2c>)
 80100a8:	481e      	ldr	r0, [pc, #120]	; (8010124 <tcp_receive+0xb1c>)
 80100aa:	f005 fd77 	bl	8015b9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	891b      	ldrh	r3, [r3, #8]
 80100b2:	461c      	mov	r4, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	899b      	ldrh	r3, [r3, #12]
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fa faf3 	bl	800a6a8 <lwip_htons>
 80100c2:	4603      	mov	r3, r0
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	f003 0303 	and.w	r3, r3, #3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <tcp_receive+0xaca>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <tcp_receive+0xacc>
 80100d2:	2300      	movs	r3, #0
 80100d4:	1919      	adds	r1, r3, r4
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100da:	b28b      	uxth	r3, r1
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	b29a      	uxth	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7fc fe2f 	bl	800cd48 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	891b      	ldrh	r3, [r3, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d028      	beq.n	8010146 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80100f4:	4b0d      	ldr	r3, [pc, #52]	; (801012c <tcp_receive+0xb24>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01d      	beq.n	8010138 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80100fc:	4b0b      	ldr	r3, [pc, #44]	; (801012c <tcp_receive+0xb24>)
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	4619      	mov	r1, r3
 8010106:	4610      	mov	r0, r2
 8010108:	f7fb ff8e 	bl	800c028 <pbuf_cat>
 801010c:	e018      	b.n	8010140 <tcp_receive+0xb38>
 801010e:	bf00      	nop
 8010110:	2000ef0a 	.word	0x2000ef0a
 8010114:	2000ef00 	.word	0x2000ef00
 8010118:	2000eee0 	.word	0x2000eee0
 801011c:	08018b0c 	.word	0x08018b0c
 8010120:	08018eec 	.word	0x08018eec
 8010124:	08018b58 	.word	0x08018b58
 8010128:	08018f28 	.word	0x08018f28
 801012c:	2000ef10 	.word	0x2000ef10
 8010130:	2000ef0d 	.word	0x2000ef0d
 8010134:	08018f48 	.word	0x08018f48
            } else {
              recv_data = cseg->p;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	4a70      	ldr	r2, [pc, #448]	; (8010300 <tcp_receive+0xcf8>)
 801013e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2200      	movs	r2, #0
 8010144:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	899b      	ldrh	r3, [r3, #12]
 801014c:	b29b      	uxth	r3, r3
 801014e:	4618      	mov	r0, r3
 8010150:	f7fa faaa 	bl	800a6a8 <lwip_htons>
 8010154:	4603      	mov	r3, r0
 8010156:	b2db      	uxtb	r3, r3
 8010158:	f003 0301 	and.w	r3, r3, #1
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00d      	beq.n	801017c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010160:	4b68      	ldr	r3, [pc, #416]	; (8010304 <tcp_receive+0xcfc>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f043 0320 	orr.w	r3, r3, #32
 8010168:	b2da      	uxtb	r2, r3
 801016a:	4b66      	ldr	r3, [pc, #408]	; (8010304 <tcp_receive+0xcfc>)
 801016c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	7d1b      	ldrb	r3, [r3, #20]
 8010172:	2b04      	cmp	r3, #4
 8010174:	d102      	bne.n	801017c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2207      	movs	r2, #7
 801017a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010184:	68b8      	ldr	r0, [r7, #8]
 8010186:	f7fd fb04 	bl	800d792 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801018e:	2b00      	cmp	r3, #0
 8010190:	d008      	beq.n	80101a4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	685a      	ldr	r2, [r3, #4]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801019e:	429a      	cmp	r2, r3
 80101a0:	f43f af43 	beq.w	801002a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8b5b      	ldrh	r3, [r3, #26]
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00e      	beq.n	80101ce <tcp_receive+0xbc6>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	8b5b      	ldrh	r3, [r3, #26]
 80101b4:	f023 0301 	bic.w	r3, r3, #1
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	835a      	strh	r2, [r3, #26]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	8b5b      	ldrh	r3, [r3, #26]
 80101c2:	f043 0302 	orr.w	r3, r3, #2
 80101c6:	b29a      	uxth	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101cc:	e188      	b.n	80104e0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8b5b      	ldrh	r3, [r3, #26]
 80101d2:	f043 0301 	orr.w	r3, r3, #1
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80101dc:	e180      	b.n	80104e0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80101e6:	4848      	ldr	r0, [pc, #288]	; (8010308 <tcp_receive+0xd00>)
 80101e8:	f7fd faec 	bl	800d7c4 <tcp_seg_copy>
 80101ec:	4602      	mov	r2, r0
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	675a      	str	r2, [r3, #116]	; 0x74
 80101f2:	e16d      	b.n	80104d0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80101f4:	2300      	movs	r3, #0
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80101fe:	e157      	b.n	80104b0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	4b41      	ldr	r3, [pc, #260]	; (801030c <tcp_receive+0xd04>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	429a      	cmp	r2, r3
 801020c:	d11d      	bne.n	801024a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801020e:	4b3e      	ldr	r3, [pc, #248]	; (8010308 <tcp_receive+0xd00>)
 8010210:	891a      	ldrh	r2, [r3, #8]
 8010212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010214:	891b      	ldrh	r3, [r3, #8]
 8010216:	429a      	cmp	r2, r3
 8010218:	f240 814f 	bls.w	80104ba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801021c:	483a      	ldr	r0, [pc, #232]	; (8010308 <tcp_receive+0xd00>)
 801021e:	f7fd fad1 	bl	800d7c4 <tcp_seg_copy>
 8010222:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 8149 	beq.w	80104be <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801022c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022e:	2b00      	cmp	r3, #0
 8010230:	d003      	beq.n	801023a <tcp_receive+0xc32>
                    prev->next = cseg;
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	697a      	ldr	r2, [r7, #20]
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	e002      	b.n	8010240 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	697a      	ldr	r2, [r7, #20]
 801023e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010242:	6978      	ldr	r0, [r7, #20]
 8010244:	f7ff f8dc 	bl	800f400 <tcp_oos_insert_segment>
                }
                break;
 8010248:	e139      	b.n	80104be <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801024a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801024c:	2b00      	cmp	r3, #0
 801024e:	d117      	bne.n	8010280 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010250:	4b2e      	ldr	r3, [pc, #184]	; (801030c <tcp_receive+0xd04>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	da57      	bge.n	8010310 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010260:	4829      	ldr	r0, [pc, #164]	; (8010308 <tcp_receive+0xd00>)
 8010262:	f7fd faaf 	bl	800d7c4 <tcp_seg_copy>
 8010266:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f000 8129 	beq.w	80104c2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	69ba      	ldr	r2, [r7, #24]
 8010274:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010278:	69b8      	ldr	r0, [r7, #24]
 801027a:	f7ff f8c1 	bl	800f400 <tcp_oos_insert_segment>
                  }
                  break;
 801027e:	e120      	b.n	80104c2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010280:	4b22      	ldr	r3, [pc, #136]	; (801030c <tcp_receive+0xd04>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	3b01      	subs	r3, #1
 801028e:	2b00      	cmp	r3, #0
 8010290:	db3e      	blt.n	8010310 <tcp_receive+0xd08>
 8010292:	4b1e      	ldr	r3, [pc, #120]	; (801030c <tcp_receive+0xd04>)
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	3301      	adds	r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	dc35      	bgt.n	8010310 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80102a4:	4818      	ldr	r0, [pc, #96]	; (8010308 <tcp_receive+0xd00>)
 80102a6:	f7fd fa8d 	bl	800d7c4 <tcp_seg_copy>
 80102aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 8109 	beq.w	80104c6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80102b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102bc:	8912      	ldrh	r2, [r2, #8]
 80102be:	441a      	add	r2, r3
 80102c0:	4b12      	ldr	r3, [pc, #72]	; (801030c <tcp_receive+0xd04>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	dd12      	ble.n	80102f0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80102ca:	4b10      	ldr	r3, [pc, #64]	; (801030c <tcp_receive+0xd04>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b29a      	uxth	r2, r3
 80102dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80102e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e6:	891b      	ldrh	r3, [r3, #8]
 80102e8:	4619      	mov	r1, r3
 80102ea:	4610      	mov	r0, r2
 80102ec:	f7fb fc48 	bl	800bb80 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80102f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f2:	69fa      	ldr	r2, [r7, #28]
 80102f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80102f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102f8:	69f8      	ldr	r0, [r7, #28]
 80102fa:	f7ff f881 	bl	800f400 <tcp_oos_insert_segment>
                  }
                  break;
 80102fe:	e0e2      	b.n	80104c6 <tcp_receive+0xebe>
 8010300:	2000ef10 	.word	0x2000ef10
 8010304:	2000ef0d 	.word	0x2000ef0d
 8010308:	2000eee0 	.word	0x2000eee0
 801030c:	2000ef00 	.word	0x2000ef00
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	f040 80c6 	bne.w	80104aa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801031e:	4b80      	ldr	r3, [pc, #512]	; (8010520 <tcp_receive+0xf18>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801032a:	2b00      	cmp	r3, #0
 801032c:	f340 80bd 	ble.w	80104aa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	899b      	ldrh	r3, [r3, #12]
 8010336:	b29b      	uxth	r3, r3
 8010338:	4618      	mov	r0, r3
 801033a:	f7fa f9b5 	bl	800a6a8 <lwip_htons>
 801033e:	4603      	mov	r3, r0
 8010340:	b2db      	uxtb	r3, r3
 8010342:	f003 0301 	and.w	r3, r3, #1
 8010346:	2b00      	cmp	r3, #0
 8010348:	f040 80bf 	bne.w	80104ca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801034c:	4875      	ldr	r0, [pc, #468]	; (8010524 <tcp_receive+0xf1c>)
 801034e:	f7fd fa39 	bl	800d7c4 <tcp_seg_copy>
 8010352:	4602      	mov	r2, r0
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	f000 80b6 	beq.w	80104ce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801036a:	8912      	ldrh	r2, [r2, #8]
 801036c:	441a      	add	r2, r3
 801036e:	4b6c      	ldr	r3, [pc, #432]	; (8010520 <tcp_receive+0xf18>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	2b00      	cmp	r3, #0
 8010376:	dd12      	ble.n	801039e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010378:	4b69      	ldr	r3, [pc, #420]	; (8010520 <tcp_receive+0xf18>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	b29a      	uxth	r2, r3
 801037e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	b29b      	uxth	r3, r3
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	b29a      	uxth	r2, r3
 801038a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801038e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010394:	891b      	ldrh	r3, [r3, #8]
 8010396:	4619      	mov	r1, r3
 8010398:	4610      	mov	r0, r2
 801039a:	f7fb fbf1 	bl	800bb80 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801039e:	4b62      	ldr	r3, [pc, #392]	; (8010528 <tcp_receive+0xf20>)
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	461a      	mov	r2, r3
 80103a4:	4b5e      	ldr	r3, [pc, #376]	; (8010520 <tcp_receive+0xf18>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	441a      	add	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103b2:	440b      	add	r3, r1
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f340 8089 	ble.w	80104ce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80103bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	899b      	ldrh	r3, [r3, #12]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fa f96e 	bl	800a6a8 <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d022      	beq.n	801041e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80103d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	899b      	ldrh	r3, [r3, #12]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	b21b      	sxth	r3, r3
 80103e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80103e8:	b21c      	sxth	r4, r3
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	899b      	ldrh	r3, [r3, #12]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fa f957 	bl	800a6a8 <lwip_htons>
 80103fa:	4603      	mov	r3, r0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	b29b      	uxth	r3, r3
 8010400:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010404:	b29b      	uxth	r3, r3
 8010406:	4618      	mov	r0, r3
 8010408:	f7fa f94e 	bl	800a6a8 <lwip_htons>
 801040c:	4603      	mov	r3, r0
 801040e:	b21b      	sxth	r3, r3
 8010410:	4323      	orrs	r3, r4
 8010412:	b21a      	sxth	r2, r3
 8010414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	b292      	uxth	r2, r2
 801041c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010428:	4413      	add	r3, r2
 801042a:	b299      	uxth	r1, r3
 801042c:	4b3c      	ldr	r3, [pc, #240]	; (8010520 <tcp_receive+0xf18>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	b29a      	uxth	r2, r3
 8010432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	1a8a      	subs	r2, r1, r2
 8010438:	b292      	uxth	r2, r2
 801043a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685a      	ldr	r2, [r3, #4]
 8010442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	891b      	ldrh	r3, [r3, #8]
 8010448:	4619      	mov	r1, r3
 801044a:	4610      	mov	r0, r2
 801044c:	f7fb fb98 	bl	800bb80 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	891c      	ldrh	r4, [r3, #8]
 8010456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	899b      	ldrh	r3, [r3, #12]
 801045e:	b29b      	uxth	r3, r3
 8010460:	4618      	mov	r0, r3
 8010462:	f7fa f921 	bl	800a6a8 <lwip_htons>
 8010466:	4603      	mov	r3, r0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	f003 0303 	and.w	r3, r3, #3
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <tcp_receive+0xe6e>
 8010472:	2301      	movs	r3, #1
 8010474:	e000      	b.n	8010478 <tcp_receive+0xe70>
 8010476:	2300      	movs	r3, #0
 8010478:	4423      	add	r3, r4
 801047a:	b29a      	uxth	r2, r3
 801047c:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <tcp_receive+0xf20>)
 801047e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010480:	4b29      	ldr	r3, [pc, #164]	; (8010528 <tcp_receive+0xf20>)
 8010482:	881b      	ldrh	r3, [r3, #0]
 8010484:	461a      	mov	r2, r3
 8010486:	4b26      	ldr	r3, [pc, #152]	; (8010520 <tcp_receive+0xf18>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	441a      	add	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010490:	6879      	ldr	r1, [r7, #4]
 8010492:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010494:	440b      	add	r3, r1
 8010496:	429a      	cmp	r2, r3
 8010498:	d019      	beq.n	80104ce <tcp_receive+0xec6>
 801049a:	4b24      	ldr	r3, [pc, #144]	; (801052c <tcp_receive+0xf24>)
 801049c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80104a0:	4923      	ldr	r1, [pc, #140]	; (8010530 <tcp_receive+0xf28>)
 80104a2:	4824      	ldr	r0, [pc, #144]	; (8010534 <tcp_receive+0xf2c>)
 80104a4:	f005 fb7a 	bl	8015b9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80104a8:	e011      	b.n	80104ce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f47f aea4 	bne.w	8010200 <tcp_receive+0xbf8>
 80104b8:	e00a      	b.n	80104d0 <tcp_receive+0xec8>
                break;
 80104ba:	bf00      	nop
 80104bc:	e008      	b.n	80104d0 <tcp_receive+0xec8>
                break;
 80104be:	bf00      	nop
 80104c0:	e006      	b.n	80104d0 <tcp_receive+0xec8>
                  break;
 80104c2:	bf00      	nop
 80104c4:	e004      	b.n	80104d0 <tcp_receive+0xec8>
                  break;
 80104c6:	bf00      	nop
 80104c8:	e002      	b.n	80104d0 <tcp_receive+0xec8>
                  break;
 80104ca:	bf00      	nop
 80104cc:	e000      	b.n	80104d0 <tcp_receive+0xec8>
                break;
 80104ce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f001 fe8b 	bl	80121ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80104d6:	e003      	b.n	80104e0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f001 fe87 	bl	80121ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80104de:	e01a      	b.n	8010516 <tcp_receive+0xf0e>
 80104e0:	e019      	b.n	8010516 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80104e2:	4b0f      	ldr	r3, [pc, #60]	; (8010520 <tcp_receive+0xf18>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	db0a      	blt.n	8010506 <tcp_receive+0xefe>
 80104f0:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <tcp_receive+0xf18>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f8:	6879      	ldr	r1, [r7, #4]
 80104fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104fc:	440b      	add	r3, r1
 80104fe:	1ad3      	subs	r3, r2, r3
 8010500:	3301      	adds	r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	dd07      	ble.n	8010516 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8b5b      	ldrh	r3, [r3, #26]
 801050a:	f043 0302 	orr.w	r3, r3, #2
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010514:	e7ff      	b.n	8010516 <tcp_receive+0xf0e>
 8010516:	bf00      	nop
 8010518:	3750      	adds	r7, #80	; 0x50
 801051a:	46bd      	mov	sp, r7
 801051c:	bdb0      	pop	{r4, r5, r7, pc}
 801051e:	bf00      	nop
 8010520:	2000ef00 	.word	0x2000ef00
 8010524:	2000eee0 	.word	0x2000eee0
 8010528:	2000ef0a 	.word	0x2000ef0a
 801052c:	08018b0c 	.word	0x08018b0c
 8010530:	08018eb4 	.word	0x08018eb4
 8010534:	08018b58 	.word	0x08018b58

08010538 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801053e:	4b15      	ldr	r3, [pc, #84]	; (8010594 <tcp_get_next_optbyte+0x5c>)
 8010540:	881b      	ldrh	r3, [r3, #0]
 8010542:	1c5a      	adds	r2, r3, #1
 8010544:	b291      	uxth	r1, r2
 8010546:	4a13      	ldr	r2, [pc, #76]	; (8010594 <tcp_get_next_optbyte+0x5c>)
 8010548:	8011      	strh	r1, [r2, #0]
 801054a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801054c:	4b12      	ldr	r3, [pc, #72]	; (8010598 <tcp_get_next_optbyte+0x60>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d004      	beq.n	801055e <tcp_get_next_optbyte+0x26>
 8010554:	4b11      	ldr	r3, [pc, #68]	; (801059c <tcp_get_next_optbyte+0x64>)
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	88fa      	ldrh	r2, [r7, #6]
 801055a:	429a      	cmp	r2, r3
 801055c:	d208      	bcs.n	8010570 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801055e:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <tcp_get_next_optbyte+0x68>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3314      	adds	r3, #20
 8010564:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010566:	88fb      	ldrh	r3, [r7, #6]
 8010568:	683a      	ldr	r2, [r7, #0]
 801056a:	4413      	add	r3, r2
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	e00b      	b.n	8010588 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010570:	88fb      	ldrh	r3, [r7, #6]
 8010572:	b2da      	uxtb	r2, r3
 8010574:	4b09      	ldr	r3, [pc, #36]	; (801059c <tcp_get_next_optbyte+0x64>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	b2db      	uxtb	r3, r3
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801057e:	4b06      	ldr	r3, [pc, #24]	; (8010598 <tcp_get_next_optbyte+0x60>)
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	797b      	ldrb	r3, [r7, #5]
 8010584:	4413      	add	r3, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010588:	4618      	mov	r0, r3
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	2000eefc 	.word	0x2000eefc
 8010598:	2000eef8 	.word	0x2000eef8
 801059c:	2000eef6 	.word	0x2000eef6
 80105a0:	2000eef0 	.word	0x2000eef0

080105a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <tcp_parseopt+0x1c>
 80105b2:	4b32      	ldr	r3, [pc, #200]	; (801067c <tcp_parseopt+0xd8>)
 80105b4:	f240 727d 	movw	r2, #1917	; 0x77d
 80105b8:	4931      	ldr	r1, [pc, #196]	; (8010680 <tcp_parseopt+0xdc>)
 80105ba:	4832      	ldr	r0, [pc, #200]	; (8010684 <tcp_parseopt+0xe0>)
 80105bc:	f005 faee 	bl	8015b9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80105c0:	4b31      	ldr	r3, [pc, #196]	; (8010688 <tcp_parseopt+0xe4>)
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d055      	beq.n	8010674 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80105c8:	4b30      	ldr	r3, [pc, #192]	; (801068c <tcp_parseopt+0xe8>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	801a      	strh	r2, [r3, #0]
 80105ce:	e045      	b.n	801065c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80105d0:	f7ff ffb2 	bl	8010538 <tcp_get_next_optbyte>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d006      	beq.n	80105ec <tcp_parseopt+0x48>
 80105de:	2b02      	cmp	r3, #2
 80105e0:	dc2b      	bgt.n	801063a <tcp_parseopt+0x96>
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d041      	beq.n	801066a <tcp_parseopt+0xc6>
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d127      	bne.n	801063a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80105ea:	e037      	b.n	801065c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80105ec:	f7ff ffa4 	bl	8010538 <tcp_get_next_optbyte>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d13b      	bne.n	801066e <tcp_parseopt+0xca>
 80105f6:	4b25      	ldr	r3, [pc, #148]	; (801068c <tcp_parseopt+0xe8>)
 80105f8:	881b      	ldrh	r3, [r3, #0]
 80105fa:	3301      	adds	r3, #1
 80105fc:	4a22      	ldr	r2, [pc, #136]	; (8010688 <tcp_parseopt+0xe4>)
 80105fe:	8812      	ldrh	r2, [r2, #0]
 8010600:	4293      	cmp	r3, r2
 8010602:	da34      	bge.n	801066e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010604:	f7ff ff98 	bl	8010538 <tcp_get_next_optbyte>
 8010608:	4603      	mov	r3, r0
 801060a:	b29b      	uxth	r3, r3
 801060c:	021b      	lsls	r3, r3, #8
 801060e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010610:	f7ff ff92 	bl	8010538 <tcp_get_next_optbyte>
 8010614:	4603      	mov	r3, r0
 8010616:	b29a      	uxth	r2, r3
 8010618:	89bb      	ldrh	r3, [r7, #12]
 801061a:	4313      	orrs	r3, r2
 801061c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801061e:	89bb      	ldrh	r3, [r7, #12]
 8010620:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010624:	d804      	bhi.n	8010630 <tcp_parseopt+0x8c>
 8010626:	89bb      	ldrh	r3, [r7, #12]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <tcp_parseopt+0x8c>
 801062c:	89ba      	ldrh	r2, [r7, #12]
 801062e:	e001      	b.n	8010634 <tcp_parseopt+0x90>
 8010630:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010638:	e010      	b.n	801065c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801063a:	f7ff ff7d 	bl	8010538 <tcp_get_next_optbyte>
 801063e:	4603      	mov	r3, r0
 8010640:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010642:	7afb      	ldrb	r3, [r7, #11]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d914      	bls.n	8010672 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010648:	7afb      	ldrb	r3, [r7, #11]
 801064a:	b29a      	uxth	r2, r3
 801064c:	4b0f      	ldr	r3, [pc, #60]	; (801068c <tcp_parseopt+0xe8>)
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	4413      	add	r3, r2
 8010652:	b29b      	uxth	r3, r3
 8010654:	3b02      	subs	r3, #2
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <tcp_parseopt+0xe8>)
 801065a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801065c:	4b0b      	ldr	r3, [pc, #44]	; (801068c <tcp_parseopt+0xe8>)
 801065e:	881a      	ldrh	r2, [r3, #0]
 8010660:	4b09      	ldr	r3, [pc, #36]	; (8010688 <tcp_parseopt+0xe4>)
 8010662:	881b      	ldrh	r3, [r3, #0]
 8010664:	429a      	cmp	r2, r3
 8010666:	d3b3      	bcc.n	80105d0 <tcp_parseopt+0x2c>
 8010668:	e004      	b.n	8010674 <tcp_parseopt+0xd0>
          return;
 801066a:	bf00      	nop
 801066c:	e002      	b.n	8010674 <tcp_parseopt+0xd0>
            return;
 801066e:	bf00      	nop
 8010670:	e000      	b.n	8010674 <tcp_parseopt+0xd0>
            return;
 8010672:	bf00      	nop
      }
    }
  }
}
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	08018b0c 	.word	0x08018b0c
 8010680:	08018f70 	.word	0x08018f70
 8010684:	08018b58 	.word	0x08018b58
 8010688:	2000eef4 	.word	0x2000eef4
 801068c:	2000eefc 	.word	0x2000eefc

08010690 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010690:	b480      	push	{r7}
 8010692:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010694:	4b05      	ldr	r3, [pc, #20]	; (80106ac <tcp_trigger_input_pcb_close+0x1c>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	f043 0310 	orr.w	r3, r3, #16
 801069c:	b2da      	uxtb	r2, r3
 801069e:	4b03      	ldr	r3, [pc, #12]	; (80106ac <tcp_trigger_input_pcb_close+0x1c>)
 80106a0:	701a      	strb	r2, [r3, #0]
}
 80106a2:	bf00      	nop
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr
 80106ac:	2000ef0d 	.word	0x2000ef0d

080106b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00a      	beq.n	80106d8 <tcp_route+0x28>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	7a1b      	ldrb	r3, [r3, #8]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d006      	beq.n	80106d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	7a1b      	ldrb	r3, [r3, #8]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fb f84e 	bl	800b770 <netif_get_by_index>
 80106d4:	4603      	mov	r3, r0
 80106d6:	e003      	b.n	80106e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f003 fc4b 	bl	8013f74 <ip4_route>
 80106de:	4603      	mov	r3, r0
  }
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80106e8:	b590      	push	{r4, r7, lr}
 80106ea:	b087      	sub	sp, #28
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	603b      	str	r3, [r7, #0]
 80106f4:	4613      	mov	r3, r2
 80106f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d105      	bne.n	801070a <tcp_create_segment+0x22>
 80106fe:	4b44      	ldr	r3, [pc, #272]	; (8010810 <tcp_create_segment+0x128>)
 8010700:	22a3      	movs	r2, #163	; 0xa3
 8010702:	4944      	ldr	r1, [pc, #272]	; (8010814 <tcp_create_segment+0x12c>)
 8010704:	4844      	ldr	r0, [pc, #272]	; (8010818 <tcp_create_segment+0x130>)
 8010706:	f005 fa49 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d105      	bne.n	801071c <tcp_create_segment+0x34>
 8010710:	4b3f      	ldr	r3, [pc, #252]	; (8010810 <tcp_create_segment+0x128>)
 8010712:	22a4      	movs	r2, #164	; 0xa4
 8010714:	4941      	ldr	r1, [pc, #260]	; (801081c <tcp_create_segment+0x134>)
 8010716:	4840      	ldr	r0, [pc, #256]	; (8010818 <tcp_create_segment+0x130>)
 8010718:	f005 fa40 	bl	8015b9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801071c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	b2db      	uxtb	r3, r3
 8010724:	f003 0304 	and.w	r3, r3, #4
 8010728:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801072a:	2003      	movs	r0, #3
 801072c:	f7fa fc94 	bl	800b058 <memp_malloc>
 8010730:	6138      	str	r0, [r7, #16]
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d104      	bne.n	8010742 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010738:	68b8      	ldr	r0, [r7, #8]
 801073a:	f7fb fba7 	bl	800be8c <pbuf_free>
    return NULL;
 801073e:	2300      	movs	r3, #0
 8010740:	e061      	b.n	8010806 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010748:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	891a      	ldrh	r2, [r3, #8]
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	b29b      	uxth	r3, r3
 801075e:	429a      	cmp	r2, r3
 8010760:	d205      	bcs.n	801076e <tcp_create_segment+0x86>
 8010762:	4b2b      	ldr	r3, [pc, #172]	; (8010810 <tcp_create_segment+0x128>)
 8010764:	22b0      	movs	r2, #176	; 0xb0
 8010766:	492e      	ldr	r1, [pc, #184]	; (8010820 <tcp_create_segment+0x138>)
 8010768:	482b      	ldr	r0, [pc, #172]	; (8010818 <tcp_create_segment+0x130>)
 801076a:	f005 fa17 	bl	8015b9c <iprintf>
  seg->len = p->tot_len - optlen;
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	891a      	ldrh	r2, [r3, #8]
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	b29b      	uxth	r3, r3
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	b29a      	uxth	r2, r3
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801077e:	2114      	movs	r1, #20
 8010780:	68b8      	ldr	r0, [r7, #8]
 8010782:	f7fb faed 	bl	800bd60 <pbuf_add_header>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d004      	beq.n	8010796 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801078c:	6938      	ldr	r0, [r7, #16]
 801078e:	f7fd f800 	bl	800d792 <tcp_seg_free>
    return NULL;
 8010792:	2300      	movs	r3, #0
 8010794:	e037      	b.n	8010806 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	8ada      	ldrh	r2, [r3, #22]
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	68dc      	ldr	r4, [r3, #12]
 80107a8:	4610      	mov	r0, r2
 80107aa:	f7f9 ff7d 	bl	800a6a8 <lwip_htons>
 80107ae:	4603      	mov	r3, r0
 80107b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	8b1a      	ldrh	r2, [r3, #24]
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	68dc      	ldr	r4, [r3, #12]
 80107ba:	4610      	mov	r0, r2
 80107bc:	f7f9 ff74 	bl	800a6a8 <lwip_htons>
 80107c0:	4603      	mov	r3, r0
 80107c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	68dc      	ldr	r4, [r3, #12]
 80107c8:	6838      	ldr	r0, [r7, #0]
 80107ca:	f7f9 ff82 	bl	800a6d2 <lwip_htonl>
 80107ce:	4603      	mov	r3, r0
 80107d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	089b      	lsrs	r3, r3, #2
 80107d6:	b2db      	uxtb	r3, r3
 80107d8:	b29b      	uxth	r3, r3
 80107da:	3305      	adds	r3, #5
 80107dc:	b29b      	uxth	r3, r3
 80107de:	031b      	lsls	r3, r3, #12
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	79fb      	ldrb	r3, [r7, #7]
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	4313      	orrs	r3, r2
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	68dc      	ldr	r4, [r3, #12]
 80107ee:	4610      	mov	r0, r2
 80107f0:	f7f9 ff5a 	bl	800a6a8 <lwip_htons>
 80107f4:	4603      	mov	r3, r0
 80107f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	749a      	strb	r2, [r3, #18]
 8010800:	2200      	movs	r2, #0
 8010802:	74da      	strb	r2, [r3, #19]
  return seg;
 8010804:	693b      	ldr	r3, [r7, #16]
}
 8010806:	4618      	mov	r0, r3
 8010808:	371c      	adds	r7, #28
 801080a:	46bd      	mov	sp, r7
 801080c:	bd90      	pop	{r4, r7, pc}
 801080e:	bf00      	nop
 8010810:	08018f8c 	.word	0x08018f8c
 8010814:	08018fc0 	.word	0x08018fc0
 8010818:	08018fe0 	.word	0x08018fe0
 801081c:	08019008 	.word	0x08019008
 8010820:	0801902c 	.word	0x0801902c

08010824 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b086      	sub	sp, #24
 8010828:	af00      	add	r7, sp, #0
 801082a:	607b      	str	r3, [r7, #4]
 801082c:	4603      	mov	r3, r0
 801082e:	73fb      	strb	r3, [r7, #15]
 8010830:	460b      	mov	r3, r1
 8010832:	81bb      	strh	r3, [r7, #12]
 8010834:	4613      	mov	r3, r2
 8010836:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010838:	89bb      	ldrh	r3, [r7, #12]
 801083a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d105      	bne.n	801084e <tcp_pbuf_prealloc+0x2a>
 8010842:	4b30      	ldr	r3, [pc, #192]	; (8010904 <tcp_pbuf_prealloc+0xe0>)
 8010844:	22e8      	movs	r2, #232	; 0xe8
 8010846:	4930      	ldr	r1, [pc, #192]	; (8010908 <tcp_pbuf_prealloc+0xe4>)
 8010848:	4830      	ldr	r0, [pc, #192]	; (801090c <tcp_pbuf_prealloc+0xe8>)
 801084a:	f005 f9a7 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d105      	bne.n	8010860 <tcp_pbuf_prealloc+0x3c>
 8010854:	4b2b      	ldr	r3, [pc, #172]	; (8010904 <tcp_pbuf_prealloc+0xe0>)
 8010856:	22e9      	movs	r2, #233	; 0xe9
 8010858:	492d      	ldr	r1, [pc, #180]	; (8010910 <tcp_pbuf_prealloc+0xec>)
 801085a:	482c      	ldr	r0, [pc, #176]	; (801090c <tcp_pbuf_prealloc+0xe8>)
 801085c:	f005 f99e 	bl	8015b9c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010860:	89ba      	ldrh	r2, [r7, #12]
 8010862:	897b      	ldrh	r3, [r7, #10]
 8010864:	429a      	cmp	r2, r3
 8010866:	d221      	bcs.n	80108ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801086c:	f003 0302 	and.w	r3, r3, #2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d111      	bne.n	8010898 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	8b5b      	ldrh	r3, [r3, #26]
 8010878:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801087c:	2b00      	cmp	r3, #0
 801087e:	d115      	bne.n	80108ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010880:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010884:	2b00      	cmp	r3, #0
 8010886:	d007      	beq.n	8010898 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010888:	6a3b      	ldr	r3, [r7, #32]
 801088a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801088c:	2b00      	cmp	r3, #0
 801088e:	d103      	bne.n	8010898 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010890:	6a3b      	ldr	r3, [r7, #32]
 8010892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010894:	2b00      	cmp	r3, #0
 8010896:	d009      	beq.n	80108ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010898:	89bb      	ldrh	r3, [r7, #12]
 801089a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801089e:	f023 0203 	bic.w	r2, r3, #3
 80108a2:	897b      	ldrh	r3, [r7, #10]
 80108a4:	4293      	cmp	r3, r2
 80108a6:	bf28      	it	cs
 80108a8:	4613      	movcs	r3, r2
 80108aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80108ac:	8af9      	ldrh	r1, [r7, #22]
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
 80108b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fb f805 	bl	800b8c4 <pbuf_alloc>
 80108ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d101      	bne.n	80108c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	e019      	b.n	80108fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d006      	beq.n	80108dc <tcp_pbuf_prealloc+0xb8>
 80108ce:	4b0d      	ldr	r3, [pc, #52]	; (8010904 <tcp_pbuf_prealloc+0xe0>)
 80108d0:	f240 120b 	movw	r2, #267	; 0x10b
 80108d4:	490f      	ldr	r1, [pc, #60]	; (8010914 <tcp_pbuf_prealloc+0xf0>)
 80108d6:	480d      	ldr	r0, [pc, #52]	; (801090c <tcp_pbuf_prealloc+0xe8>)
 80108d8:	f005 f960 	bl	8015b9c <iprintf>
  *oversize = p->len - length;
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	895a      	ldrh	r2, [r3, #10]
 80108e0:	89bb      	ldrh	r3, [r7, #12]
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	89ba      	ldrh	r2, [r7, #12]
 80108ee:	811a      	strh	r2, [r3, #8]
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	891a      	ldrh	r2, [r3, #8]
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	815a      	strh	r2, [r3, #10]
  return p;
 80108f8:	693b      	ldr	r3, [r7, #16]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3718      	adds	r7, #24
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	08018f8c 	.word	0x08018f8c
 8010908:	08019044 	.word	0x08019044
 801090c:	08018fe0 	.word	0x08018fe0
 8010910:	08019068 	.word	0x08019068
 8010914:	08019088 	.word	0x08019088

08010918 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	460b      	mov	r3, r1
 8010922:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d106      	bne.n	8010938 <tcp_write_checks+0x20>
 801092a:	4b33      	ldr	r3, [pc, #204]	; (80109f8 <tcp_write_checks+0xe0>)
 801092c:	f240 1233 	movw	r2, #307	; 0x133
 8010930:	4932      	ldr	r1, [pc, #200]	; (80109fc <tcp_write_checks+0xe4>)
 8010932:	4833      	ldr	r0, [pc, #204]	; (8010a00 <tcp_write_checks+0xe8>)
 8010934:	f005 f932 	bl	8015b9c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	7d1b      	ldrb	r3, [r3, #20]
 801093c:	2b04      	cmp	r3, #4
 801093e:	d00e      	beq.n	801095e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010944:	2b07      	cmp	r3, #7
 8010946:	d00a      	beq.n	801095e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801094c:	2b02      	cmp	r3, #2
 801094e:	d006      	beq.n	801095e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010954:	2b03      	cmp	r3, #3
 8010956:	d002      	beq.n	801095e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010958:	f06f 030a 	mvn.w	r3, #10
 801095c:	e048      	b.n	80109f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801095e:	887b      	ldrh	r3, [r7, #2]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <tcp_write_checks+0x50>
    return ERR_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	e043      	b.n	80109f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801096e:	887a      	ldrh	r2, [r7, #2]
 8010970:	429a      	cmp	r2, r3
 8010972:	d909      	bls.n	8010988 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	8b5b      	ldrh	r3, [r3, #26]
 8010978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801097c:	b29a      	uxth	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010982:	f04f 33ff 	mov.w	r3, #4294967295
 8010986:	e033      	b.n	80109f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801098e:	2b08      	cmp	r3, #8
 8010990:	d909      	bls.n	80109a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	8b5b      	ldrh	r3, [r3, #26]
 8010996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801099a:	b29a      	uxth	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295
 80109a4:	e024      	b.n	80109f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00f      	beq.n	80109d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d11a      	bne.n	80109ee <tcp_write_checks+0xd6>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d116      	bne.n	80109ee <tcp_write_checks+0xd6>
 80109c0:	4b0d      	ldr	r3, [pc, #52]	; (80109f8 <tcp_write_checks+0xe0>)
 80109c2:	f240 1255 	movw	r2, #341	; 0x155
 80109c6:	490f      	ldr	r1, [pc, #60]	; (8010a04 <tcp_write_checks+0xec>)
 80109c8:	480d      	ldr	r0, [pc, #52]	; (8010a00 <tcp_write_checks+0xe8>)
 80109ca:	f005 f8e7 	bl	8015b9c <iprintf>
 80109ce:	e00e      	b.n	80109ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d103      	bne.n	80109e0 <tcp_write_checks+0xc8>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d006      	beq.n	80109ee <tcp_write_checks+0xd6>
 80109e0:	4b05      	ldr	r3, [pc, #20]	; (80109f8 <tcp_write_checks+0xe0>)
 80109e2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80109e6:	4908      	ldr	r1, [pc, #32]	; (8010a08 <tcp_write_checks+0xf0>)
 80109e8:	4805      	ldr	r0, [pc, #20]	; (8010a00 <tcp_write_checks+0xe8>)
 80109ea:	f005 f8d7 	bl	8015b9c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	08018f8c 	.word	0x08018f8c
 80109fc:	0801909c 	.word	0x0801909c
 8010a00:	08018fe0 	.word	0x08018fe0
 8010a04:	080190bc 	.word	0x080190bc
 8010a08:	080190f8 	.word	0x080190f8

08010a0c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010a0c:	b590      	push	{r4, r7, lr}
 8010a0e:	b09b      	sub	sp, #108	; 0x6c
 8010a10:	af04      	add	r7, sp, #16
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	4611      	mov	r1, r2
 8010a18:	461a      	mov	r2, r3
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	80fb      	strh	r3, [r7, #6]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010a22:	2300      	movs	r3, #0
 8010a24:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010a26:	2300      	movs	r3, #0
 8010a28:	653b      	str	r3, [r7, #80]	; 0x50
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a2e:	2300      	movs	r3, #0
 8010a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a32:	2300      	movs	r3, #0
 8010a34:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010a36:	2300      	movs	r3, #0
 8010a38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010a42:	2300      	movs	r3, #0
 8010a44:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010a46:	2300      	movs	r3, #0
 8010a48:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d109      	bne.n	8010a68 <tcp_write+0x5c>
 8010a54:	4ba4      	ldr	r3, [pc, #656]	; (8010ce8 <tcp_write+0x2dc>)
 8010a56:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010a5a:	49a4      	ldr	r1, [pc, #656]	; (8010cec <tcp_write+0x2e0>)
 8010a5c:	48a4      	ldr	r0, [pc, #656]	; (8010cf0 <tcp_write+0x2e4>)
 8010a5e:	f005 f89d 	bl	8015b9c <iprintf>
 8010a62:	f06f 030f 	mvn.w	r3, #15
 8010a66:	e32a      	b.n	80110be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a6e:	085b      	lsrs	r3, r3, #1
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a76:	4293      	cmp	r3, r2
 8010a78:	bf28      	it	cs
 8010a7a:	4613      	movcs	r3, r2
 8010a7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <tcp_write+0x7e>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a88:	e000      	b.n	8010a8c <tcp_write+0x80>
 8010a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d109      	bne.n	8010aa8 <tcp_write+0x9c>
 8010a94:	4b94      	ldr	r3, [pc, #592]	; (8010ce8 <tcp_write+0x2dc>)
 8010a96:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010a9a:	4996      	ldr	r1, [pc, #600]	; (8010cf4 <tcp_write+0x2e8>)
 8010a9c:	4894      	ldr	r0, [pc, #592]	; (8010cf0 <tcp_write+0x2e4>)
 8010a9e:	f005 f87d 	bl	8015b9c <iprintf>
 8010aa2:	f06f 030f 	mvn.w	r3, #15
 8010aa6:	e30a      	b.n	80110be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010aa8:	88fb      	ldrh	r3, [r7, #6]
 8010aaa:	4619      	mov	r1, r3
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f7ff ff33 	bl	8010918 <tcp_write_checks>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010ab8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d002      	beq.n	8010ac6 <tcp_write+0xba>
    return err;
 8010ac0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010ac4:	e2fb      	b.n	80110be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010acc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 80f6 	beq.w	8010ccc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8010ae6:	e002      	b.n	8010aee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1f8      	bne.n	8010ae8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010af8:	7a9b      	ldrb	r3, [r3, #10]
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	f003 0304 	and.w	r3, r3, #4
 8010b02:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b08:	891b      	ldrh	r3, [r3, #8]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	8c3b      	ldrh	r3, [r7, #32]
 8010b0e:	440b      	add	r3, r1
 8010b10:	429a      	cmp	r2, r3
 8010b12:	da06      	bge.n	8010b22 <tcp_write+0x116>
 8010b14:	4b74      	ldr	r3, [pc, #464]	; (8010ce8 <tcp_write+0x2dc>)
 8010b16:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010b1a:	4977      	ldr	r1, [pc, #476]	; (8010cf8 <tcp_write+0x2ec>)
 8010b1c:	4874      	ldr	r0, [pc, #464]	; (8010cf0 <tcp_write+0x2e4>)
 8010b1e:	f005 f83d 	bl	8015b9c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b24:	891a      	ldrh	r2, [r3, #8]
 8010b26:	8c3b      	ldrh	r3, [r7, #32]
 8010b28:	4413      	add	r3, r2
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b38:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010b3a:	8a7b      	ldrh	r3, [r7, #18]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d026      	beq.n	8010b8e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010b40:	8a7b      	ldrh	r3, [r7, #18]
 8010b42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d206      	bcs.n	8010b56 <tcp_write+0x14a>
 8010b48:	4b67      	ldr	r3, [pc, #412]	; (8010ce8 <tcp_write+0x2dc>)
 8010b4a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010b4e:	496b      	ldr	r1, [pc, #428]	; (8010cfc <tcp_write+0x2f0>)
 8010b50:	4867      	ldr	r0, [pc, #412]	; (8010cf0 <tcp_write+0x2e4>)
 8010b52:	f005 f823 	bl	8015b9c <iprintf>
      seg = last_unsent;
 8010b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b58:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010b5a:	8a7b      	ldrh	r3, [r7, #18]
 8010b5c:	88fa      	ldrh	r2, [r7, #6]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	bf28      	it	cs
 8010b62:	4613      	movcs	r3, r2
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	bf28      	it	cs
 8010b6c:	4613      	movcs	r3, r2
 8010b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b76:	4413      	add	r3, r2
 8010b78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010b7c:	8a7a      	ldrh	r2, [r7, #18]
 8010b7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b80:	1ad3      	subs	r3, r2, r3
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010b86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010b88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010b8e:	8a7b      	ldrh	r3, [r7, #18]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d00b      	beq.n	8010bac <tcp_write+0x1a0>
 8010b94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b98:	88fb      	ldrh	r3, [r7, #6]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d006      	beq.n	8010bac <tcp_write+0x1a0>
 8010b9e:	4b52      	ldr	r3, [pc, #328]	; (8010ce8 <tcp_write+0x2dc>)
 8010ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ba4:	4956      	ldr	r1, [pc, #344]	; (8010d00 <tcp_write+0x2f4>)
 8010ba6:	4852      	ldr	r0, [pc, #328]	; (8010cf0 <tcp_write+0x2e4>)
 8010ba8:	f004 fff8 	bl	8015b9c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010bac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bb0:	88fb      	ldrh	r3, [r7, #6]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	f080 8167 	bcs.w	8010e86 <tcp_write+0x47a>
 8010bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f000 8163 	beq.w	8010e86 <tcp_write+0x47a>
 8010bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bc2:	891b      	ldrh	r3, [r3, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 815e 	beq.w	8010e86 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010bca:	88fa      	ldrh	r2, [r7, #6]
 8010bcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bd0:	1ad2      	subs	r2, r2, r3
 8010bd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	bfa8      	it	ge
 8010bd8:	4613      	movge	r3, r2
 8010bda:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bde:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010be0:	797b      	ldrb	r3, [r7, #5]
 8010be2:	f003 0301 	and.w	r3, r3, #1
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d027      	beq.n	8010c3a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010bea:	f107 0012 	add.w	r0, r7, #18
 8010bee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010bf0:	8bf9      	ldrh	r1, [r7, #30]
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	9302      	str	r3, [sp, #8]
 8010bf6:	797b      	ldrb	r3, [r7, #5]
 8010bf8:	9301      	str	r3, [sp, #4]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	9300      	str	r3, [sp, #0]
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2000      	movs	r0, #0
 8010c02:	f7ff fe0f 	bl	8010824 <tcp_pbuf_prealloc>
 8010c06:	6578      	str	r0, [r7, #84]	; 0x54
 8010c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f000 8225 	beq.w	801105a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c12:	6858      	ldr	r0, [r3, #4]
 8010c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c18:	68ba      	ldr	r2, [r7, #8]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	8bfa      	ldrh	r2, [r7, #30]
 8010c1e:	4619      	mov	r1, r3
 8010c20:	f004 feac 	bl	801597c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010c24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c26:	f7fb f9bf 	bl	800bfa8 <pbuf_clen>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c32:	4413      	add	r3, r2
 8010c34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010c38:	e041      	b.n	8010cbe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c40:	e002      	b.n	8010c48 <tcp_write+0x23c>
 8010c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	637b      	str	r3, [r7, #52]	; 0x34
 8010c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1f8      	bne.n	8010c42 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c52:	7b1b      	ldrb	r3, [r3, #12]
 8010c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d115      	bne.n	8010c88 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c62:	8952      	ldrh	r2, [r2, #10]
 8010c64:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d10d      	bne.n	8010c88 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010c6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d006      	beq.n	8010c82 <tcp_write+0x276>
 8010c74:	4b1c      	ldr	r3, [pc, #112]	; (8010ce8 <tcp_write+0x2dc>)
 8010c76:	f240 2231 	movw	r2, #561	; 0x231
 8010c7a:	4922      	ldr	r1, [pc, #136]	; (8010d04 <tcp_write+0x2f8>)
 8010c7c:	481c      	ldr	r0, [pc, #112]	; (8010cf0 <tcp_write+0x2e4>)
 8010c7e:	f004 ff8d 	bl	8015b9c <iprintf>
          extendlen = seglen;
 8010c82:	8bfb      	ldrh	r3, [r7, #30]
 8010c84:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010c86:	e01a      	b.n	8010cbe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010c88:	8bfb      	ldrh	r3, [r7, #30]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	2000      	movs	r0, #0
 8010c90:	f7fa fe18 	bl	800b8c4 <pbuf_alloc>
 8010c94:	6578      	str	r0, [r7, #84]	; 0x54
 8010c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f000 81e0 	beq.w	801105e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ca2:	68ba      	ldr	r2, [r7, #8]
 8010ca4:	441a      	add	r2, r3
 8010ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ca8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010caa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010cac:	f7fb f97c 	bl	800bfa8 <pbuf_clen>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cb8:	4413      	add	r3, r2
 8010cba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010cbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cc2:	8bfb      	ldrh	r3, [r7, #30]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010cca:	e0dc      	b.n	8010e86 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 80d7 	beq.w	8010e86 <tcp_write+0x47a>
 8010cd8:	4b03      	ldr	r3, [pc, #12]	; (8010ce8 <tcp_write+0x2dc>)
 8010cda:	f240 224a 	movw	r2, #586	; 0x24a
 8010cde:	490a      	ldr	r1, [pc, #40]	; (8010d08 <tcp_write+0x2fc>)
 8010ce0:	4803      	ldr	r0, [pc, #12]	; (8010cf0 <tcp_write+0x2e4>)
 8010ce2:	f004 ff5b 	bl	8015b9c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010ce6:	e0ce      	b.n	8010e86 <tcp_write+0x47a>
 8010ce8:	08018f8c 	.word	0x08018f8c
 8010cec:	0801912c 	.word	0x0801912c
 8010cf0:	08018fe0 	.word	0x08018fe0
 8010cf4:	08019144 	.word	0x08019144
 8010cf8:	08019178 	.word	0x08019178
 8010cfc:	08019190 	.word	0x08019190
 8010d00:	080191b0 	.word	0x080191b0
 8010d04:	080191d0 	.word	0x080191d0
 8010d08:	080191fc 	.word	0x080191fc
    struct pbuf *p;
    u16_t left = len - pos;
 8010d0c:	88fa      	ldrh	r2, [r7, #6]
 8010d0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010d16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010d22:	8b7a      	ldrh	r2, [r7, #26]
 8010d24:	8bbb      	ldrh	r3, [r7, #28]
 8010d26:	4293      	cmp	r3, r2
 8010d28:	bf28      	it	cs
 8010d2a:	4613      	movcs	r3, r2
 8010d2c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010d2e:	797b      	ldrb	r3, [r7, #5]
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d036      	beq.n	8010da6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	8b3b      	ldrh	r3, [r7, #24]
 8010d40:	4413      	add	r3, r2
 8010d42:	b299      	uxth	r1, r3
 8010d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	bf0c      	ite	eq
 8010d4a:	2301      	moveq	r3, #1
 8010d4c:	2300      	movne	r3, #0
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	f107 0012 	add.w	r0, r7, #18
 8010d54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d56:	9302      	str	r3, [sp, #8]
 8010d58:	797b      	ldrb	r3, [r7, #5]
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	4603      	mov	r3, r0
 8010d62:	2036      	movs	r0, #54	; 0x36
 8010d64:	f7ff fd5e 	bl	8010824 <tcp_pbuf_prealloc>
 8010d68:	6338      	str	r0, [r7, #48]	; 0x30
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f000 8178 	beq.w	8011062 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	895b      	ldrh	r3, [r3, #10]
 8010d76:	8b3a      	ldrh	r2, [r7, #24]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d906      	bls.n	8010d8a <tcp_write+0x37e>
 8010d7c:	4b8c      	ldr	r3, [pc, #560]	; (8010fb0 <tcp_write+0x5a4>)
 8010d7e:	f240 2266 	movw	r2, #614	; 0x266
 8010d82:	498c      	ldr	r1, [pc, #560]	; (8010fb4 <tcp_write+0x5a8>)
 8010d84:	488c      	ldr	r0, [pc, #560]	; (8010fb8 <tcp_write+0x5ac>)
 8010d86:	f004 ff09 	bl	8015b9c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010d92:	18d0      	adds	r0, r2, r3
 8010d94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	8b3a      	ldrh	r2, [r7, #24]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	f004 fdec 	bl	801597c <memcpy>
 8010da4:	e02f      	b.n	8010e06 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010da6:	8a7b      	ldrh	r3, [r7, #18]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d006      	beq.n	8010dba <tcp_write+0x3ae>
 8010dac:	4b80      	ldr	r3, [pc, #512]	; (8010fb0 <tcp_write+0x5a4>)
 8010dae:	f240 2271 	movw	r2, #625	; 0x271
 8010db2:	4982      	ldr	r1, [pc, #520]	; (8010fbc <tcp_write+0x5b0>)
 8010db4:	4880      	ldr	r0, [pc, #512]	; (8010fb8 <tcp_write+0x5ac>)
 8010db6:	f004 fef1 	bl	8015b9c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010dba:	8b3b      	ldrh	r3, [r7, #24]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	2036      	movs	r0, #54	; 0x36
 8010dc2:	f7fa fd7f 	bl	800b8c4 <pbuf_alloc>
 8010dc6:	6178      	str	r0, [r7, #20]
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f000 814b 	beq.w	8011066 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	441a      	add	r2, r3
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010de6:	4619      	mov	r1, r3
 8010de8:	2036      	movs	r0, #54	; 0x36
 8010dea:	f7fa fd6b 	bl	800b8c4 <pbuf_alloc>
 8010dee:	6338      	str	r0, [r7, #48]	; 0x30
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d103      	bne.n	8010dfe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010df6:	6978      	ldr	r0, [r7, #20]
 8010df8:	f7fb f848 	bl	800be8c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010dfc:	e136      	b.n	801106c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010dfe:	6979      	ldr	r1, [r7, #20]
 8010e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e02:	f7fb f911 	bl	800c028 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e08:	f7fb f8ce 	bl	800bfa8 <pbuf_clen>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e14:	4413      	add	r3, r2
 8010e16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e1e:	2b09      	cmp	r3, #9
 8010e20:	d903      	bls.n	8010e2a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e24:	f7fb f832 	bl	800be8c <pbuf_free>
      goto memerr;
 8010e28:	e120      	b.n	801106c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010e2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e32:	441a      	add	r2, r3
 8010e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	f7ff fc51 	bl	80106e8 <tcp_create_segment>
 8010e46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 810d 	beq.w	801106a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d102      	bne.n	8010e5c <tcp_write+0x450>
      queue = seg;
 8010e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e58:	647b      	str	r3, [r7, #68]	; 0x44
 8010e5a:	e00c      	b.n	8010e76 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <tcp_write+0x464>
 8010e62:	4b53      	ldr	r3, [pc, #332]	; (8010fb0 <tcp_write+0x5a4>)
 8010e64:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010e68:	4955      	ldr	r1, [pc, #340]	; (8010fc0 <tcp_write+0x5b4>)
 8010e6a:	4853      	ldr	r0, [pc, #332]	; (8010fb8 <tcp_write+0x5ac>)
 8010e6c:	f004 fe96 	bl	8015b9c <iprintf>
      prev_seg->next = seg;
 8010e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e74:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e78:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010e7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e7e:	8b3b      	ldrh	r3, [r7, #24]
 8010e80:	4413      	add	r3, r2
 8010e82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010e86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e8a:	88fb      	ldrh	r3, [r7, #6]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	f4ff af3d 	bcc.w	8010d0c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010e92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d02c      	beq.n	8010ef2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e9e:	e01e      	b.n	8010ede <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	891a      	ldrh	r2, [r3, #8]
 8010ea4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ea6:	4413      	add	r3, r2
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d110      	bne.n	8010ed8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ebc:	8952      	ldrh	r2, [r2, #10]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ec2:	68b9      	ldr	r1, [r7, #8]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f004 fd59 	bl	801597c <memcpy>
        p->len += oversize_used;
 8010eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ecc:	895a      	ldrh	r2, [r3, #10]
 8010ece:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ed0:	4413      	add	r3, r2
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1dd      	bne.n	8010ea0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ee6:	891a      	ldrh	r2, [r3, #8]
 8010ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eea:	4413      	add	r3, r2
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ef0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010ef2:	8a7a      	ldrh	r2, [r7, #18]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d018      	beq.n	8010f32 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d106      	bne.n	8010f14 <tcp_write+0x508>
 8010f06:	4b2a      	ldr	r3, [pc, #168]	; (8010fb0 <tcp_write+0x5a4>)
 8010f08:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010f0c:	492d      	ldr	r1, [pc, #180]	; (8010fc4 <tcp_write+0x5b8>)
 8010f0e:	482a      	ldr	r0, [pc, #168]	; (8010fb8 <tcp_write+0x5ac>)
 8010f10:	f004 fe44 	bl	8015b9c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fb f884 	bl	800c028 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f22:	891a      	ldrh	r2, [r3, #8]
 8010f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f26:	891b      	ldrh	r3, [r3, #8]
 8010f28:	4413      	add	r3, r2
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2e:	811a      	strh	r2, [r3, #8]
 8010f30:	e037      	b.n	8010fa2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d034      	beq.n	8010fa2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d003      	beq.n	8010f46 <tcp_write+0x53a>
 8010f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d106      	bne.n	8010f54 <tcp_write+0x548>
 8010f46:	4b1a      	ldr	r3, [pc, #104]	; (8010fb0 <tcp_write+0x5a4>)
 8010f48:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010f4c:	491e      	ldr	r1, [pc, #120]	; (8010fc8 <tcp_write+0x5bc>)
 8010f4e:	481a      	ldr	r0, [pc, #104]	; (8010fb8 <tcp_write+0x5ac>)
 8010f50:	f004 fe24 	bl	8015b9c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f5a:	e009      	b.n	8010f70 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	891a      	ldrh	r2, [r3, #8]
 8010f60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f62:	4413      	add	r3, r2
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f68:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1f1      	bne.n	8010f5c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7a:	891a      	ldrh	r2, [r3, #8]
 8010f7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f7e:	4413      	add	r3, r2
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	895a      	ldrh	r2, [r3, #10]
 8010f8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f8c:	4413      	add	r3, r2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f96:	891a      	ldrh	r2, [r3, #8]
 8010f98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f9a:	4413      	add	r3, r2
 8010f9c:	b29a      	uxth	r2, r3
 8010f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d111      	bne.n	8010fcc <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fac:	66da      	str	r2, [r3, #108]	; 0x6c
 8010fae:	e010      	b.n	8010fd2 <tcp_write+0x5c6>
 8010fb0:	08018f8c 	.word	0x08018f8c
 8010fb4:	0801922c 	.word	0x0801922c
 8010fb8:	08018fe0 	.word	0x08018fe0
 8010fbc:	0801926c 	.word	0x0801926c
 8010fc0:	0801927c 	.word	0x0801927c
 8010fc4:	08019290 	.word	0x08019290
 8010fc8:	080192c8 	.word	0x080192c8
  } else {
    last_unsent->next = queue;
 8010fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fd0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010fd6:	88fb      	ldrh	r3, [r7, #6]
 8010fd8:	441a      	add	r2, r3
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010fe4:	88fb      	ldrh	r3, [r7, #6]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ff6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00e      	beq.n	8011022 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10a      	bne.n	8011022 <tcp_write+0x616>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d106      	bne.n	8011022 <tcp_write+0x616>
 8011014:	4b2c      	ldr	r3, [pc, #176]	; (80110c8 <tcp_write+0x6bc>)
 8011016:	f240 3212 	movw	r2, #786	; 0x312
 801101a:	492c      	ldr	r1, [pc, #176]	; (80110cc <tcp_write+0x6c0>)
 801101c:	482c      	ldr	r0, [pc, #176]	; (80110d0 <tcp_write+0x6c4>)
 801101e:	f004 fdbd 	bl	8015b9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011024:	2b00      	cmp	r3, #0
 8011026:	d016      	beq.n	8011056 <tcp_write+0x64a>
 8011028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d012      	beq.n	8011056 <tcp_write+0x64a>
 8011030:	797b      	ldrb	r3, [r7, #5]
 8011032:	f003 0302 	and.w	r3, r3, #2
 8011036:	2b00      	cmp	r3, #0
 8011038:	d10d      	bne.n	8011056 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801103a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29c      	uxth	r4, r3
 8011042:	2008      	movs	r0, #8
 8011044:	f7f9 fb30 	bl	800a6a8 <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	461a      	mov	r2, r3
 801104c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	4322      	orrs	r2, r4
 8011052:	b292      	uxth	r2, r2
 8011054:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011056:	2300      	movs	r3, #0
 8011058:	e031      	b.n	80110be <tcp_write+0x6b2>
          goto memerr;
 801105a:	bf00      	nop
 801105c:	e006      	b.n	801106c <tcp_write+0x660>
            goto memerr;
 801105e:	bf00      	nop
 8011060:	e004      	b.n	801106c <tcp_write+0x660>
        goto memerr;
 8011062:	bf00      	nop
 8011064:	e002      	b.n	801106c <tcp_write+0x660>
        goto memerr;
 8011066:	bf00      	nop
 8011068:	e000      	b.n	801106c <tcp_write+0x660>
      goto memerr;
 801106a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	8b5b      	ldrh	r3, [r3, #26]
 8011070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011074:	b29a      	uxth	r2, r3
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801107a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801107c:	2b00      	cmp	r3, #0
 801107e:	d002      	beq.n	8011086 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011080:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011082:	f7fa ff03 	bl	800be8c <pbuf_free>
  }
  if (queue != NULL) {
 8011086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011088:	2b00      	cmp	r3, #0
 801108a:	d002      	beq.n	8011092 <tcp_write+0x686>
    tcp_segs_free(queue);
 801108c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801108e:	f7fc fb6b 	bl	800d768 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00e      	beq.n	80110ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d10a      	bne.n	80110ba <tcp_write+0x6ae>
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d106      	bne.n	80110ba <tcp_write+0x6ae>
 80110ac:	4b06      	ldr	r3, [pc, #24]	; (80110c8 <tcp_write+0x6bc>)
 80110ae:	f240 3227 	movw	r2, #807	; 0x327
 80110b2:	4906      	ldr	r1, [pc, #24]	; (80110cc <tcp_write+0x6c0>)
 80110b4:	4806      	ldr	r0, [pc, #24]	; (80110d0 <tcp_write+0x6c4>)
 80110b6:	f004 fd71 	bl	8015b9c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80110ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80110be:	4618      	mov	r0, r3
 80110c0:	375c      	adds	r7, #92	; 0x5c
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd90      	pop	{r4, r7, pc}
 80110c6:	bf00      	nop
 80110c8:	08018f8c 	.word	0x08018f8c
 80110cc:	08019300 	.word	0x08019300
 80110d0:	08018fe0 	.word	0x08018fe0

080110d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80110d4:	b590      	push	{r4, r7, lr}
 80110d6:	b08b      	sub	sp, #44	; 0x2c
 80110d8:	af02      	add	r7, sp, #8
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	460b      	mov	r3, r1
 80110de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80110e0:	2300      	movs	r3, #0
 80110e2:	61fb      	str	r3, [r7, #28]
 80110e4:	2300      	movs	r3, #0
 80110e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80110e8:	2300      	movs	r3, #0
 80110ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d106      	bne.n	8011100 <tcp_split_unsent_seg+0x2c>
 80110f2:	4b95      	ldr	r3, [pc, #596]	; (8011348 <tcp_split_unsent_seg+0x274>)
 80110f4:	f240 324b 	movw	r2, #843	; 0x34b
 80110f8:	4994      	ldr	r1, [pc, #592]	; (801134c <tcp_split_unsent_seg+0x278>)
 80110fa:	4895      	ldr	r0, [pc, #596]	; (8011350 <tcp_split_unsent_seg+0x27c>)
 80110fc:	f004 fd4e 	bl	8015b9c <iprintf>

  useg = pcb->unsent;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011104:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d102      	bne.n	8011112 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801110c:	f04f 33ff 	mov.w	r3, #4294967295
 8011110:	e116      	b.n	8011340 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011112:	887b      	ldrh	r3, [r7, #2]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d109      	bne.n	801112c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011118:	4b8b      	ldr	r3, [pc, #556]	; (8011348 <tcp_split_unsent_seg+0x274>)
 801111a:	f240 3253 	movw	r2, #851	; 0x353
 801111e:	498d      	ldr	r1, [pc, #564]	; (8011354 <tcp_split_unsent_seg+0x280>)
 8011120:	488b      	ldr	r0, [pc, #556]	; (8011350 <tcp_split_unsent_seg+0x27c>)
 8011122:	f004 fd3b 	bl	8015b9c <iprintf>
    return ERR_VAL;
 8011126:	f06f 0305 	mvn.w	r3, #5
 801112a:	e109      	b.n	8011340 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	891b      	ldrh	r3, [r3, #8]
 8011130:	887a      	ldrh	r2, [r7, #2]
 8011132:	429a      	cmp	r2, r3
 8011134:	d301      	bcc.n	801113a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	e102      	b.n	8011340 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801113e:	887a      	ldrh	r2, [r7, #2]
 8011140:	429a      	cmp	r2, r3
 8011142:	d906      	bls.n	8011152 <tcp_split_unsent_seg+0x7e>
 8011144:	4b80      	ldr	r3, [pc, #512]	; (8011348 <tcp_split_unsent_seg+0x274>)
 8011146:	f240 325b 	movw	r2, #859	; 0x35b
 801114a:	4983      	ldr	r1, [pc, #524]	; (8011358 <tcp_split_unsent_seg+0x284>)
 801114c:	4880      	ldr	r0, [pc, #512]	; (8011350 <tcp_split_unsent_seg+0x27c>)
 801114e:	f004 fd25 	bl	8015b9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	891b      	ldrh	r3, [r3, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d106      	bne.n	8011168 <tcp_split_unsent_seg+0x94>
 801115a:	4b7b      	ldr	r3, [pc, #492]	; (8011348 <tcp_split_unsent_seg+0x274>)
 801115c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011160:	497e      	ldr	r1, [pc, #504]	; (801135c <tcp_split_unsent_seg+0x288>)
 8011162:	487b      	ldr	r0, [pc, #492]	; (8011350 <tcp_split_unsent_seg+0x27c>)
 8011164:	f004 fd1a 	bl	8015b9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	7a9b      	ldrb	r3, [r3, #10]
 801116c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	891a      	ldrh	r2, [r3, #8]
 801117e:	887b      	ldrh	r3, [r7, #2]
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011184:	7bbb      	ldrb	r3, [r7, #14]
 8011186:	b29a      	uxth	r2, r3
 8011188:	89bb      	ldrh	r3, [r7, #12]
 801118a:	4413      	add	r3, r2
 801118c:	b29b      	uxth	r3, r3
 801118e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011192:	4619      	mov	r1, r3
 8011194:	2036      	movs	r0, #54	; 0x36
 8011196:	f7fa fb95 	bl	800b8c4 <pbuf_alloc>
 801119a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 80b7 	beq.w	8011312 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	891a      	ldrh	r2, [r3, #8]
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	891b      	ldrh	r3, [r3, #8]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	887b      	ldrh	r3, [r7, #2]
 80111b4:	4413      	add	r3, r2
 80111b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	6858      	ldr	r0, [r3, #4]
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	7bbb      	ldrb	r3, [r7, #14]
 80111c2:	18d1      	adds	r1, r2, r3
 80111c4:	897b      	ldrh	r3, [r7, #10]
 80111c6:	89ba      	ldrh	r2, [r7, #12]
 80111c8:	f7fb f856 	bl	800c278 <pbuf_copy_partial>
 80111cc:	4603      	mov	r3, r0
 80111ce:	461a      	mov	r2, r3
 80111d0:	89bb      	ldrh	r3, [r7, #12]
 80111d2:	4293      	cmp	r3, r2
 80111d4:	f040 809f 	bne.w	8011316 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	899b      	ldrh	r3, [r3, #12]
 80111de:	b29b      	uxth	r3, r3
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f9 fa61 	bl	800a6a8 <lwip_htons>
 80111e6:	4603      	mov	r3, r0
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80111ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80111f0:	2300      	movs	r3, #0
 80111f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80111f4:	7efb      	ldrb	r3, [r7, #27]
 80111f6:	f003 0308 	and.w	r3, r3, #8
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d007      	beq.n	801120e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80111fe:	7efb      	ldrb	r3, [r7, #27]
 8011200:	f023 0308 	bic.w	r3, r3, #8
 8011204:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011206:	7ebb      	ldrb	r3, [r7, #26]
 8011208:	f043 0308 	orr.w	r3, r3, #8
 801120c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801120e:	7efb      	ldrb	r3, [r7, #27]
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	2b00      	cmp	r3, #0
 8011216:	d007      	beq.n	8011228 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011218:	7efb      	ldrb	r3, [r7, #27]
 801121a:	f023 0301 	bic.w	r3, r3, #1
 801121e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011220:	7ebb      	ldrb	r3, [r7, #26]
 8011222:	f043 0301 	orr.w	r3, r3, #1
 8011226:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	4618      	mov	r0, r3
 8011230:	f7f9 fa4f 	bl	800a6d2 <lwip_htonl>
 8011234:	4602      	mov	r2, r0
 8011236:	887b      	ldrh	r3, [r7, #2]
 8011238:	18d1      	adds	r1, r2, r3
 801123a:	7eba      	ldrb	r2, [r7, #26]
 801123c:	7bfb      	ldrb	r3, [r7, #15]
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	460b      	mov	r3, r1
 8011242:	6939      	ldr	r1, [r7, #16]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7ff fa4f 	bl	80106e8 <tcp_create_segment>
 801124a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d063      	beq.n	801131a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	4618      	mov	r0, r3
 8011258:	f7fa fea6 	bl	800bfa8 <pbuf_clen>
 801125c:	4603      	mov	r3, r0
 801125e:	461a      	mov	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011266:	1a9b      	subs	r3, r3, r2
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	6858      	ldr	r0, [r3, #4]
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	891a      	ldrh	r2, [r3, #8]
 801127a:	89bb      	ldrh	r3, [r7, #12]
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	b29b      	uxth	r3, r3
 8011280:	4619      	mov	r1, r3
 8011282:	f7fa fc7d 	bl	800bb80 <pbuf_realloc>
  useg->len -= remainder;
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	891a      	ldrh	r2, [r3, #8]
 801128a:	89bb      	ldrh	r3, [r7, #12]
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	b29a      	uxth	r2, r3
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	899b      	ldrh	r3, [r3, #12]
 801129a:	b29c      	uxth	r4, r3
 801129c:	7efb      	ldrb	r3, [r7, #27]
 801129e:	b29b      	uxth	r3, r3
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7f9 fa01 	bl	800a6a8 <lwip_htons>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	4322      	orrs	r2, r4
 80112b0:	b292      	uxth	r2, r2
 80112b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fa fe75 	bl	800bfa8 <pbuf_clen>
 80112be:	4603      	mov	r3, r0
 80112c0:	461a      	mov	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112c8:	4413      	add	r3, r2
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fa fe66 	bl	800bfa8 <pbuf_clen>
 80112dc:	4603      	mov	r3, r0
 80112de:	461a      	mov	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112e6:	4413      	add	r3, r2
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	69fa      	ldr	r2, [r7, #28]
 80112fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d103      	bne.n	801130e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	e016      	b.n	8011340 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011312:	bf00      	nop
 8011314:	e002      	b.n	801131c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011316:	bf00      	nop
 8011318:	e000      	b.n	801131c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801131a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d006      	beq.n	8011330 <tcp_split_unsent_seg+0x25c>
 8011322:	4b09      	ldr	r3, [pc, #36]	; (8011348 <tcp_split_unsent_seg+0x274>)
 8011324:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011328:	490d      	ldr	r1, [pc, #52]	; (8011360 <tcp_split_unsent_seg+0x28c>)
 801132a:	4809      	ldr	r0, [pc, #36]	; (8011350 <tcp_split_unsent_seg+0x27c>)
 801132c:	f004 fc36 	bl	8015b9c <iprintf>
  if (p != NULL) {
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d002      	beq.n	801133c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011336:	6938      	ldr	r0, [r7, #16]
 8011338:	f7fa fda8 	bl	800be8c <pbuf_free>
  }

  return ERR_MEM;
 801133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011340:	4618      	mov	r0, r3
 8011342:	3724      	adds	r7, #36	; 0x24
 8011344:	46bd      	mov	sp, r7
 8011346:	bd90      	pop	{r4, r7, pc}
 8011348:	08018f8c 	.word	0x08018f8c
 801134c:	08019320 	.word	0x08019320
 8011350:	08018fe0 	.word	0x08018fe0
 8011354:	08019344 	.word	0x08019344
 8011358:	08019368 	.word	0x08019368
 801135c:	08019378 	.word	0x08019378
 8011360:	08019388 	.word	0x08019388

08011364 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011364:	b590      	push	{r4, r7, lr}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <tcp_send_fin+0x1c>
 8011372:	4b21      	ldr	r3, [pc, #132]	; (80113f8 <tcp_send_fin+0x94>)
 8011374:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011378:	4920      	ldr	r1, [pc, #128]	; (80113fc <tcp_send_fin+0x98>)
 801137a:	4821      	ldr	r0, [pc, #132]	; (8011400 <tcp_send_fin+0x9c>)
 801137c:	f004 fc0e 	bl	8015b9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011384:	2b00      	cmp	r3, #0
 8011386:	d02e      	beq.n	80113e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801138c:	60fb      	str	r3, [r7, #12]
 801138e:	e002      	b.n	8011396 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d1f8      	bne.n	8011390 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	899b      	ldrh	r3, [r3, #12]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7f9 f97e 	bl	800a6a8 <lwip_htons>
 80113ac:	4603      	mov	r3, r0
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	f003 0307 	and.w	r3, r3, #7
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d116      	bne.n	80113e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	899b      	ldrh	r3, [r3, #12]
 80113be:	b29c      	uxth	r4, r3
 80113c0:	2001      	movs	r0, #1
 80113c2:	f7f9 f971 	bl	800a6a8 <lwip_htons>
 80113c6:	4603      	mov	r3, r0
 80113c8:	461a      	mov	r2, r3
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	4322      	orrs	r2, r4
 80113d0:	b292      	uxth	r2, r2
 80113d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	8b5b      	ldrh	r3, [r3, #26]
 80113d8:	f043 0320 	orr.w	r3, r3, #32
 80113dc:	b29a      	uxth	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80113e2:	2300      	movs	r3, #0
 80113e4:	e004      	b.n	80113f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80113e6:	2101      	movs	r1, #1
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 f80b 	bl	8011404 <tcp_enqueue_flags>
 80113ee:	4603      	mov	r3, r0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd90      	pop	{r4, r7, pc}
 80113f8:	08018f8c 	.word	0x08018f8c
 80113fc:	08019394 	.word	0x08019394
 8011400:	08018fe0 	.word	0x08018fe0

08011404 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b08a      	sub	sp, #40	; 0x28
 8011408:	af02      	add	r7, sp, #8
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	460b      	mov	r3, r1
 801140e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011410:	2300      	movs	r3, #0
 8011412:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011414:	2300      	movs	r3, #0
 8011416:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011418:	78fb      	ldrb	r3, [r7, #3]
 801141a:	f003 0303 	and.w	r3, r3, #3
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <tcp_enqueue_flags+0x2c>
 8011422:	4b67      	ldr	r3, [pc, #412]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 8011424:	f240 4211 	movw	r2, #1041	; 0x411
 8011428:	4966      	ldr	r1, [pc, #408]	; (80115c4 <tcp_enqueue_flags+0x1c0>)
 801142a:	4867      	ldr	r0, [pc, #412]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 801142c:	f004 fbb6 	bl	8015b9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <tcp_enqueue_flags+0x40>
 8011436:	4b62      	ldr	r3, [pc, #392]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 8011438:	f240 4213 	movw	r2, #1043	; 0x413
 801143c:	4963      	ldr	r1, [pc, #396]	; (80115cc <tcp_enqueue_flags+0x1c8>)
 801143e:	4862      	ldr	r0, [pc, #392]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 8011440:	f004 fbac 	bl	8015b9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011444:	78fb      	ldrb	r3, [r7, #3]
 8011446:	f003 0302 	and.w	r3, r3, #2
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801144e:	2301      	movs	r3, #1
 8011450:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011452:	7ffb      	ldrb	r3, [r7, #31]
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	b2db      	uxtb	r3, r3
 8011458:	f003 0304 	and.w	r3, r3, #4
 801145c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	b29b      	uxth	r3, r3
 8011462:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011466:	4619      	mov	r1, r3
 8011468:	2036      	movs	r0, #54	; 0x36
 801146a:	f7fa fa2b 	bl	800b8c4 <pbuf_alloc>
 801146e:	6138      	str	r0, [r7, #16]
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d109      	bne.n	801148a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	8b5b      	ldrh	r3, [r3, #26]
 801147a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801147e:	b29a      	uxth	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011484:	f04f 33ff 	mov.w	r3, #4294967295
 8011488:	e095      	b.n	80115b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	895a      	ldrh	r2, [r3, #10]
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	b29b      	uxth	r3, r3
 8011492:	429a      	cmp	r2, r3
 8011494:	d206      	bcs.n	80114a4 <tcp_enqueue_flags+0xa0>
 8011496:	4b4a      	ldr	r3, [pc, #296]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 8011498:	f240 4239 	movw	r2, #1081	; 0x439
 801149c:	494c      	ldr	r1, [pc, #304]	; (80115d0 <tcp_enqueue_flags+0x1cc>)
 801149e:	484a      	ldr	r0, [pc, #296]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 80114a0:	f004 fb7c 	bl	8015b9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80114a8:	78fa      	ldrb	r2, [r7, #3]
 80114aa:	7ffb      	ldrb	r3, [r7, #31]
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	460b      	mov	r3, r1
 80114b0:	6939      	ldr	r1, [r7, #16]
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff f918 	bl	80106e8 <tcp_create_segment>
 80114b8:	60f8      	str	r0, [r7, #12]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d109      	bne.n	80114d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	8b5b      	ldrh	r3, [r3, #26]
 80114c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80114ce:	f04f 33ff 	mov.w	r3, #4294967295
 80114d2:	e070      	b.n	80115b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	f003 0303 	and.w	r3, r3, #3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d006      	beq.n	80114ee <tcp_enqueue_flags+0xea>
 80114e0:	4b37      	ldr	r3, [pc, #220]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 80114e2:	f240 4242 	movw	r2, #1090	; 0x442
 80114e6:	493b      	ldr	r1, [pc, #236]	; (80115d4 <tcp_enqueue_flags+0x1d0>)
 80114e8:	4837      	ldr	r0, [pc, #220]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 80114ea:	f004 fb57 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d006      	beq.n	8011504 <tcp_enqueue_flags+0x100>
 80114f6:	4b32      	ldr	r3, [pc, #200]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 80114f8:	f240 4243 	movw	r2, #1091	; 0x443
 80114fc:	4936      	ldr	r1, [pc, #216]	; (80115d8 <tcp_enqueue_flags+0x1d4>)
 80114fe:	4832      	ldr	r0, [pc, #200]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 8011500:	f004 fb4c 	bl	8015b9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011508:	2b00      	cmp	r3, #0
 801150a:	d103      	bne.n	8011514 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	66da      	str	r2, [r3, #108]	; 0x6c
 8011512:	e00d      	b.n	8011530 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011518:	61bb      	str	r3, [r7, #24]
 801151a:	e002      	b.n	8011522 <tcp_enqueue_flags+0x11e>
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	61bb      	str	r3, [r7, #24]
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1f8      	bne.n	801151c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	68fa      	ldr	r2, [r7, #12]
 801152e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011538:	78fb      	ldrb	r3, [r7, #3]
 801153a:	f003 0302 	and.w	r3, r3, #2
 801153e:	2b00      	cmp	r3, #0
 8011540:	d104      	bne.n	801154c <tcp_enqueue_flags+0x148>
 8011542:	78fb      	ldrb	r3, [r7, #3]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	d004      	beq.n	8011556 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011556:	78fb      	ldrb	r3, [r7, #3]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d006      	beq.n	801156e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	8b5b      	ldrh	r3, [r3, #26]
 8011564:	f043 0320 	orr.w	r3, r3, #32
 8011568:	b29a      	uxth	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	f7fa fd18 	bl	800bfa8 <pbuf_clen>
 8011578:	4603      	mov	r3, r0
 801157a:	461a      	mov	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011582:	4413      	add	r3, r2
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011592:	2b00      	cmp	r3, #0
 8011594:	d00e      	beq.n	80115b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10a      	bne.n	80115b4 <tcp_enqueue_flags+0x1b0>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d106      	bne.n	80115b4 <tcp_enqueue_flags+0x1b0>
 80115a6:	4b06      	ldr	r3, [pc, #24]	; (80115c0 <tcp_enqueue_flags+0x1bc>)
 80115a8:	f240 4265 	movw	r2, #1125	; 0x465
 80115ac:	490b      	ldr	r1, [pc, #44]	; (80115dc <tcp_enqueue_flags+0x1d8>)
 80115ae:	4806      	ldr	r0, [pc, #24]	; (80115c8 <tcp_enqueue_flags+0x1c4>)
 80115b0:	f004 faf4 	bl	8015b9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3720      	adds	r7, #32
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	08018f8c 	.word	0x08018f8c
 80115c4:	080193b0 	.word	0x080193b0
 80115c8:	08018fe0 	.word	0x08018fe0
 80115cc:	08019408 	.word	0x08019408
 80115d0:	08019428 	.word	0x08019428
 80115d4:	08019464 	.word	0x08019464
 80115d8:	0801947c 	.word	0x0801947c
 80115dc:	080194a8 	.word	0x080194a8

080115e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80115e0:	b5b0      	push	{r4, r5, r7, lr}
 80115e2:	b08a      	sub	sp, #40	; 0x28
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d106      	bne.n	80115fc <tcp_output+0x1c>
 80115ee:	4b8a      	ldr	r3, [pc, #552]	; (8011818 <tcp_output+0x238>)
 80115f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80115f4:	4989      	ldr	r1, [pc, #548]	; (801181c <tcp_output+0x23c>)
 80115f6:	488a      	ldr	r0, [pc, #552]	; (8011820 <tcp_output+0x240>)
 80115f8:	f004 fad0 	bl	8015b9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7d1b      	ldrb	r3, [r3, #20]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d106      	bne.n	8011612 <tcp_output+0x32>
 8011604:	4b84      	ldr	r3, [pc, #528]	; (8011818 <tcp_output+0x238>)
 8011606:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801160a:	4986      	ldr	r1, [pc, #536]	; (8011824 <tcp_output+0x244>)
 801160c:	4884      	ldr	r0, [pc, #528]	; (8011820 <tcp_output+0x240>)
 801160e:	f004 fac5 	bl	8015b9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011612:	4b85      	ldr	r3, [pc, #532]	; (8011828 <tcp_output+0x248>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	429a      	cmp	r2, r3
 801161a:	d101      	bne.n	8011620 <tcp_output+0x40>
    return ERR_OK;
 801161c:	2300      	movs	r3, #0
 801161e:	e1ce      	b.n	80119be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801162c:	4293      	cmp	r3, r2
 801162e:	bf28      	it	cs
 8011630:	4613      	movcs	r3, r2
 8011632:	b29b      	uxth	r3, r3
 8011634:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801163a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163e:	2b00      	cmp	r3, #0
 8011640:	d10b      	bne.n	801165a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8b5b      	ldrh	r3, [r3, #26]
 8011646:	f003 0302 	and.w	r3, r3, #2
 801164a:	2b00      	cmp	r3, #0
 801164c:	f000 81aa 	beq.w	80119a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fdcb 	bl	80121ec <tcp_send_empty_ack>
 8011656:	4603      	mov	r3, r0
 8011658:	e1b1      	b.n	80119be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801165a:	6879      	ldr	r1, [r7, #4]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	3304      	adds	r3, #4
 8011660:	461a      	mov	r2, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff f824 	bl	80106b0 <tcp_route>
 8011668:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d102      	bne.n	8011676 <tcp_output+0x96>
    return ERR_RTE;
 8011670:	f06f 0303 	mvn.w	r3, #3
 8011674:	e1a3      	b.n	80119be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <tcp_output+0xa4>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d111      	bne.n	80116a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <tcp_output+0xb0>
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	3304      	adds	r3, #4
 801168e:	e000      	b.n	8011692 <tcp_output+0xb2>
 8011690:	2300      	movs	r3, #0
 8011692:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d102      	bne.n	80116a0 <tcp_output+0xc0>
      return ERR_RTE;
 801169a:	f06f 0303 	mvn.w	r3, #3
 801169e:	e18e      	b.n	80119be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f9 f80f 	bl	800a6d2 <lwip_htonl>
 80116b4:	4602      	mov	r2, r0
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116be:	8912      	ldrh	r2, [r2, #8]
 80116c0:	4413      	add	r3, r2
 80116c2:	69ba      	ldr	r2, [r7, #24]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d227      	bcs.n	8011718 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116ce:	461a      	mov	r2, r3
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d114      	bne.n	8011700 <tcp_output+0x120>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d110      	bne.n	8011700 <tcp_output+0x120>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10b      	bne.n	8011700 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8b5b      	ldrh	r3, [r3, #26]
 8011704:	f003 0302 	and.w	r3, r3, #2
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 814d 	beq.w	80119a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fd6c 	bl	80121ec <tcp_send_empty_ack>
 8011714:	4603      	mov	r3, r0
 8011716:	e152      	b.n	80119be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011724:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011726:	6a3b      	ldr	r3, [r7, #32]
 8011728:	2b00      	cmp	r3, #0
 801172a:	f000 811c 	beq.w	8011966 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801172e:	e002      	b.n	8011736 <tcp_output+0x156>
 8011730:	6a3b      	ldr	r3, [r7, #32]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	623b      	str	r3, [r7, #32]
 8011736:	6a3b      	ldr	r3, [r7, #32]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1f8      	bne.n	8011730 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801173e:	e112      	b.n	8011966 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	899b      	ldrh	r3, [r3, #12]
 8011746:	b29b      	uxth	r3, r3
 8011748:	4618      	mov	r0, r3
 801174a:	f7f8 ffad 	bl	800a6a8 <lwip_htons>
 801174e:	4603      	mov	r3, r0
 8011750:	b2db      	uxtb	r3, r3
 8011752:	f003 0304 	and.w	r3, r3, #4
 8011756:	2b00      	cmp	r3, #0
 8011758:	d006      	beq.n	8011768 <tcp_output+0x188>
 801175a:	4b2f      	ldr	r3, [pc, #188]	; (8011818 <tcp_output+0x238>)
 801175c:	f240 5236 	movw	r2, #1334	; 0x536
 8011760:	4932      	ldr	r1, [pc, #200]	; (801182c <tcp_output+0x24c>)
 8011762:	482f      	ldr	r0, [pc, #188]	; (8011820 <tcp_output+0x240>)
 8011764:	f004 fa1a 	bl	8015b9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801176c:	2b00      	cmp	r3, #0
 801176e:	d01f      	beq.n	80117b0 <tcp_output+0x1d0>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	8b5b      	ldrh	r3, [r3, #26]
 8011774:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011778:	2b00      	cmp	r3, #0
 801177a:	d119      	bne.n	80117b0 <tcp_output+0x1d0>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011780:	2b00      	cmp	r3, #0
 8011782:	d00b      	beq.n	801179c <tcp_output+0x1bc>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d110      	bne.n	80117b0 <tcp_output+0x1d0>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011792:	891a      	ldrh	r2, [r3, #8]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011798:	429a      	cmp	r2, r3
 801179a:	d209      	bcs.n	80117b0 <tcp_output+0x1d0>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d004      	beq.n	80117b0 <tcp_output+0x1d0>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d901      	bls.n	80117b4 <tcp_output+0x1d4>
 80117b0:	2301      	movs	r3, #1
 80117b2:	e000      	b.n	80117b6 <tcp_output+0x1d6>
 80117b4:	2300      	movs	r3, #0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d106      	bne.n	80117c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	8b5b      	ldrh	r3, [r3, #26]
 80117be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 80e4 	beq.w	8011990 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7d1b      	ldrb	r3, [r3, #20]
 80117cc:	2b02      	cmp	r3, #2
 80117ce:	d00d      	beq.n	80117ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29c      	uxth	r4, r3
 80117d8:	2010      	movs	r0, #16
 80117da:	f7f8 ff65 	bl	800a6a8 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	461a      	mov	r2, r3
 80117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	4322      	orrs	r2, r4
 80117e8:	b292      	uxth	r2, r2
 80117ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80117ec:	697a      	ldr	r2, [r7, #20]
 80117ee:	6879      	ldr	r1, [r7, #4]
 80117f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117f2:	f000 f909 	bl	8011a08 <tcp_output_segment>
 80117f6:	4603      	mov	r3, r0
 80117f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80117fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d016      	beq.n	8011830 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	8b5b      	ldrh	r3, [r3, #26]
 8011806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	835a      	strh	r2, [r3, #26]
      return err;
 8011810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011814:	e0d3      	b.n	80119be <tcp_output+0x3de>
 8011816:	bf00      	nop
 8011818:	08018f8c 	.word	0x08018f8c
 801181c:	080194d0 	.word	0x080194d0
 8011820:	08018fe0 	.word	0x08018fe0
 8011824:	080194e8 	.word	0x080194e8
 8011828:	2000ef14 	.word	0x2000ef14
 801182c:	08019510 	.word	0x08019510
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7d1b      	ldrb	r3, [r3, #20]
 801183c:	2b02      	cmp	r3, #2
 801183e:	d006      	beq.n	801184e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	8b5b      	ldrh	r3, [r3, #26]
 8011844:	f023 0303 	bic.w	r3, r3, #3
 8011848:	b29a      	uxth	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	f7f8 ff3c 	bl	800a6d2 <lwip_htonl>
 801185a:	4604      	mov	r4, r0
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	891b      	ldrh	r3, [r3, #8]
 8011860:	461d      	mov	r5, r3
 8011862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	899b      	ldrh	r3, [r3, #12]
 8011868:	b29b      	uxth	r3, r3
 801186a:	4618      	mov	r0, r3
 801186c:	f7f8 ff1c 	bl	800a6a8 <lwip_htons>
 8011870:	4603      	mov	r3, r0
 8011872:	b2db      	uxtb	r3, r3
 8011874:	f003 0303 	and.w	r3, r3, #3
 8011878:	2b00      	cmp	r3, #0
 801187a:	d001      	beq.n	8011880 <tcp_output+0x2a0>
 801187c:	2301      	movs	r3, #1
 801187e:	e000      	b.n	8011882 <tcp_output+0x2a2>
 8011880:	2300      	movs	r3, #0
 8011882:	442b      	add	r3, r5
 8011884:	4423      	add	r3, r4
 8011886:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	2b00      	cmp	r3, #0
 8011892:	da02      	bge.n	801189a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	891b      	ldrh	r3, [r3, #8]
 801189e:	461c      	mov	r4, r3
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	899b      	ldrh	r3, [r3, #12]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7f8 fefd 	bl	800a6a8 <lwip_htons>
 80118ae:	4603      	mov	r3, r0
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	f003 0303 	and.w	r3, r3, #3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d001      	beq.n	80118be <tcp_output+0x2de>
 80118ba:	2301      	movs	r3, #1
 80118bc:	e000      	b.n	80118c0 <tcp_output+0x2e0>
 80118be:	2300      	movs	r3, #0
 80118c0:	4423      	add	r3, r4
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d049      	beq.n	801195a <tcp_output+0x37a>
      seg->next = NULL;
 80118c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c8:	2200      	movs	r2, #0
 80118ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d105      	bne.n	80118e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	623b      	str	r3, [r7, #32]
 80118de:	e03f      	b.n	8011960 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f8 fef3 	bl	800a6d2 <lwip_htonl>
 80118ec:	4604      	mov	r4, r0
 80118ee:	6a3b      	ldr	r3, [r7, #32]
 80118f0:	68db      	ldr	r3, [r3, #12]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7f8 feec 	bl	800a6d2 <lwip_htonl>
 80118fa:	4603      	mov	r3, r0
 80118fc:	1ae3      	subs	r3, r4, r3
 80118fe:	2b00      	cmp	r3, #0
 8011900:	da24      	bge.n	801194c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	3370      	adds	r3, #112	; 0x70
 8011906:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011908:	e002      	b.n	8011910 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d011      	beq.n	801193c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	f7f8 fed6 	bl	800a6d2 <lwip_htonl>
 8011926:	4604      	mov	r4, r0
 8011928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	4618      	mov	r0, r3
 8011930:	f7f8 fecf 	bl	800a6d2 <lwip_htonl>
 8011934:	4603      	mov	r3, r0
 8011936:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011938:	2b00      	cmp	r3, #0
 801193a:	dbe6      	blt.n	801190a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011942:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	e009      	b.n	8011960 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801194c:	6a3b      	ldr	r3, [r7, #32]
 801194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011950:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	623b      	str	r3, [r7, #32]
 8011958:	e002      	b.n	8011960 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801195a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801195c:	f7fb ff19 	bl	800d792 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011964:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d012      	beq.n	8011992 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	f7f8 fead 	bl	800a6d2 <lwip_htonl>
 8011978:	4602      	mov	r2, r0
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011982:	8912      	ldrh	r2, [r2, #8]
 8011984:	4413      	add	r3, r2
  while (seg != NULL &&
 8011986:	69ba      	ldr	r2, [r7, #24]
 8011988:	429a      	cmp	r2, r3
 801198a:	f4bf aed9 	bcs.w	8011740 <tcp_output+0x160>
 801198e:	e000      	b.n	8011992 <tcp_output+0x3b2>
      break;
 8011990:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d108      	bne.n	80119ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80119a2:	e004      	b.n	80119ae <tcp_output+0x3ce>
    goto output_done;
 80119a4:	bf00      	nop
 80119a6:	e002      	b.n	80119ae <tcp_output+0x3ce>
    goto output_done;
 80119a8:	bf00      	nop
 80119aa:	e000      	b.n	80119ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80119ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	8b5b      	ldrh	r3, [r3, #26]
 80119b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80119bc:	2300      	movs	r3, #0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3728      	adds	r7, #40	; 0x28
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bdb0      	pop	{r4, r5, r7, pc}
 80119c6:	bf00      	nop

080119c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_output_segment_busy+0x1c>
 80119d6:	4b09      	ldr	r3, [pc, #36]	; (80119fc <tcp_output_segment_busy+0x34>)
 80119d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80119dc:	4908      	ldr	r1, [pc, #32]	; (8011a00 <tcp_output_segment_busy+0x38>)
 80119de:	4809      	ldr	r0, [pc, #36]	; (8011a04 <tcp_output_segment_busy+0x3c>)
 80119e0:	f004 f8dc 	bl	8015b9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	7b9b      	ldrb	r3, [r3, #14]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d001      	beq.n	80119f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80119ee:	2301      	movs	r3, #1
 80119f0:	e000      	b.n	80119f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	08018f8c 	.word	0x08018f8c
 8011a00:	08019528 	.word	0x08019528
 8011a04:	08018fe0 	.word	0x08018fe0

08011a08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011a08:	b5b0      	push	{r4, r5, r7, lr}
 8011a0a:	b08c      	sub	sp, #48	; 0x30
 8011a0c:	af04      	add	r7, sp, #16
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <tcp_output_segment+0x20>
 8011a1a:	4b63      	ldr	r3, [pc, #396]	; (8011ba8 <tcp_output_segment+0x1a0>)
 8011a1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011a20:	4962      	ldr	r1, [pc, #392]	; (8011bac <tcp_output_segment+0x1a4>)
 8011a22:	4863      	ldr	r0, [pc, #396]	; (8011bb0 <tcp_output_segment+0x1a8>)
 8011a24:	f004 f8ba 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <tcp_output_segment+0x34>
 8011a2e:	4b5e      	ldr	r3, [pc, #376]	; (8011ba8 <tcp_output_segment+0x1a0>)
 8011a30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011a34:	495f      	ldr	r1, [pc, #380]	; (8011bb4 <tcp_output_segment+0x1ac>)
 8011a36:	485e      	ldr	r0, [pc, #376]	; (8011bb0 <tcp_output_segment+0x1a8>)
 8011a38:	f004 f8b0 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d106      	bne.n	8011a50 <tcp_output_segment+0x48>
 8011a42:	4b59      	ldr	r3, [pc, #356]	; (8011ba8 <tcp_output_segment+0x1a0>)
 8011a44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011a48:	495b      	ldr	r1, [pc, #364]	; (8011bb8 <tcp_output_segment+0x1b0>)
 8011a4a:	4859      	ldr	r0, [pc, #356]	; (8011bb0 <tcp_output_segment+0x1a8>)
 8011a4c:	f004 f8a6 	bl	8015b9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f7ff ffb9 	bl	80119c8 <tcp_output_segment_busy>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	e09f      	b.n	8011ba0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	68dc      	ldr	r4, [r3, #12]
 8011a68:	4610      	mov	r0, r2
 8011a6a:	f7f8 fe32 	bl	800a6d2 <lwip_htonl>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	68dc      	ldr	r4, [r3, #12]
 8011a7a:	4610      	mov	r0, r2
 8011a7c:	f7f8 fe14 	bl	800a6a8 <lwip_htons>
 8011a80:	4603      	mov	r3, r0
 8011a82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a88:	68ba      	ldr	r2, [r7, #8]
 8011a8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a8c:	441a      	add	r2, r3
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	3314      	adds	r3, #20
 8011a98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	7a9b      	ldrb	r3, [r3, #10]
 8011a9e:	f003 0301 	and.w	r3, r3, #1
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d015      	beq.n	8011ad2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	461a      	mov	r2, r3
 8011aac:	6879      	ldr	r1, [r7, #4]
 8011aae:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011ab2:	f7fc fa33 	bl	800df1c <tcp_eff_send_mss_netif>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011aba:	8b7b      	ldrh	r3, [r7, #26]
 8011abc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7f8 fe06 	bl	800a6d2 <lwip_htonl>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	3304      	adds	r3, #4
 8011ad0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	da02      	bge.n	8011ae2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d10c      	bne.n	8011b04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011aea:	4b34      	ldr	r3, [pc, #208]	; (8011bbc <tcp_output_segment+0x1b4>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7f8 fdea 	bl	800a6d2 <lwip_htonl>
 8011afe:	4602      	mov	r2, r0
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	68da      	ldr	r2, [r3, #12]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	8959      	ldrh	r1, [r3, #10]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	8b3a      	ldrh	r2, [r7, #24]
 8011b1e:	1a8a      	subs	r2, r1, r2
 8011b20:	b292      	uxth	r2, r2
 8011b22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	8919      	ldrh	r1, [r3, #8]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	8b3a      	ldrh	r2, [r7, #24]
 8011b30:	1a8a      	subs	r2, r1, r2
 8011b32:	b292      	uxth	r2, r2
 8011b34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	68d2      	ldr	r2, [r2, #12]
 8011b3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	741a      	strb	r2, [r3, #16]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	f103 0214 	add.w	r2, r3, #20
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	7a9b      	ldrb	r3, [r3, #10]
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	f003 0304 	and.w	r3, r3, #4
 8011b5e:	4413      	add	r3, r2
 8011b60:	69fa      	ldr	r2, [r7, #28]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d006      	beq.n	8011b74 <tcp_output_segment+0x16c>
 8011b66:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <tcp_output_segment+0x1a0>)
 8011b68:	f240 621c 	movw	r2, #1564	; 0x61c
 8011b6c:	4914      	ldr	r1, [pc, #80]	; (8011bc0 <tcp_output_segment+0x1b8>)
 8011b6e:	4810      	ldr	r0, [pc, #64]	; (8011bb0 <tcp_output_segment+0x1a8>)
 8011b70:	f004 f814 	bl	8015b9c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6858      	ldr	r0, [r3, #4]
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	1d1c      	adds	r4, r3, #4
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	7add      	ldrb	r5, [r3, #11]
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	7a9b      	ldrb	r3, [r3, #10]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	9202      	str	r2, [sp, #8]
 8011b8a:	2206      	movs	r2, #6
 8011b8c:	9201      	str	r2, [sp, #4]
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	462b      	mov	r3, r5
 8011b92:	4622      	mov	r2, r4
 8011b94:	f002 fbac 	bl	80142f0 <ip4_output_if>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3720      	adds	r7, #32
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ba8:	08018f8c 	.word	0x08018f8c
 8011bac:	08019550 	.word	0x08019550
 8011bb0:	08018fe0 	.word	0x08018fe0
 8011bb4:	08019570 	.word	0x08019570
 8011bb8:	08019590 	.word	0x08019590
 8011bbc:	2000eec8 	.word	0x2000eec8
 8011bc0:	080195b4 	.word	0x080195b4

08011bc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011bc4:	b5b0      	push	{r4, r5, r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <tcp_rexmit_rto_prepare+0x1c>
 8011bd2:	4b31      	ldr	r3, [pc, #196]	; (8011c98 <tcp_rexmit_rto_prepare+0xd4>)
 8011bd4:	f240 6263 	movw	r2, #1635	; 0x663
 8011bd8:	4930      	ldr	r1, [pc, #192]	; (8011c9c <tcp_rexmit_rto_prepare+0xd8>)
 8011bda:	4831      	ldr	r0, [pc, #196]	; (8011ca0 <tcp_rexmit_rto_prepare+0xdc>)
 8011bdc:	f003 ffde 	bl	8015b9c <iprintf>

  if (pcb->unacked == NULL) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d102      	bne.n	8011bee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011be8:	f06f 0305 	mvn.w	r3, #5
 8011bec:	e050      	b.n	8011c90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bf2:	60fb      	str	r3, [r7, #12]
 8011bf4:	e00b      	b.n	8011c0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f7ff fee6 	bl	80119c8 <tcp_output_segment_busy>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011c02:	f06f 0305 	mvn.w	r3, #5
 8011c06:	e043      	b.n	8011c90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1ef      	bne.n	8011bf6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f7ff fed6 	bl	80119c8 <tcp_output_segment_busy>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d002      	beq.n	8011c28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011c22:	f06f 0305 	mvn.w	r3, #5
 8011c26:	e033      	b.n	8011c90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	8b5b      	ldrh	r3, [r3, #26]
 8011c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f8 fd3d 	bl	800a6d2 <lwip_htonl>
 8011c58:	4604      	mov	r4, r0
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	891b      	ldrh	r3, [r3, #8]
 8011c5e:	461d      	mov	r5, r3
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	899b      	ldrh	r3, [r3, #12]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f8 fd1d 	bl	800a6a8 <lwip_htons>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	f003 0303 	and.w	r3, r3, #3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d001      	beq.n	8011c7e <tcp_rexmit_rto_prepare+0xba>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e000      	b.n	8011c80 <tcp_rexmit_rto_prepare+0xbc>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	442b      	add	r3, r5
 8011c82:	18e2      	adds	r2, r4, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3710      	adds	r7, #16
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bdb0      	pop	{r4, r5, r7, pc}
 8011c98:	08018f8c 	.word	0x08018f8c
 8011c9c:	080195c8 	.word	0x080195c8
 8011ca0:	08018fe0 	.word	0x08018fe0

08011ca4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d106      	bne.n	8011cc0 <tcp_rexmit_rto_commit+0x1c>
 8011cb2:	4b0d      	ldr	r3, [pc, #52]	; (8011ce8 <tcp_rexmit_rto_commit+0x44>)
 8011cb4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011cb8:	490c      	ldr	r1, [pc, #48]	; (8011cec <tcp_rexmit_rto_commit+0x48>)
 8011cba:	480d      	ldr	r0, [pc, #52]	; (8011cf0 <tcp_rexmit_rto_commit+0x4c>)
 8011cbc:	f003 ff6e 	bl	8015b9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cc6:	2bff      	cmp	r3, #255	; 0xff
 8011cc8:	d007      	beq.n	8011cda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff fc80 	bl	80115e0 <tcp_output>
}
 8011ce0:	bf00      	nop
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	08018f8c 	.word	0x08018f8c
 8011cec:	080195ec 	.word	0x080195ec
 8011cf0:	08018fe0 	.word	0x08018fe0

08011cf4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d106      	bne.n	8011d10 <tcp_rexmit_rto+0x1c>
 8011d02:	4b0a      	ldr	r3, [pc, #40]	; (8011d2c <tcp_rexmit_rto+0x38>)
 8011d04:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011d08:	4909      	ldr	r1, [pc, #36]	; (8011d30 <tcp_rexmit_rto+0x3c>)
 8011d0a:	480a      	ldr	r0, [pc, #40]	; (8011d34 <tcp_rexmit_rto+0x40>)
 8011d0c:	f003 ff46 	bl	8015b9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ff57 	bl	8011bc4 <tcp_rexmit_rto_prepare>
 8011d16:	4603      	mov	r3, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d102      	bne.n	8011d22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7ff ffc1 	bl	8011ca4 <tcp_rexmit_rto_commit>
  }
}
 8011d22:	bf00      	nop
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	08018f8c 	.word	0x08018f8c
 8011d30:	08019610 	.word	0x08019610
 8011d34:	08018fe0 	.word	0x08018fe0

08011d38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011d38:	b590      	push	{r4, r7, lr}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d106      	bne.n	8011d54 <tcp_rexmit+0x1c>
 8011d46:	4b2f      	ldr	r3, [pc, #188]	; (8011e04 <tcp_rexmit+0xcc>)
 8011d48:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011d4c:	492e      	ldr	r1, [pc, #184]	; (8011e08 <tcp_rexmit+0xd0>)
 8011d4e:	482f      	ldr	r0, [pc, #188]	; (8011e0c <tcp_rexmit+0xd4>)
 8011d50:	f003 ff24 	bl	8015b9c <iprintf>

  if (pcb->unacked == NULL) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d102      	bne.n	8011d62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011d5c:	f06f 0305 	mvn.w	r3, #5
 8011d60:	e04c      	b.n	8011dfc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011d68:	68b8      	ldr	r0, [r7, #8]
 8011d6a:	f7ff fe2d 	bl	80119c8 <tcp_output_segment_busy>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d002      	beq.n	8011d7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011d74:	f06f 0305 	mvn.w	r3, #5
 8011d78:	e040      	b.n	8011dfc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	336c      	adds	r3, #108	; 0x6c
 8011d86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011d88:	e002      	b.n	8011d90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d011      	beq.n	8011dbc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7f8 fc96 	bl	800a6d2 <lwip_htonl>
 8011da6:	4604      	mov	r4, r0
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7f8 fc8f 	bl	800a6d2 <lwip_htonl>
 8011db4:	4603      	mov	r3, r0
 8011db6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	dbe6      	blt.n	8011d8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d103      	bne.n	8011dda <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011de0:	2bff      	cmp	r3, #255	; 0xff
 8011de2:	d007      	beq.n	8011df4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dea:	3301      	adds	r3, #1
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3714      	adds	r7, #20
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd90      	pop	{r4, r7, pc}
 8011e04:	08018f8c 	.word	0x08018f8c
 8011e08:	0801962c 	.word	0x0801962c
 8011e0c:	08018fe0 	.word	0x08018fe0

08011e10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d106      	bne.n	8011e2c <tcp_rexmit_fast+0x1c>
 8011e1e:	4b2a      	ldr	r3, [pc, #168]	; (8011ec8 <tcp_rexmit_fast+0xb8>)
 8011e20:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011e24:	4929      	ldr	r1, [pc, #164]	; (8011ecc <tcp_rexmit_fast+0xbc>)
 8011e26:	482a      	ldr	r0, [pc, #168]	; (8011ed0 <tcp_rexmit_fast+0xc0>)
 8011e28:	f003 feb8 	bl	8015b9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d045      	beq.n	8011ec0 <tcp_rexmit_fast+0xb0>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f003 0304 	and.w	r3, r3, #4
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d13f      	bne.n	8011ec0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f7ff ff79 	bl	8011d38 <tcp_rexmit>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d139      	bne.n	8011ec0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	bf28      	it	cs
 8011e5c:	4613      	movcs	r3, r2
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	da00      	bge.n	8011e66 <tcp_rexmit_fast+0x56>
 8011e64:	3301      	adds	r3, #1
 8011e66:	105b      	asrs	r3, r3, #1
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011e76:	461a      	mov	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d206      	bcs.n	8011e90 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	0049      	lsls	r1, r1, #1
 8011e9e:	440b      	add	r3, r1
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	4413      	add	r3, r2
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	8b5b      	ldrh	r3, [r3, #26]
 8011eb0:	f043 0304 	orr.w	r3, r3, #4
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011ec0:	bf00      	nop
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	08018f8c 	.word	0x08018f8c
 8011ecc:	08019644 	.word	0x08019644
 8011ed0:	08018fe0 	.word	0x08018fe0

08011ed4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	607b      	str	r3, [r7, #4]
 8011ede:	460b      	mov	r3, r1
 8011ee0:	817b      	strh	r3, [r7, #10]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011ee6:	897a      	ldrh	r2, [r7, #10]
 8011ee8:	893b      	ldrh	r3, [r7, #8]
 8011eea:	4413      	add	r3, r2
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	3314      	adds	r3, #20
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	2022      	movs	r0, #34	; 0x22
 8011efa:	f7f9 fce3 	bl	800b8c4 <pbuf_alloc>
 8011efe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d04d      	beq.n	8011fa2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011f06:	897b      	ldrh	r3, [r7, #10]
 8011f08:	3313      	adds	r3, #19
 8011f0a:	697a      	ldr	r2, [r7, #20]
 8011f0c:	8952      	ldrh	r2, [r2, #10]
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	db06      	blt.n	8011f20 <tcp_output_alloc_header_common+0x4c>
 8011f12:	4b26      	ldr	r3, [pc, #152]	; (8011fac <tcp_output_alloc_header_common+0xd8>)
 8011f14:	f240 7223 	movw	r2, #1827	; 0x723
 8011f18:	4925      	ldr	r1, [pc, #148]	; (8011fb0 <tcp_output_alloc_header_common+0xdc>)
 8011f1a:	4826      	ldr	r0, [pc, #152]	; (8011fb4 <tcp_output_alloc_header_common+0xe0>)
 8011f1c:	f003 fe3e 	bl	8015b9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011f26:	8c3b      	ldrh	r3, [r7, #32]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7f8 fbbd 	bl	800a6a8 <lwip_htons>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	461a      	mov	r2, r3
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f8 fbb5 	bl	800a6a8 <lwip_htons>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	461a      	mov	r2, r3
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7f8 fbc0 	bl	800a6d2 <lwip_htonl>
 8011f52:	4602      	mov	r2, r0
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011f58:	897b      	ldrh	r3, [r7, #10]
 8011f5a:	089b      	lsrs	r3, r3, #2
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	3305      	adds	r3, #5
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	031b      	lsls	r3, r3, #12
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7f8 fb99 	bl	800a6a8 <lwip_htons>
 8011f76:	4603      	mov	r3, r0
 8011f78:	461a      	mov	r2, r3
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011f7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7f8 fb91 	bl	800a6a8 <lwip_htons>
 8011f86:	4603      	mov	r3, r0
 8011f88:	461a      	mov	r2, r3
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	2200      	movs	r2, #0
 8011f92:	741a      	strb	r2, [r3, #16]
 8011f94:	2200      	movs	r2, #0
 8011f96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	749a      	strb	r2, [r3, #18]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011fa2:	697b      	ldr	r3, [r7, #20]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3718      	adds	r7, #24
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	08018f8c 	.word	0x08018f8c
 8011fb0:	08019664 	.word	0x08019664
 8011fb4:	08018fe0 	.word	0x08018fe0

08011fb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011fb8:	b5b0      	push	{r4, r5, r7, lr}
 8011fba:	b08a      	sub	sp, #40	; 0x28
 8011fbc:	af04      	add	r7, sp, #16
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	607b      	str	r3, [r7, #4]
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	817b      	strh	r3, [r7, #10]
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d106      	bne.n	8011fde <tcp_output_alloc_header+0x26>
 8011fd0:	4b15      	ldr	r3, [pc, #84]	; (8012028 <tcp_output_alloc_header+0x70>)
 8011fd2:	f240 7242 	movw	r2, #1858	; 0x742
 8011fd6:	4915      	ldr	r1, [pc, #84]	; (801202c <tcp_output_alloc_header+0x74>)
 8011fd8:	4815      	ldr	r0, [pc, #84]	; (8012030 <tcp_output_alloc_header+0x78>)
 8011fda:	f003 fddf 	bl	8015b9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	8adb      	ldrh	r3, [r3, #22]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	8b12      	ldrh	r2, [r2, #24]
 8011fea:	68f9      	ldr	r1, [r7, #12]
 8011fec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011fee:	893d      	ldrh	r5, [r7, #8]
 8011ff0:	897c      	ldrh	r4, [r7, #10]
 8011ff2:	9103      	str	r1, [sp, #12]
 8011ff4:	2110      	movs	r1, #16
 8011ff6:	9102      	str	r1, [sp, #8]
 8011ff8:	9201      	str	r2, [sp, #4]
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	462a      	mov	r2, r5
 8012000:	4621      	mov	r1, r4
 8012002:	f7ff ff67 	bl	8011ed4 <tcp_output_alloc_header_common>
 8012006:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d006      	beq.n	801201c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012016:	441a      	add	r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801201c:	697b      	ldr	r3, [r7, #20]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3718      	adds	r7, #24
 8012022:	46bd      	mov	sp, r7
 8012024:	bdb0      	pop	{r4, r5, r7, pc}
 8012026:	bf00      	nop
 8012028:	08018f8c 	.word	0x08018f8c
 801202c:	08019694 	.word	0x08019694
 8012030:	08018fe0 	.word	0x08018fe0

08012034 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b088      	sub	sp, #32
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	4611      	mov	r1, r2
 8012040:	461a      	mov	r2, r3
 8012042:	460b      	mov	r3, r1
 8012044:	71fb      	strb	r3, [r7, #7]
 8012046:	4613      	mov	r3, r2
 8012048:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d106      	bne.n	8012062 <tcp_output_fill_options+0x2e>
 8012054:	4b13      	ldr	r3, [pc, #76]	; (80120a4 <tcp_output_fill_options+0x70>)
 8012056:	f240 7256 	movw	r2, #1878	; 0x756
 801205a:	4913      	ldr	r1, [pc, #76]	; (80120a8 <tcp_output_fill_options+0x74>)
 801205c:	4813      	ldr	r0, [pc, #76]	; (80120ac <tcp_output_fill_options+0x78>)
 801205e:	f003 fd9d 	bl	8015b9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012068:	69bb      	ldr	r3, [r7, #24]
 801206a:	3314      	adds	r3, #20
 801206c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	f103 0214 	add.w	r2, r3, #20
 8012074:	8bfb      	ldrh	r3, [r7, #30]
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	4619      	mov	r1, r3
 801207a:	79fb      	ldrb	r3, [r7, #7]
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	f003 0304 	and.w	r3, r3, #4
 8012082:	440b      	add	r3, r1
 8012084:	4413      	add	r3, r2
 8012086:	697a      	ldr	r2, [r7, #20]
 8012088:	429a      	cmp	r2, r3
 801208a:	d006      	beq.n	801209a <tcp_output_fill_options+0x66>
 801208c:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <tcp_output_fill_options+0x70>)
 801208e:	f240 7275 	movw	r2, #1909	; 0x775
 8012092:	4907      	ldr	r1, [pc, #28]	; (80120b0 <tcp_output_fill_options+0x7c>)
 8012094:	4805      	ldr	r0, [pc, #20]	; (80120ac <tcp_output_fill_options+0x78>)
 8012096:	f003 fd81 	bl	8015b9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801209a:	bf00      	nop
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	08018f8c 	.word	0x08018f8c
 80120a8:	080196bc 	.word	0x080196bc
 80120ac:	08018fe0 	.word	0x08018fe0
 80120b0:	080195b4 	.word	0x080195b4

080120b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	; 0x28
 80120b8:	af04      	add	r7, sp, #16
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d106      	bne.n	80120d6 <tcp_output_control_segment+0x22>
 80120c8:	4b1c      	ldr	r3, [pc, #112]	; (801213c <tcp_output_control_segment+0x88>)
 80120ca:	f240 7287 	movw	r2, #1927	; 0x787
 80120ce:	491c      	ldr	r1, [pc, #112]	; (8012140 <tcp_output_control_segment+0x8c>)
 80120d0:	481c      	ldr	r0, [pc, #112]	; (8012144 <tcp_output_control_segment+0x90>)
 80120d2:	f003 fd63 	bl	8015b9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80120d6:	683a      	ldr	r2, [r7, #0]
 80120d8:	6879      	ldr	r1, [r7, #4]
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f7fe fae8 	bl	80106b0 <tcp_route>
 80120e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80120e8:	23fc      	movs	r3, #252	; 0xfc
 80120ea:	75fb      	strb	r3, [r7, #23]
 80120ec:	e01c      	b.n	8012128 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d006      	beq.n	8012102 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	7adb      	ldrb	r3, [r3, #11]
 80120f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	7a9b      	ldrb	r3, [r3, #10]
 80120fe:	757b      	strb	r3, [r7, #21]
 8012100:	e003      	b.n	801210a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012102:	23ff      	movs	r3, #255	; 0xff
 8012104:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012106:	2300      	movs	r3, #0
 8012108:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801210a:	7dba      	ldrb	r2, [r7, #22]
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	9302      	str	r3, [sp, #8]
 8012110:	2306      	movs	r3, #6
 8012112:	9301      	str	r3, [sp, #4]
 8012114:	7d7b      	ldrb	r3, [r7, #21]
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	4613      	mov	r3, r2
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	6879      	ldr	r1, [r7, #4]
 801211e:	68b8      	ldr	r0, [r7, #8]
 8012120:	f002 f8e6 	bl	80142f0 <ip4_output_if>
 8012124:	4603      	mov	r3, r0
 8012126:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012128:	68b8      	ldr	r0, [r7, #8]
 801212a:	f7f9 feaf 	bl	800be8c <pbuf_free>
  return err;
 801212e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012132:	4618      	mov	r0, r3
 8012134:	3718      	adds	r7, #24
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	08018f8c 	.word	0x08018f8c
 8012140:	080196e4 	.word	0x080196e4
 8012144:	08018fe0 	.word	0x08018fe0

08012148 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012148:	b590      	push	{r4, r7, lr}
 801214a:	b08b      	sub	sp, #44	; 0x2c
 801214c:	af04      	add	r7, sp, #16
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d106      	bne.n	801216a <tcp_rst+0x22>
 801215c:	4b1f      	ldr	r3, [pc, #124]	; (80121dc <tcp_rst+0x94>)
 801215e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012162:	491f      	ldr	r1, [pc, #124]	; (80121e0 <tcp_rst+0x98>)
 8012164:	481f      	ldr	r0, [pc, #124]	; (80121e4 <tcp_rst+0x9c>)
 8012166:	f003 fd19 	bl	8015b9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <tcp_rst+0x36>
 8012170:	4b1a      	ldr	r3, [pc, #104]	; (80121dc <tcp_rst+0x94>)
 8012172:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012176:	491c      	ldr	r1, [pc, #112]	; (80121e8 <tcp_rst+0xa0>)
 8012178:	481a      	ldr	r0, [pc, #104]	; (80121e4 <tcp_rst+0x9c>)
 801217a:	f003 fd0f 	bl	8015b9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801217e:	2300      	movs	r3, #0
 8012180:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012182:	f246 0308 	movw	r3, #24584	; 0x6008
 8012186:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	b29c      	uxth	r4, r3
 801218c:	68b8      	ldr	r0, [r7, #8]
 801218e:	f7f8 faa0 	bl	800a6d2 <lwip_htonl>
 8012192:	4602      	mov	r2, r0
 8012194:	8abb      	ldrh	r3, [r7, #20]
 8012196:	9303      	str	r3, [sp, #12]
 8012198:	2314      	movs	r3, #20
 801219a:	9302      	str	r3, [sp, #8]
 801219c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801219e:	9301      	str	r3, [sp, #4]
 80121a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	4613      	mov	r3, r2
 80121a6:	2200      	movs	r2, #0
 80121a8:	4621      	mov	r1, r4
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7ff fe92 	bl	8011ed4 <tcp_output_alloc_header_common>
 80121b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00c      	beq.n	80121d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80121b8:	7dfb      	ldrb	r3, [r7, #23]
 80121ba:	2200      	movs	r2, #0
 80121bc:	6939      	ldr	r1, [r7, #16]
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff ff38 	bl	8012034 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80121c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c6:	683a      	ldr	r2, [r7, #0]
 80121c8:	6939      	ldr	r1, [r7, #16]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f7ff ff72 	bl	80120b4 <tcp_output_control_segment>
 80121d0:	e000      	b.n	80121d4 <tcp_rst+0x8c>
    return;
 80121d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80121d4:	371c      	adds	r7, #28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd90      	pop	{r4, r7, pc}
 80121da:	bf00      	nop
 80121dc:	08018f8c 	.word	0x08018f8c
 80121e0:	08019710 	.word	0x08019710
 80121e4:	08018fe0 	.word	0x08018fe0
 80121e8:	0801972c 	.word	0x0801972c

080121ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80121ec:	b590      	push	{r4, r7, lr}
 80121ee:	b087      	sub	sp, #28
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d106      	bne.n	8012210 <tcp_send_empty_ack+0x24>
 8012202:	4b28      	ldr	r3, [pc, #160]	; (80122a4 <tcp_send_empty_ack+0xb8>)
 8012204:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012208:	4927      	ldr	r1, [pc, #156]	; (80122a8 <tcp_send_empty_ack+0xbc>)
 801220a:	4828      	ldr	r0, [pc, #160]	; (80122ac <tcp_send_empty_ack+0xc0>)
 801220c:	f003 fcc6 	bl	8015b9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012210:	7dfb      	ldrb	r3, [r7, #23]
 8012212:	009b      	lsls	r3, r3, #2
 8012214:	b2db      	uxtb	r3, r3
 8012216:	f003 0304 	and.w	r3, r3, #4
 801221a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801221c:	7d7b      	ldrb	r3, [r7, #21]
 801221e:	b29c      	uxth	r4, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012224:	4618      	mov	r0, r3
 8012226:	f7f8 fa54 	bl	800a6d2 <lwip_htonl>
 801222a:	4603      	mov	r3, r0
 801222c:	2200      	movs	r2, #0
 801222e:	4621      	mov	r1, r4
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7ff fec1 	bl	8011fb8 <tcp_output_alloc_header>
 8012236:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d109      	bne.n	8012252 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	8b5b      	ldrh	r3, [r3, #26]
 8012242:	f043 0303 	orr.w	r3, r3, #3
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801224c:	f06f 0301 	mvn.w	r3, #1
 8012250:	e023      	b.n	801229a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012252:	7dbb      	ldrb	r3, [r7, #22]
 8012254:	7dfa      	ldrb	r2, [r7, #23]
 8012256:	6939      	ldr	r1, [r7, #16]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f7ff feeb 	bl	8012034 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	3304      	adds	r3, #4
 8012264:	6939      	ldr	r1, [r7, #16]
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ff ff24 	bl	80120b4 <tcp_output_control_segment>
 801226c:	4603      	mov	r3, r0
 801226e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d007      	beq.n	8012288 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	8b5b      	ldrh	r3, [r3, #26]
 801227c:	f043 0303 	orr.w	r3, r3, #3
 8012280:	b29a      	uxth	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	835a      	strh	r2, [r3, #26]
 8012286:	e006      	b.n	8012296 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	8b5b      	ldrh	r3, [r3, #26]
 801228c:	f023 0303 	bic.w	r3, r3, #3
 8012290:	b29a      	uxth	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012296:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801229a:	4618      	mov	r0, r3
 801229c:	371c      	adds	r7, #28
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd90      	pop	{r4, r7, pc}
 80122a2:	bf00      	nop
 80122a4:	08018f8c 	.word	0x08018f8c
 80122a8:	08019748 	.word	0x08019748
 80122ac:	08018fe0 	.word	0x08018fe0

080122b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80122b0:	b590      	push	{r4, r7, lr}
 80122b2:	b087      	sub	sp, #28
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80122b8:	2300      	movs	r3, #0
 80122ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d106      	bne.n	80122d0 <tcp_keepalive+0x20>
 80122c2:	4b18      	ldr	r3, [pc, #96]	; (8012324 <tcp_keepalive+0x74>)
 80122c4:	f640 0224 	movw	r2, #2084	; 0x824
 80122c8:	4917      	ldr	r1, [pc, #92]	; (8012328 <tcp_keepalive+0x78>)
 80122ca:	4818      	ldr	r0, [pc, #96]	; (801232c <tcp_keepalive+0x7c>)
 80122cc:	f003 fc66 	bl	8015b9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80122d0:	7dfb      	ldrb	r3, [r7, #23]
 80122d2:	b29c      	uxth	r4, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122d8:	3b01      	subs	r3, #1
 80122da:	4618      	mov	r0, r3
 80122dc:	f7f8 f9f9 	bl	800a6d2 <lwip_htonl>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2200      	movs	r2, #0
 80122e4:	4621      	mov	r1, r4
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ff fe66 	bl	8011fb8 <tcp_output_alloc_header>
 80122ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d102      	bne.n	80122fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80122f4:	f04f 33ff 	mov.w	r3, #4294967295
 80122f8:	e010      	b.n	801231c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80122fa:	7dfb      	ldrb	r3, [r7, #23]
 80122fc:	2200      	movs	r2, #0
 80122fe:	6939      	ldr	r1, [r7, #16]
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7ff fe97 	bl	8012034 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	3304      	adds	r3, #4
 801230c:	6939      	ldr	r1, [r7, #16]
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff fed0 	bl	80120b4 <tcp_output_control_segment>
 8012314:	4603      	mov	r3, r0
 8012316:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801231c:	4618      	mov	r0, r3
 801231e:	371c      	adds	r7, #28
 8012320:	46bd      	mov	sp, r7
 8012322:	bd90      	pop	{r4, r7, pc}
 8012324:	08018f8c 	.word	0x08018f8c
 8012328:	08019768 	.word	0x08019768
 801232c:	08018fe0 	.word	0x08018fe0

08012330 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012330:	b590      	push	{r4, r7, lr}
 8012332:	b08b      	sub	sp, #44	; 0x2c
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012338:	2300      	movs	r3, #0
 801233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d106      	bne.n	8012352 <tcp_zero_window_probe+0x22>
 8012344:	4b4c      	ldr	r3, [pc, #304]	; (8012478 <tcp_zero_window_probe+0x148>)
 8012346:	f640 024f 	movw	r2, #2127	; 0x84f
 801234a:	494c      	ldr	r1, [pc, #304]	; (801247c <tcp_zero_window_probe+0x14c>)
 801234c:	484c      	ldr	r0, [pc, #304]	; (8012480 <tcp_zero_window_probe+0x150>)
 801234e:	f003 fc25 	bl	8015b9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012356:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d101      	bne.n	8012362 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801235e:	2300      	movs	r3, #0
 8012360:	e086      	b.n	8012470 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012368:	2bff      	cmp	r3, #255	; 0xff
 801236a:	d007      	beq.n	801237c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012372:	3301      	adds	r3, #1
 8012374:	b2da      	uxtb	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801237c:	6a3b      	ldr	r3, [r7, #32]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	899b      	ldrh	r3, [r3, #12]
 8012382:	b29b      	uxth	r3, r3
 8012384:	4618      	mov	r0, r3
 8012386:	f7f8 f98f 	bl	800a6a8 <lwip_htons>
 801238a:	4603      	mov	r3, r0
 801238c:	b2db      	uxtb	r3, r3
 801238e:	f003 0301 	and.w	r3, r3, #1
 8012392:	2b00      	cmp	r3, #0
 8012394:	d005      	beq.n	80123a2 <tcp_zero_window_probe+0x72>
 8012396:	6a3b      	ldr	r3, [r7, #32]
 8012398:	891b      	ldrh	r3, [r3, #8]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d101      	bne.n	80123a2 <tcp_zero_window_probe+0x72>
 801239e:	2301      	movs	r3, #1
 80123a0:	e000      	b.n	80123a4 <tcp_zero_window_probe+0x74>
 80123a2:	2300      	movs	r3, #0
 80123a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80123a6:	7ffb      	ldrb	r3, [r7, #31]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	bf0c      	ite	eq
 80123ac:	2301      	moveq	r3, #1
 80123ae:	2300      	movne	r3, #0
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80123b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b8:	b299      	uxth	r1, r3
 80123ba:	6a3b      	ldr	r3, [r7, #32]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	8bba      	ldrh	r2, [r7, #28]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7ff fdf8 	bl	8011fb8 <tcp_output_alloc_header>
 80123c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d102      	bne.n	80123d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80123d0:	f04f 33ff 	mov.w	r3, #4294967295
 80123d4:	e04c      	b.n	8012470 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80123dc:	7ffb      	ldrb	r3, [r7, #31]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d011      	beq.n	8012406 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	899b      	ldrh	r3, [r3, #12]
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	b21b      	sxth	r3, r3
 80123ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80123ee:	b21c      	sxth	r4, r3
 80123f0:	2011      	movs	r0, #17
 80123f2:	f7f8 f959 	bl	800a6a8 <lwip_htons>
 80123f6:	4603      	mov	r3, r0
 80123f8:	b21b      	sxth	r3, r3
 80123fa:	4323      	orrs	r3, r4
 80123fc:	b21b      	sxth	r3, r3
 80123fe:	b29a      	uxth	r2, r3
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	819a      	strh	r2, [r3, #12]
 8012404:	e010      	b.n	8012428 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	3314      	adds	r3, #20
 801240c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801240e:	6a3b      	ldr	r3, [r7, #32]
 8012410:	6858      	ldr	r0, [r3, #4]
 8012412:	6a3b      	ldr	r3, [r7, #32]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	891a      	ldrh	r2, [r3, #8]
 8012418:	6a3b      	ldr	r3, [r7, #32]
 801241a:	891b      	ldrh	r3, [r3, #8]
 801241c:	1ad3      	subs	r3, r2, r3
 801241e:	b29b      	uxth	r3, r3
 8012420:	2201      	movs	r2, #1
 8012422:	6939      	ldr	r1, [r7, #16]
 8012424:	f7f9 ff28 	bl	800c278 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	f7f8 f94f 	bl	800a6d2 <lwip_htonl>
 8012434:	4603      	mov	r3, r0
 8012436:	3301      	adds	r3, #1
 8012438:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	2b00      	cmp	r3, #0
 8012444:	da02      	bge.n	801244c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801244c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012450:	2200      	movs	r2, #0
 8012452:	69b9      	ldr	r1, [r7, #24]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff fded 	bl	8012034 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3304      	adds	r3, #4
 8012460:	69b9      	ldr	r1, [r7, #24]
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff fe26 	bl	80120b4 <tcp_output_control_segment>
 8012468:	4603      	mov	r3, r0
 801246a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801246c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012470:	4618      	mov	r0, r3
 8012472:	372c      	adds	r7, #44	; 0x2c
 8012474:	46bd      	mov	sp, r7
 8012476:	bd90      	pop	{r4, r7, pc}
 8012478:	08018f8c 	.word	0x08018f8c
 801247c:	08019784 	.word	0x08019784
 8012480:	08018fe0 	.word	0x08018fe0

08012484 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801248c:	f7f9 ffe2 	bl	800c454 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012490:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <tcpip_tcp_timer+0x38>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d103      	bne.n	80124a0 <tcpip_tcp_timer+0x1c>
 8012498:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <tcpip_tcp_timer+0x3c>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d005      	beq.n	80124ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80124a0:	2200      	movs	r2, #0
 80124a2:	4908      	ldr	r1, [pc, #32]	; (80124c4 <tcpip_tcp_timer+0x40>)
 80124a4:	20fa      	movs	r0, #250	; 0xfa
 80124a6:	f000 f8f3 	bl	8012690 <sys_timeout>
 80124aa:	e003      	b.n	80124b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80124ac:	4b06      	ldr	r3, [pc, #24]	; (80124c8 <tcpip_tcp_timer+0x44>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	601a      	str	r2, [r3, #0]
  }
}
 80124b2:	bf00      	nop
 80124b4:	bf00      	nop
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	2000eed4 	.word	0x2000eed4
 80124c0:	2000eed8 	.word	0x2000eed8
 80124c4:	08012485 	.word	0x08012485
 80124c8:	2000ef20 	.word	0x2000ef20

080124cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80124d0:	4b0a      	ldr	r3, [pc, #40]	; (80124fc <tcp_timer_needed+0x30>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d10f      	bne.n	80124f8 <tcp_timer_needed+0x2c>
 80124d8:	4b09      	ldr	r3, [pc, #36]	; (8012500 <tcp_timer_needed+0x34>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d103      	bne.n	80124e8 <tcp_timer_needed+0x1c>
 80124e0:	4b08      	ldr	r3, [pc, #32]	; (8012504 <tcp_timer_needed+0x38>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d007      	beq.n	80124f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80124e8:	4b04      	ldr	r3, [pc, #16]	; (80124fc <tcp_timer_needed+0x30>)
 80124ea:	2201      	movs	r2, #1
 80124ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80124ee:	2200      	movs	r2, #0
 80124f0:	4905      	ldr	r1, [pc, #20]	; (8012508 <tcp_timer_needed+0x3c>)
 80124f2:	20fa      	movs	r0, #250	; 0xfa
 80124f4:	f000 f8cc 	bl	8012690 <sys_timeout>
  }
}
 80124f8:	bf00      	nop
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	2000ef20 	.word	0x2000ef20
 8012500:	2000eed4 	.word	0x2000eed4
 8012504:	2000eed8 	.word	0x2000eed8
 8012508:	08012485 	.word	0x08012485

0801250c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b086      	sub	sp, #24
 8012510:	af00      	add	r7, sp, #0
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012518:	200a      	movs	r0, #10
 801251a:	f7f8 fd9d 	bl	800b058 <memp_malloc>
 801251e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d109      	bne.n	801253a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d151      	bne.n	80125d0 <sys_timeout_abs+0xc4>
 801252c:	4b2a      	ldr	r3, [pc, #168]	; (80125d8 <sys_timeout_abs+0xcc>)
 801252e:	22be      	movs	r2, #190	; 0xbe
 8012530:	492a      	ldr	r1, [pc, #168]	; (80125dc <sys_timeout_abs+0xd0>)
 8012532:	482b      	ldr	r0, [pc, #172]	; (80125e0 <sys_timeout_abs+0xd4>)
 8012534:	f003 fb32 	bl	8015b9c <iprintf>
    return;
 8012538:	e04a      	b.n	80125d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	2200      	movs	r2, #0
 801253e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	68ba      	ldr	r2, [r7, #8]
 8012544:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012552:	4b24      	ldr	r3, [pc, #144]	; (80125e4 <sys_timeout_abs+0xd8>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d103      	bne.n	8012562 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801255a:	4a22      	ldr	r2, [pc, #136]	; (80125e4 <sys_timeout_abs+0xd8>)
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	6013      	str	r3, [r2, #0]
    return;
 8012560:	e037      	b.n	80125d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	685a      	ldr	r2, [r3, #4]
 8012566:	4b1f      	ldr	r3, [pc, #124]	; (80125e4 <sys_timeout_abs+0xd8>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	0fdb      	lsrs	r3, r3, #31
 8012570:	f003 0301 	and.w	r3, r3, #1
 8012574:	b2db      	uxtb	r3, r3
 8012576:	2b00      	cmp	r3, #0
 8012578:	d007      	beq.n	801258a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801257a:	4b1a      	ldr	r3, [pc, #104]	; (80125e4 <sys_timeout_abs+0xd8>)
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012582:	4a18      	ldr	r2, [pc, #96]	; (80125e4 <sys_timeout_abs+0xd8>)
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	6013      	str	r3, [r2, #0]
 8012588:	e023      	b.n	80125d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801258a:	4b16      	ldr	r3, [pc, #88]	; (80125e4 <sys_timeout_abs+0xd8>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	617b      	str	r3, [r7, #20]
 8012590:	e01a      	b.n	80125c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00b      	beq.n	80125b2 <sys_timeout_abs+0xa6>
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	685a      	ldr	r2, [r3, #4]
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	1ad3      	subs	r3, r2, r3
 80125a6:	0fdb      	lsrs	r3, r3, #31
 80125a8:	f003 0301 	and.w	r3, r3, #1
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d007      	beq.n	80125c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	693a      	ldr	r2, [r7, #16]
 80125be:	601a      	str	r2, [r3, #0]
        break;
 80125c0:	e007      	b.n	80125d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	617b      	str	r3, [r7, #20]
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d1e1      	bne.n	8012592 <sys_timeout_abs+0x86>
 80125ce:	e000      	b.n	80125d2 <sys_timeout_abs+0xc6>
    return;
 80125d0:	bf00      	nop
      }
    }
  }
}
 80125d2:	3718      	adds	r7, #24
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	080197a8 	.word	0x080197a8
 80125dc:	080197dc 	.word	0x080197dc
 80125e0:	0801981c 	.word	0x0801981c
 80125e4:	2000ef18 	.word	0x2000ef18

080125e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	4798      	blx	r3

  now = sys_now();
 80125fa:	f7f2 fb13 	bl	8004c24 <sys_now>
 80125fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	4b0f      	ldr	r3, [pc, #60]	; (8012644 <lwip_cyclic_timer+0x5c>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4413      	add	r3, r2
 801260a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	0fdb      	lsrs	r3, r3, #31
 8012614:	f003 0301 	and.w	r3, r3, #1
 8012618:	b2db      	uxtb	r3, r3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d009      	beq.n	8012632 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	4413      	add	r3, r2
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	4907      	ldr	r1, [pc, #28]	; (8012648 <lwip_cyclic_timer+0x60>)
 801262a:	4618      	mov	r0, r3
 801262c:	f7ff ff6e 	bl	801250c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012630:	e004      	b.n	801263c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	4904      	ldr	r1, [pc, #16]	; (8012648 <lwip_cyclic_timer+0x60>)
 8012636:	68f8      	ldr	r0, [r7, #12]
 8012638:	f7ff ff68 	bl	801250c <sys_timeout_abs>
}
 801263c:	bf00      	nop
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	2000ef1c 	.word	0x2000ef1c
 8012648:	080125e9 	.word	0x080125e9

0801264c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012652:	2301      	movs	r3, #1
 8012654:	607b      	str	r3, [r7, #4]
 8012656:	e00e      	b.n	8012676 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012658:	4a0b      	ldr	r2, [pc, #44]	; (8012688 <sys_timeouts_init+0x3c>)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	4a08      	ldr	r2, [pc, #32]	; (8012688 <sys_timeouts_init+0x3c>)
 8012666:	4413      	add	r3, r2
 8012668:	461a      	mov	r2, r3
 801266a:	4908      	ldr	r1, [pc, #32]	; (801268c <sys_timeouts_init+0x40>)
 801266c:	f000 f810 	bl	8012690 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3301      	adds	r3, #1
 8012674:	607b      	str	r3, [r7, #4]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b02      	cmp	r3, #2
 801267a:	d9ed      	bls.n	8012658 <sys_timeouts_init+0xc>
  }
}
 801267c:	bf00      	nop
 801267e:	bf00      	nop
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801a3d8 	.word	0x0801a3d8
 801268c:	080125e9 	.word	0x080125e9

08012690 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126a2:	d306      	bcc.n	80126b2 <sys_timeout+0x22>
 80126a4:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <sys_timeout+0x40>)
 80126a6:	f240 1229 	movw	r2, #297	; 0x129
 80126aa:	490a      	ldr	r1, [pc, #40]	; (80126d4 <sys_timeout+0x44>)
 80126ac:	480a      	ldr	r0, [pc, #40]	; (80126d8 <sys_timeout+0x48>)
 80126ae:	f003 fa75 	bl	8015b9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80126b2:	f7f2 fab7 	bl	8004c24 <sys_now>
 80126b6:	4602      	mov	r2, r0
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	4413      	add	r3, r2
 80126bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	68b9      	ldr	r1, [r7, #8]
 80126c2:	6978      	ldr	r0, [r7, #20]
 80126c4:	f7ff ff22 	bl	801250c <sys_timeout_abs>
#endif
}
 80126c8:	bf00      	nop
 80126ca:	3718      	adds	r7, #24
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	080197a8 	.word	0x080197a8
 80126d4:	08019844 	.word	0x08019844
 80126d8:	0801981c 	.word	0x0801981c

080126dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80126e2:	f7f2 fa9f 	bl	8004c24 <sys_now>
 80126e6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80126e8:	4b17      	ldr	r3, [pc, #92]	; (8012748 <sys_check_timeouts+0x6c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d022      	beq.n	801273a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	68fa      	ldr	r2, [r7, #12]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	0fdb      	lsrs	r3, r3, #31
 80126fe:	f003 0301 	and.w	r3, r3, #1
 8012702:	b2db      	uxtb	r3, r3
 8012704:	2b00      	cmp	r3, #0
 8012706:	d11a      	bne.n	801273e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a0e      	ldr	r2, [pc, #56]	; (8012748 <sys_check_timeouts+0x6c>)
 801270e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	689b      	ldr	r3, [r3, #8]
 8012714:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	4a0a      	ldr	r2, [pc, #40]	; (801274c <sys_check_timeouts+0x70>)
 8012722:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012724:	68b9      	ldr	r1, [r7, #8]
 8012726:	200a      	movs	r0, #10
 8012728:	f7f8 fd0c 	bl	800b144 <memp_free>
    if (handler != NULL) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d0da      	beq.n	80126e8 <sys_check_timeouts+0xc>
      handler(arg);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6838      	ldr	r0, [r7, #0]
 8012736:	4798      	blx	r3
  do {
 8012738:	e7d6      	b.n	80126e8 <sys_check_timeouts+0xc>
      return;
 801273a:	bf00      	nop
 801273c:	e000      	b.n	8012740 <sys_check_timeouts+0x64>
      return;
 801273e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	2000ef18 	.word	0x2000ef18
 801274c:	2000ef1c 	.word	0x2000ef1c

08012750 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012756:	4b16      	ldr	r3, [pc, #88]	; (80127b0 <sys_timeouts_sleeptime+0x60>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d102      	bne.n	8012764 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801275e:	f04f 33ff 	mov.w	r3, #4294967295
 8012762:	e020      	b.n	80127a6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012764:	f7f2 fa5e 	bl	8004c24 <sys_now>
 8012768:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801276a:	4b11      	ldr	r3, [pc, #68]	; (80127b0 <sys_timeouts_sleeptime+0x60>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	685a      	ldr	r2, [r3, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	0fdb      	lsrs	r3, r3, #31
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b00      	cmp	r3, #0
 801277e:	d001      	beq.n	8012784 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012780:	2300      	movs	r3, #0
 8012782:	e010      	b.n	80127a6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012784:	4b0a      	ldr	r3, [pc, #40]	; (80127b0 <sys_timeouts_sleeptime+0x60>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	685a      	ldr	r2, [r3, #4]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	da06      	bge.n	80127a4 <sys_timeouts_sleeptime+0x54>
 8012796:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <sys_timeouts_sleeptime+0x64>)
 8012798:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801279c:	4906      	ldr	r1, [pc, #24]	; (80127b8 <sys_timeouts_sleeptime+0x68>)
 801279e:	4807      	ldr	r0, [pc, #28]	; (80127bc <sys_timeouts_sleeptime+0x6c>)
 80127a0:	f003 f9fc 	bl	8015b9c <iprintf>
    return ret;
 80127a4:	683b      	ldr	r3, [r7, #0]
  }
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3708      	adds	r7, #8
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	2000ef18 	.word	0x2000ef18
 80127b4:	080197a8 	.word	0x080197a8
 80127b8:	0801987c 	.word	0x0801987c
 80127bc:	0801981c 	.word	0x0801981c

080127c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80127c4:	f003 fa02 	bl	8015bcc <rand>
 80127c8:	4603      	mov	r3, r0
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	4b01      	ldr	r3, [pc, #4]	; (80127e0 <udp_init+0x20>)
 80127da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80127dc:	bf00      	nop
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	2000002c 	.word	0x2000002c

080127e4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80127ea:	2300      	movs	r3, #0
 80127ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80127ee:	4b17      	ldr	r3, [pc, #92]	; (801284c <udp_new_port+0x68>)
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	b291      	uxth	r1, r2
 80127f6:	4a15      	ldr	r2, [pc, #84]	; (801284c <udp_new_port+0x68>)
 80127f8:	8011      	strh	r1, [r2, #0]
 80127fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127fe:	4293      	cmp	r3, r2
 8012800:	d103      	bne.n	801280a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012802:	4b12      	ldr	r3, [pc, #72]	; (801284c <udp_new_port+0x68>)
 8012804:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012808:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <udp_new_port+0x6c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	603b      	str	r3, [r7, #0]
 8012810:	e011      	b.n	8012836 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	8a5a      	ldrh	r2, [r3, #18]
 8012816:	4b0d      	ldr	r3, [pc, #52]	; (801284c <udp_new_port+0x68>)
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	429a      	cmp	r2, r3
 801281c:	d108      	bne.n	8012830 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801281e:	88fb      	ldrh	r3, [r7, #6]
 8012820:	3301      	adds	r3, #1
 8012822:	80fb      	strh	r3, [r7, #6]
 8012824:	88fb      	ldrh	r3, [r7, #6]
 8012826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801282a:	d3e0      	bcc.n	80127ee <udp_new_port+0xa>
        return 0;
 801282c:	2300      	movs	r3, #0
 801282e:	e007      	b.n	8012840 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	603b      	str	r3, [r7, #0]
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1ea      	bne.n	8012812 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801283c:	4b03      	ldr	r3, [pc, #12]	; (801284c <udp_new_port+0x68>)
 801283e:	881b      	ldrh	r3, [r3, #0]
}
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	2000002c 	.word	0x2000002c
 8012850:	2000ef24 	.word	0x2000ef24

08012854 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	4613      	mov	r3, r2
 8012860:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d105      	bne.n	8012874 <udp_input_local_match+0x20>
 8012868:	4b27      	ldr	r3, [pc, #156]	; (8012908 <udp_input_local_match+0xb4>)
 801286a:	2287      	movs	r2, #135	; 0x87
 801286c:	4927      	ldr	r1, [pc, #156]	; (801290c <udp_input_local_match+0xb8>)
 801286e:	4828      	ldr	r0, [pc, #160]	; (8012910 <udp_input_local_match+0xbc>)
 8012870:	f003 f994 	bl	8015b9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d105      	bne.n	8012886 <udp_input_local_match+0x32>
 801287a:	4b23      	ldr	r3, [pc, #140]	; (8012908 <udp_input_local_match+0xb4>)
 801287c:	2288      	movs	r2, #136	; 0x88
 801287e:	4925      	ldr	r1, [pc, #148]	; (8012914 <udp_input_local_match+0xc0>)
 8012880:	4823      	ldr	r0, [pc, #140]	; (8012910 <udp_input_local_match+0xbc>)
 8012882:	f003 f98b 	bl	8015b9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	7a1b      	ldrb	r3, [r3, #8]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00b      	beq.n	80128a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	7a1a      	ldrb	r2, [r3, #8]
 8012892:	4b21      	ldr	r3, [pc, #132]	; (8012918 <udp_input_local_match+0xc4>)
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801289a:	3301      	adds	r3, #1
 801289c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801289e:	429a      	cmp	r2, r3
 80128a0:	d001      	beq.n	80128a6 <udp_input_local_match+0x52>
    return 0;
 80128a2:	2300      	movs	r3, #0
 80128a4:	e02b      	b.n	80128fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80128a6:	79fb      	ldrb	r3, [r7, #7]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d018      	beq.n	80128de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d013      	beq.n	80128da <udp_input_local_match+0x86>
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00f      	beq.n	80128da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80128ba:	4b17      	ldr	r3, [pc, #92]	; (8012918 <udp_input_local_match+0xc4>)
 80128bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80128be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c2:	d00a      	beq.n	80128da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	4b13      	ldr	r3, [pc, #76]	; (8012918 <udp_input_local_match+0xc4>)
 80128ca:	695b      	ldr	r3, [r3, #20]
 80128cc:	405a      	eors	r2, r3
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	3308      	adds	r3, #8
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d110      	bne.n	80128fc <udp_input_local_match+0xa8>
          return 1;
 80128da:	2301      	movs	r3, #1
 80128dc:	e00f      	b.n	80128fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d009      	beq.n	80128f8 <udp_input_local_match+0xa4>
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d005      	beq.n	80128f8 <udp_input_local_match+0xa4>
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	4b09      	ldr	r3, [pc, #36]	; (8012918 <udp_input_local_match+0xc4>)
 80128f2:	695b      	ldr	r3, [r3, #20]
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d101      	bne.n	80128fc <udp_input_local_match+0xa8>
        return 1;
 80128f8:	2301      	movs	r3, #1
 80128fa:	e000      	b.n	80128fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	08019890 	.word	0x08019890
 801290c:	080198c0 	.word	0x080198c0
 8012910:	080198e4 	.word	0x080198e4
 8012914:	0801990c 	.word	0x0801990c
 8012918:	200095b4 	.word	0x200095b4

0801291c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801291c:	b590      	push	{r4, r7, lr}
 801291e:	b08d      	sub	sp, #52	; 0x34
 8012920:	af02      	add	r7, sp, #8
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012926:	2300      	movs	r3, #0
 8012928:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d105      	bne.n	801293c <udp_input+0x20>
 8012930:	4b7c      	ldr	r3, [pc, #496]	; (8012b24 <udp_input+0x208>)
 8012932:	22cf      	movs	r2, #207	; 0xcf
 8012934:	497c      	ldr	r1, [pc, #496]	; (8012b28 <udp_input+0x20c>)
 8012936:	487d      	ldr	r0, [pc, #500]	; (8012b2c <udp_input+0x210>)
 8012938:	f003 f930 	bl	8015b9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d105      	bne.n	801294e <udp_input+0x32>
 8012942:	4b78      	ldr	r3, [pc, #480]	; (8012b24 <udp_input+0x208>)
 8012944:	22d0      	movs	r2, #208	; 0xd0
 8012946:	497a      	ldr	r1, [pc, #488]	; (8012b30 <udp_input+0x214>)
 8012948:	4878      	ldr	r0, [pc, #480]	; (8012b2c <udp_input+0x210>)
 801294a:	f003 f927 	bl	8015b9c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	895b      	ldrh	r3, [r3, #10]
 8012952:	2b07      	cmp	r3, #7
 8012954:	d803      	bhi.n	801295e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7f9 fa98 	bl	800be8c <pbuf_free>
    goto end;
 801295c:	e0de      	b.n	8012b1c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012964:	4b73      	ldr	r3, [pc, #460]	; (8012b34 <udp_input+0x218>)
 8012966:	695b      	ldr	r3, [r3, #20]
 8012968:	4a72      	ldr	r2, [pc, #456]	; (8012b34 <udp_input+0x218>)
 801296a:	6812      	ldr	r2, [r2, #0]
 801296c:	4611      	mov	r1, r2
 801296e:	4618      	mov	r0, r3
 8012970:	f001 fd96 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 8012974:	4603      	mov	r3, r0
 8012976:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	b29b      	uxth	r3, r3
 801297e:	4618      	mov	r0, r3
 8012980:	f7f7 fe92 	bl	800a6a8 <lwip_htons>
 8012984:	4603      	mov	r3, r0
 8012986:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	885b      	ldrh	r3, [r3, #2]
 801298c:	b29b      	uxth	r3, r3
 801298e:	4618      	mov	r0, r3
 8012990:	f7f7 fe8a 	bl	800a6a8 <lwip_htons>
 8012994:	4603      	mov	r3, r0
 8012996:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012998:	2300      	movs	r3, #0
 801299a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801299c:	2300      	movs	r3, #0
 801299e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80129a4:	4b64      	ldr	r3, [pc, #400]	; (8012b38 <udp_input+0x21c>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	627b      	str	r3, [r7, #36]	; 0x24
 80129aa:	e054      	b.n	8012a56 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	8a5b      	ldrh	r3, [r3, #18]
 80129b0:	89fa      	ldrh	r2, [r7, #14]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d14a      	bne.n	8012a4c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80129b6:	7cfb      	ldrb	r3, [r7, #19]
 80129b8:	461a      	mov	r2, r3
 80129ba:	6839      	ldr	r1, [r7, #0]
 80129bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129be:	f7ff ff49 	bl	8012854 <udp_input_local_match>
 80129c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d041      	beq.n	8012a4c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	7c1b      	ldrb	r3, [r3, #16]
 80129cc:	f003 0304 	and.w	r3, r3, #4
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d11d      	bne.n	8012a10 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d102      	bne.n	80129e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	61fb      	str	r3, [r7, #28]
 80129de:	e017      	b.n	8012a10 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80129e0:	7cfb      	ldrb	r3, [r7, #19]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d014      	beq.n	8012a10 <udp_input+0xf4>
 80129e6:	4b53      	ldr	r3, [pc, #332]	; (8012b34 <udp_input+0x218>)
 80129e8:	695b      	ldr	r3, [r3, #20]
 80129ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ee:	d10f      	bne.n	8012a10 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	3304      	adds	r3, #4
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d008      	beq.n	8012a10 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	3304      	adds	r3, #4
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d101      	bne.n	8012a10 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	8a9b      	ldrh	r3, [r3, #20]
 8012a14:	8a3a      	ldrh	r2, [r7, #16]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d118      	bne.n	8012a4c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d005      	beq.n	8012a2e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	4b43      	ldr	r3, [pc, #268]	; (8012b34 <udp_input+0x218>)
 8012a28:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d10e      	bne.n	8012a4c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012a2e:	6a3b      	ldr	r3, [r7, #32]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d014      	beq.n	8012a5e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	68da      	ldr	r2, [r3, #12]
 8012a38:	6a3b      	ldr	r3, [r7, #32]
 8012a3a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012a3c:	4b3e      	ldr	r3, [pc, #248]	; (8012b38 <udp_input+0x21c>)
 8012a3e:	681a      	ldr	r2, [r3, #0]
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012a44:	4a3c      	ldr	r2, [pc, #240]	; (8012b38 <udp_input+0x21c>)
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012a4a:	e008      	b.n	8012a5e <udp_input+0x142>
      }
    }

    prev = pcb;
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	627b      	str	r3, [r7, #36]	; 0x24
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d1a7      	bne.n	80129ac <udp_input+0x90>
 8012a5c:	e000      	b.n	8012a60 <udp_input+0x144>
        break;
 8012a5e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d101      	bne.n	8012a6a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012a66:	69fb      	ldr	r3, [r7, #28]
 8012a68:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d002      	beq.n	8012a76 <udp_input+0x15a>
    for_us = 1;
 8012a70:	2301      	movs	r3, #1
 8012a72:	76fb      	strb	r3, [r7, #27]
 8012a74:	e00a      	b.n	8012a8c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	3304      	adds	r3, #4
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	4b2d      	ldr	r3, [pc, #180]	; (8012b34 <udp_input+0x218>)
 8012a7e:	695b      	ldr	r3, [r3, #20]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	bf0c      	ite	eq
 8012a84:	2301      	moveq	r3, #1
 8012a86:	2300      	movne	r3, #0
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012a8c:	7efb      	ldrb	r3, [r7, #27]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d041      	beq.n	8012b16 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012a92:	2108      	movs	r1, #8
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7f9 f973 	bl	800bd80 <pbuf_remove_header>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00a      	beq.n	8012ab6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012aa0:	4b20      	ldr	r3, [pc, #128]	; (8012b24 <udp_input+0x208>)
 8012aa2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012aa6:	4925      	ldr	r1, [pc, #148]	; (8012b3c <udp_input+0x220>)
 8012aa8:	4820      	ldr	r0, [pc, #128]	; (8012b2c <udp_input+0x210>)
 8012aaa:	f003 f877 	bl	8015b9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7f9 f9ec 	bl	800be8c <pbuf_free>
      goto end;
 8012ab4:	e032      	b.n	8012b1c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d012      	beq.n	8012ae2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	699b      	ldr	r3, [r3, #24]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00a      	beq.n	8012ada <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	699c      	ldr	r4, [r3, #24]
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	69d8      	ldr	r0, [r3, #28]
 8012acc:	8a3b      	ldrh	r3, [r7, #16]
 8012ace:	9300      	str	r3, [sp, #0]
 8012ad0:	4b1b      	ldr	r3, [pc, #108]	; (8012b40 <udp_input+0x224>)
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ad6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012ad8:	e021      	b.n	8012b1e <udp_input+0x202>
        pbuf_free(p);
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7f9 f9d6 	bl	800be8c <pbuf_free>
        goto end;
 8012ae0:	e01c      	b.n	8012b1c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012ae2:	7cfb      	ldrb	r3, [r7, #19]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d112      	bne.n	8012b0e <udp_input+0x1f2>
 8012ae8:	4b12      	ldr	r3, [pc, #72]	; (8012b34 <udp_input+0x218>)
 8012aea:	695b      	ldr	r3, [r3, #20]
 8012aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012af0:	2be0      	cmp	r3, #224	; 0xe0
 8012af2:	d00c      	beq.n	8012b0e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012af4:	4b0f      	ldr	r3, [pc, #60]	; (8012b34 <udp_input+0x218>)
 8012af6:	899b      	ldrh	r3, [r3, #12]
 8012af8:	3308      	adds	r3, #8
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	b21b      	sxth	r3, r3
 8012afe:	4619      	mov	r1, r3
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7f9 f9b0 	bl	800be66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012b06:	2103      	movs	r1, #3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f001 f9a9 	bl	8013e60 <icmp_dest_unreach>
      pbuf_free(p);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7f9 f9bc 	bl	800be8c <pbuf_free>
  return;
 8012b14:	e003      	b.n	8012b1e <udp_input+0x202>
    pbuf_free(p);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7f9 f9b8 	bl	800be8c <pbuf_free>
  return;
 8012b1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012b1e:	372c      	adds	r7, #44	; 0x2c
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd90      	pop	{r4, r7, pc}
 8012b24:	08019890 	.word	0x08019890
 8012b28:	08019934 	.word	0x08019934
 8012b2c:	080198e4 	.word	0x080198e4
 8012b30:	0801994c 	.word	0x0801994c
 8012b34:	200095b4 	.word	0x200095b4
 8012b38:	2000ef24 	.word	0x2000ef24
 8012b3c:	08019968 	.word	0x08019968
 8012b40:	200095c4 	.word	0x200095c4

08012b44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012b58:	4b39      	ldr	r3, [pc, #228]	; (8012c40 <udp_bind+0xfc>)
 8012b5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d109      	bne.n	8012b76 <udp_bind+0x32>
 8012b62:	4b38      	ldr	r3, [pc, #224]	; (8012c44 <udp_bind+0x100>)
 8012b64:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012b68:	4937      	ldr	r1, [pc, #220]	; (8012c48 <udp_bind+0x104>)
 8012b6a:	4838      	ldr	r0, [pc, #224]	; (8012c4c <udp_bind+0x108>)
 8012b6c:	f003 f816 	bl	8015b9c <iprintf>
 8012b70:	f06f 030f 	mvn.w	r3, #15
 8012b74:	e060      	b.n	8012c38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012b76:	2300      	movs	r3, #0
 8012b78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b7a:	4b35      	ldr	r3, [pc, #212]	; (8012c50 <udp_bind+0x10c>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	617b      	str	r3, [r7, #20]
 8012b80:	e009      	b.n	8012b96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012b82:	68fa      	ldr	r2, [r7, #12]
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d102      	bne.n	8012b90 <udp_bind+0x4c>
      rebind = 1;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8012b8e:	e005      	b.n	8012b9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d1f2      	bne.n	8012b82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012b9c:	88fb      	ldrh	r3, [r7, #6]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d109      	bne.n	8012bb6 <udp_bind+0x72>
    port = udp_new_port();
 8012ba2:	f7ff fe1f 	bl	80127e4 <udp_new_port>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012baa:	88fb      	ldrh	r3, [r7, #6]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d12c      	bne.n	8012c0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012bb0:	f06f 0307 	mvn.w	r3, #7
 8012bb4:	e040      	b.n	8012c38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012bb6:	4b26      	ldr	r3, [pc, #152]	; (8012c50 <udp_bind+0x10c>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	617b      	str	r3, [r7, #20]
 8012bbc:	e022      	b.n	8012c04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d01b      	beq.n	8012bfe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	8a5b      	ldrh	r3, [r3, #18]
 8012bca:	88fa      	ldrh	r2, [r7, #6]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d116      	bne.n	8012bfe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d00d      	beq.n	8012bf8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00a      	beq.n	8012bf8 <udp_bind+0xb4>
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d006      	beq.n	8012bf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012bea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d003      	beq.n	8012bf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d102      	bne.n	8012bfe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012bf8:	f06f 0307 	mvn.w	r3, #7
 8012bfc:	e01c      	b.n	8012c38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	68db      	ldr	r3, [r3, #12]
 8012c02:	617b      	str	r3, [r7, #20]
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1d9      	bne.n	8012bbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <udp_bind+0xd2>
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	e000      	b.n	8012c18 <udp_bind+0xd4>
 8012c16:	2300      	movs	r3, #0
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	88fa      	ldrh	r2, [r7, #6]
 8012c20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012c22:	7cfb      	ldrb	r3, [r7, #19]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d106      	bne.n	8012c36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012c28:	4b09      	ldr	r3, [pc, #36]	; (8012c50 <udp_bind+0x10c>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012c30:	4a07      	ldr	r2, [pc, #28]	; (8012c50 <udp_bind+0x10c>)
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012c36:	2300      	movs	r3, #0
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3718      	adds	r7, #24
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	0801a3f0 	.word	0x0801a3f0
 8012c44:	08019890 	.word	0x08019890
 8012c48:	08019b58 	.word	0x08019b58
 8012c4c:	080198e4 	.word	0x080198e4
 8012c50:	2000ef24 	.word	0x2000ef24

08012c54 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d107      	bne.n	8012c76 <udp_recv+0x22>
 8012c66:	4b08      	ldr	r3, [pc, #32]	; (8012c88 <udp_recv+0x34>)
 8012c68:	f240 428a 	movw	r2, #1162	; 0x48a
 8012c6c:	4907      	ldr	r1, [pc, #28]	; (8012c8c <udp_recv+0x38>)
 8012c6e:	4808      	ldr	r0, [pc, #32]	; (8012c90 <udp_recv+0x3c>)
 8012c70:	f002 ff94 	bl	8015b9c <iprintf>
 8012c74:	e005      	b.n	8012c82 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	68ba      	ldr	r2, [r7, #8]
 8012c7a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	61da      	str	r2, [r3, #28]
}
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	08019890 	.word	0x08019890
 8012c8c:	08019bc4 	.word	0x08019bc4
 8012c90:	080198e4 	.word	0x080198e4

08012c94 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d107      	bne.n	8012cb2 <udp_remove+0x1e>
 8012ca2:	4b19      	ldr	r3, [pc, #100]	; (8012d08 <udp_remove+0x74>)
 8012ca4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012ca8:	4918      	ldr	r1, [pc, #96]	; (8012d0c <udp_remove+0x78>)
 8012caa:	4819      	ldr	r0, [pc, #100]	; (8012d10 <udp_remove+0x7c>)
 8012cac:	f002 ff76 	bl	8015b9c <iprintf>
 8012cb0:	e026      	b.n	8012d00 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012cb2:	4b18      	ldr	r3, [pc, #96]	; (8012d14 <udp_remove+0x80>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	687a      	ldr	r2, [r7, #4]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d105      	bne.n	8012cc8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012cbc:	4b15      	ldr	r3, [pc, #84]	; (8012d14 <udp_remove+0x80>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	4a14      	ldr	r2, [pc, #80]	; (8012d14 <udp_remove+0x80>)
 8012cc4:	6013      	str	r3, [r2, #0]
 8012cc6:	e017      	b.n	8012cf8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012cc8:	4b12      	ldr	r3, [pc, #72]	; (8012d14 <udp_remove+0x80>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	60fb      	str	r3, [r7, #12]
 8012cce:	e010      	b.n	8012cf2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d009      	beq.n	8012cec <udp_remove+0x58>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d104      	bne.n	8012cec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68da      	ldr	r2, [r3, #12]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	60da      	str	r2, [r3, #12]
        break;
 8012cea:	e005      	b.n	8012cf8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	60fb      	str	r3, [r7, #12]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1eb      	bne.n	8012cd0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012cf8:	6879      	ldr	r1, [r7, #4]
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	f7f8 fa22 	bl	800b144 <memp_free>
}
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	08019890 	.word	0x08019890
 8012d0c:	08019bdc 	.word	0x08019bdc
 8012d10:	080198e4 	.word	0x080198e4
 8012d14:	2000ef24 	.word	0x2000ef24

08012d18 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012d1e:	2000      	movs	r0, #0
 8012d20:	f7f8 f99a 	bl	800b058 <memp_malloc>
 8012d24:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d007      	beq.n	8012d3c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012d2c:	2220      	movs	r2, #32
 8012d2e:	2100      	movs	r1, #0
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f002 fe4b 	bl	80159cc <memset>
    pcb->ttl = UDP_TTL;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	22ff      	movs	r2, #255	; 0xff
 8012d3a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012d3c:	687b      	ldr	r3, [r7, #4]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b084      	sub	sp, #16
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012d50:	f7ff ffe2 	bl	8012d18 <udp_new>
 8012d54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012d56:	68fb      	ldr	r3, [r7, #12]
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3710      	adds	r7, #16
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b085      	sub	sp, #20
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d01e      	beq.n	8012dae <udp_netif_ip_addr_changed+0x4e>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d01a      	beq.n	8012dae <udp_netif_ip_addr_changed+0x4e>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d017      	beq.n	8012dae <udp_netif_ip_addr_changed+0x4e>
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d013      	beq.n	8012dae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012d86:	4b0d      	ldr	r3, [pc, #52]	; (8012dbc <udp_netif_ip_addr_changed+0x5c>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	60fb      	str	r3, [r7, #12]
 8012d8c:	e00c      	b.n	8012da8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d103      	bne.n	8012da2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	60fb      	str	r3, [r7, #12]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1ef      	bne.n	8012d8e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012dae:	bf00      	nop
 8012db0:	3714      	adds	r7, #20
 8012db2:	46bd      	mov	sp, r7
 8012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop
 8012dbc:	2000ef24 	.word	0x2000ef24

08012dc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012dc8:	4915      	ldr	r1, [pc, #84]	; (8012e20 <etharp_free_entry+0x60>)
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	4613      	mov	r3, r2
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	4413      	add	r3, r2
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	440b      	add	r3, r1
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d013      	beq.n	8012e04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012ddc:	4910      	ldr	r1, [pc, #64]	; (8012e20 <etharp_free_entry+0x60>)
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	4613      	mov	r3, r2
 8012de2:	005b      	lsls	r3, r3, #1
 8012de4:	4413      	add	r3, r2
 8012de6:	00db      	lsls	r3, r3, #3
 8012de8:	440b      	add	r3, r1
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f9 f84d 	bl	800be8c <pbuf_free>
    arp_table[i].q = NULL;
 8012df2:	490b      	ldr	r1, [pc, #44]	; (8012e20 <etharp_free_entry+0x60>)
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	4613      	mov	r3, r2
 8012df8:	005b      	lsls	r3, r3, #1
 8012dfa:	4413      	add	r3, r2
 8012dfc:	00db      	lsls	r3, r3, #3
 8012dfe:	440b      	add	r3, r1
 8012e00:	2200      	movs	r2, #0
 8012e02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012e04:	4906      	ldr	r1, [pc, #24]	; (8012e20 <etharp_free_entry+0x60>)
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	4613      	mov	r3, r2
 8012e0a:	005b      	lsls	r3, r3, #1
 8012e0c:	4413      	add	r3, r2
 8012e0e:	00db      	lsls	r3, r3, #3
 8012e10:	440b      	add	r3, r1
 8012e12:	3314      	adds	r3, #20
 8012e14:	2200      	movs	r2, #0
 8012e16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012e18:	bf00      	nop
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	2000ef28 	.word	0x2000ef28

08012e24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	607b      	str	r3, [r7, #4]
 8012e2e:	e096      	b.n	8012f5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012e30:	494f      	ldr	r1, [pc, #316]	; (8012f70 <etharp_tmr+0x14c>)
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	4613      	mov	r3, r2
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	4413      	add	r3, r2
 8012e3a:	00db      	lsls	r3, r3, #3
 8012e3c:	440b      	add	r3, r1
 8012e3e:	3314      	adds	r3, #20
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012e44:	78fb      	ldrb	r3, [r7, #3]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f000 8086 	beq.w	8012f58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012e4c:	4948      	ldr	r1, [pc, #288]	; (8012f70 <etharp_tmr+0x14c>)
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	4613      	mov	r3, r2
 8012e52:	005b      	lsls	r3, r3, #1
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	440b      	add	r3, r1
 8012e5a:	3312      	adds	r3, #18
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	b298      	uxth	r0, r3
 8012e62:	4943      	ldr	r1, [pc, #268]	; (8012f70 <etharp_tmr+0x14c>)
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	4613      	mov	r3, r2
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	4413      	add	r3, r2
 8012e6c:	00db      	lsls	r3, r3, #3
 8012e6e:	440b      	add	r3, r1
 8012e70:	3312      	adds	r3, #18
 8012e72:	4602      	mov	r2, r0
 8012e74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012e76:	493e      	ldr	r1, [pc, #248]	; (8012f70 <etharp_tmr+0x14c>)
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	4413      	add	r3, r2
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	440b      	add	r3, r1
 8012e84:	3312      	adds	r3, #18
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012e8c:	d215      	bcs.n	8012eba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012e8e:	4938      	ldr	r1, [pc, #224]	; (8012f70 <etharp_tmr+0x14c>)
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	4613      	mov	r3, r2
 8012e94:	005b      	lsls	r3, r3, #1
 8012e96:	4413      	add	r3, r2
 8012e98:	00db      	lsls	r3, r3, #3
 8012e9a:	440b      	add	r3, r1
 8012e9c:	3314      	adds	r3, #20
 8012e9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d10e      	bne.n	8012ec2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012ea4:	4932      	ldr	r1, [pc, #200]	; (8012f70 <etharp_tmr+0x14c>)
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	4613      	mov	r3, r2
 8012eaa:	005b      	lsls	r3, r3, #1
 8012eac:	4413      	add	r3, r2
 8012eae:	00db      	lsls	r3, r3, #3
 8012eb0:	440b      	add	r3, r1
 8012eb2:	3312      	adds	r3, #18
 8012eb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012eb6:	2b04      	cmp	r3, #4
 8012eb8:	d903      	bls.n	8012ec2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7ff ff80 	bl	8012dc0 <etharp_free_entry>
 8012ec0:	e04a      	b.n	8012f58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012ec2:	492b      	ldr	r1, [pc, #172]	; (8012f70 <etharp_tmr+0x14c>)
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	005b      	lsls	r3, r3, #1
 8012eca:	4413      	add	r3, r2
 8012ecc:	00db      	lsls	r3, r3, #3
 8012ece:	440b      	add	r3, r1
 8012ed0:	3314      	adds	r3, #20
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	2b03      	cmp	r3, #3
 8012ed6:	d10a      	bne.n	8012eee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012ed8:	4925      	ldr	r1, [pc, #148]	; (8012f70 <etharp_tmr+0x14c>)
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	4613      	mov	r3, r2
 8012ede:	005b      	lsls	r3, r3, #1
 8012ee0:	4413      	add	r3, r2
 8012ee2:	00db      	lsls	r3, r3, #3
 8012ee4:	440b      	add	r3, r1
 8012ee6:	3314      	adds	r3, #20
 8012ee8:	2204      	movs	r2, #4
 8012eea:	701a      	strb	r2, [r3, #0]
 8012eec:	e034      	b.n	8012f58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012eee:	4920      	ldr	r1, [pc, #128]	; (8012f70 <etharp_tmr+0x14c>)
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	005b      	lsls	r3, r3, #1
 8012ef6:	4413      	add	r3, r2
 8012ef8:	00db      	lsls	r3, r3, #3
 8012efa:	440b      	add	r3, r1
 8012efc:	3314      	adds	r3, #20
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	2b04      	cmp	r3, #4
 8012f02:	d10a      	bne.n	8012f1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012f04:	491a      	ldr	r1, [pc, #104]	; (8012f70 <etharp_tmr+0x14c>)
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	4613      	mov	r3, r2
 8012f0a:	005b      	lsls	r3, r3, #1
 8012f0c:	4413      	add	r3, r2
 8012f0e:	00db      	lsls	r3, r3, #3
 8012f10:	440b      	add	r3, r1
 8012f12:	3314      	adds	r3, #20
 8012f14:	2202      	movs	r2, #2
 8012f16:	701a      	strb	r2, [r3, #0]
 8012f18:	e01e      	b.n	8012f58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012f1a:	4915      	ldr	r1, [pc, #84]	; (8012f70 <etharp_tmr+0x14c>)
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	4613      	mov	r3, r2
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	4413      	add	r3, r2
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	440b      	add	r3, r1
 8012f28:	3314      	adds	r3, #20
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d113      	bne.n	8012f58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012f30:	490f      	ldr	r1, [pc, #60]	; (8012f70 <etharp_tmr+0x14c>)
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	4613      	mov	r3, r2
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	4413      	add	r3, r2
 8012f3a:	00db      	lsls	r3, r3, #3
 8012f3c:	440b      	add	r3, r1
 8012f3e:	3308      	adds	r3, #8
 8012f40:	6818      	ldr	r0, [r3, #0]
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	4613      	mov	r3, r2
 8012f46:	005b      	lsls	r3, r3, #1
 8012f48:	4413      	add	r3, r2
 8012f4a:	00db      	lsls	r3, r3, #3
 8012f4c:	4a08      	ldr	r2, [pc, #32]	; (8012f70 <etharp_tmr+0x14c>)
 8012f4e:	4413      	add	r3, r2
 8012f50:	3304      	adds	r3, #4
 8012f52:	4619      	mov	r1, r3
 8012f54:	f000 fe6e 	bl	8013c34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	607b      	str	r3, [r7, #4]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2b09      	cmp	r3, #9
 8012f62:	f77f af65 	ble.w	8012e30 <etharp_tmr+0xc>
      }
    }
  }
}
 8012f66:	bf00      	nop
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	2000ef28 	.word	0x2000ef28

08012f74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b08a      	sub	sp, #40	; 0x28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012f82:	230a      	movs	r3, #10
 8012f84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012f86:	230a      	movs	r3, #10
 8012f88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012f8a:	230a      	movs	r3, #10
 8012f8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012f92:	230a      	movs	r3, #10
 8012f94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012f96:	2300      	movs	r3, #0
 8012f98:	83bb      	strh	r3, [r7, #28]
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	837b      	strh	r3, [r7, #26]
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	843b      	strh	r3, [r7, #32]
 8012fa6:	e0ae      	b.n	8013106 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012fa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fac:	49a6      	ldr	r1, [pc, #664]	; (8013248 <etharp_find_entry+0x2d4>)
 8012fae:	4613      	mov	r3, r2
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	4413      	add	r3, r2
 8012fb4:	00db      	lsls	r3, r3, #3
 8012fb6:	440b      	add	r3, r1
 8012fb8:	3314      	adds	r3, #20
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012fbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012fc2:	2b0a      	cmp	r3, #10
 8012fc4:	d105      	bne.n	8012fd2 <etharp_find_entry+0x5e>
 8012fc6:	7dfb      	ldrb	r3, [r7, #23]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d102      	bne.n	8012fd2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012fcc:	8c3b      	ldrh	r3, [r7, #32]
 8012fce:	847b      	strh	r3, [r7, #34]	; 0x22
 8012fd0:	e095      	b.n	80130fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012fd2:	7dfb      	ldrb	r3, [r7, #23]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f000 8092 	beq.w	80130fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012fda:	7dfb      	ldrb	r3, [r7, #23]
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d009      	beq.n	8012ff4 <etharp_find_entry+0x80>
 8012fe0:	7dfb      	ldrb	r3, [r7, #23]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d806      	bhi.n	8012ff4 <etharp_find_entry+0x80>
 8012fe6:	4b99      	ldr	r3, [pc, #612]	; (801324c <etharp_find_entry+0x2d8>)
 8012fe8:	f240 1223 	movw	r2, #291	; 0x123
 8012fec:	4998      	ldr	r1, [pc, #608]	; (8013250 <etharp_find_entry+0x2dc>)
 8012fee:	4899      	ldr	r0, [pc, #612]	; (8013254 <etharp_find_entry+0x2e0>)
 8012ff0:	f002 fdd4 	bl	8015b9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d020      	beq.n	801303c <etharp_find_entry+0xc8>
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	6819      	ldr	r1, [r3, #0]
 8012ffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013002:	4891      	ldr	r0, [pc, #580]	; (8013248 <etharp_find_entry+0x2d4>)
 8013004:	4613      	mov	r3, r2
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	4413      	add	r3, r2
 801300a:	00db      	lsls	r3, r3, #3
 801300c:	4403      	add	r3, r0
 801300e:	3304      	adds	r3, #4
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	4299      	cmp	r1, r3
 8013014:	d112      	bne.n	801303c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00c      	beq.n	8013036 <etharp_find_entry+0xc2>
 801301c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013020:	4989      	ldr	r1, [pc, #548]	; (8013248 <etharp_find_entry+0x2d4>)
 8013022:	4613      	mov	r3, r2
 8013024:	005b      	lsls	r3, r3, #1
 8013026:	4413      	add	r3, r2
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	440b      	add	r3, r1
 801302c:	3308      	adds	r3, #8
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	429a      	cmp	r2, r3
 8013034:	d102      	bne.n	801303c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013036:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801303a:	e100      	b.n	801323e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801303c:	7dfb      	ldrb	r3, [r7, #23]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d140      	bne.n	80130c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013046:	4980      	ldr	r1, [pc, #512]	; (8013248 <etharp_find_entry+0x2d4>)
 8013048:	4613      	mov	r3, r2
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	4413      	add	r3, r2
 801304e:	00db      	lsls	r3, r3, #3
 8013050:	440b      	add	r3, r1
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d01a      	beq.n	801308e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801305c:	497a      	ldr	r1, [pc, #488]	; (8013248 <etharp_find_entry+0x2d4>)
 801305e:	4613      	mov	r3, r2
 8013060:	005b      	lsls	r3, r3, #1
 8013062:	4413      	add	r3, r2
 8013064:	00db      	lsls	r3, r3, #3
 8013066:	440b      	add	r3, r1
 8013068:	3312      	adds	r3, #18
 801306a:	881b      	ldrh	r3, [r3, #0]
 801306c:	8bba      	ldrh	r2, [r7, #28]
 801306e:	429a      	cmp	r2, r3
 8013070:	d845      	bhi.n	80130fe <etharp_find_entry+0x18a>
            old_queue = i;
 8013072:	8c3b      	ldrh	r3, [r7, #32]
 8013074:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801307a:	4973      	ldr	r1, [pc, #460]	; (8013248 <etharp_find_entry+0x2d4>)
 801307c:	4613      	mov	r3, r2
 801307e:	005b      	lsls	r3, r3, #1
 8013080:	4413      	add	r3, r2
 8013082:	00db      	lsls	r3, r3, #3
 8013084:	440b      	add	r3, r1
 8013086:	3312      	adds	r3, #18
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	83bb      	strh	r3, [r7, #28]
 801308c:	e037      	b.n	80130fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801308e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013092:	496d      	ldr	r1, [pc, #436]	; (8013248 <etharp_find_entry+0x2d4>)
 8013094:	4613      	mov	r3, r2
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	4413      	add	r3, r2
 801309a:	00db      	lsls	r3, r3, #3
 801309c:	440b      	add	r3, r1
 801309e:	3312      	adds	r3, #18
 80130a0:	881b      	ldrh	r3, [r3, #0]
 80130a2:	8b7a      	ldrh	r2, [r7, #26]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d82a      	bhi.n	80130fe <etharp_find_entry+0x18a>
            old_pending = i;
 80130a8:	8c3b      	ldrh	r3, [r7, #32]
 80130aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80130ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130b0:	4965      	ldr	r1, [pc, #404]	; (8013248 <etharp_find_entry+0x2d4>)
 80130b2:	4613      	mov	r3, r2
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	4413      	add	r3, r2
 80130b8:	00db      	lsls	r3, r3, #3
 80130ba:	440b      	add	r3, r1
 80130bc:	3312      	adds	r3, #18
 80130be:	881b      	ldrh	r3, [r3, #0]
 80130c0:	837b      	strh	r3, [r7, #26]
 80130c2:	e01c      	b.n	80130fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80130c4:	7dfb      	ldrb	r3, [r7, #23]
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d919      	bls.n	80130fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80130ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130ce:	495e      	ldr	r1, [pc, #376]	; (8013248 <etharp_find_entry+0x2d4>)
 80130d0:	4613      	mov	r3, r2
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	4413      	add	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	440b      	add	r3, r1
 80130da:	3312      	adds	r3, #18
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	8b3a      	ldrh	r2, [r7, #24]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d80c      	bhi.n	80130fe <etharp_find_entry+0x18a>
            old_stable = i;
 80130e4:	8c3b      	ldrh	r3, [r7, #32]
 80130e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80130e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130ec:	4956      	ldr	r1, [pc, #344]	; (8013248 <etharp_find_entry+0x2d4>)
 80130ee:	4613      	mov	r3, r2
 80130f0:	005b      	lsls	r3, r3, #1
 80130f2:	4413      	add	r3, r2
 80130f4:	00db      	lsls	r3, r3, #3
 80130f6:	440b      	add	r3, r1
 80130f8:	3312      	adds	r3, #18
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130fe:	8c3b      	ldrh	r3, [r7, #32]
 8013100:	3301      	adds	r3, #1
 8013102:	b29b      	uxth	r3, r3
 8013104:	843b      	strh	r3, [r7, #32]
 8013106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801310a:	2b09      	cmp	r3, #9
 801310c:	f77f af4c 	ble.w	8012fa8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013110:	7afb      	ldrb	r3, [r7, #11]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d108      	bne.n	801312c <etharp_find_entry+0x1b8>
 801311a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801311e:	2b0a      	cmp	r3, #10
 8013120:	d107      	bne.n	8013132 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013122:	7afb      	ldrb	r3, [r7, #11]
 8013124:	f003 0301 	and.w	r3, r3, #1
 8013128:	2b00      	cmp	r3, #0
 801312a:	d102      	bne.n	8013132 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801312c:	f04f 33ff 	mov.w	r3, #4294967295
 8013130:	e085      	b.n	801323e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013132:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013136:	2b09      	cmp	r3, #9
 8013138:	dc02      	bgt.n	8013140 <etharp_find_entry+0x1cc>
    i = empty;
 801313a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801313c:	843b      	strh	r3, [r7, #32]
 801313e:	e039      	b.n	80131b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013140:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013144:	2b09      	cmp	r3, #9
 8013146:	dc14      	bgt.n	8013172 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801314a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801314c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013150:	493d      	ldr	r1, [pc, #244]	; (8013248 <etharp_find_entry+0x2d4>)
 8013152:	4613      	mov	r3, r2
 8013154:	005b      	lsls	r3, r3, #1
 8013156:	4413      	add	r3, r2
 8013158:	00db      	lsls	r3, r3, #3
 801315a:	440b      	add	r3, r1
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d018      	beq.n	8013194 <etharp_find_entry+0x220>
 8013162:	4b3a      	ldr	r3, [pc, #232]	; (801324c <etharp_find_entry+0x2d8>)
 8013164:	f240 126d 	movw	r2, #365	; 0x16d
 8013168:	493b      	ldr	r1, [pc, #236]	; (8013258 <etharp_find_entry+0x2e4>)
 801316a:	483a      	ldr	r0, [pc, #232]	; (8013254 <etharp_find_entry+0x2e0>)
 801316c:	f002 fd16 	bl	8015b9c <iprintf>
 8013170:	e010      	b.n	8013194 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013172:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013176:	2b09      	cmp	r3, #9
 8013178:	dc02      	bgt.n	8013180 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801317a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801317c:	843b      	strh	r3, [r7, #32]
 801317e:	e009      	b.n	8013194 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013180:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013184:	2b09      	cmp	r3, #9
 8013186:	dc02      	bgt.n	801318e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013188:	8bfb      	ldrh	r3, [r7, #30]
 801318a:	843b      	strh	r3, [r7, #32]
 801318c:	e002      	b.n	8013194 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801318e:	f04f 33ff 	mov.w	r3, #4294967295
 8013192:	e054      	b.n	801323e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013194:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013198:	2b09      	cmp	r3, #9
 801319a:	dd06      	ble.n	80131aa <etharp_find_entry+0x236>
 801319c:	4b2b      	ldr	r3, [pc, #172]	; (801324c <etharp_find_entry+0x2d8>)
 801319e:	f240 127f 	movw	r2, #383	; 0x17f
 80131a2:	492e      	ldr	r1, [pc, #184]	; (801325c <etharp_find_entry+0x2e8>)
 80131a4:	482b      	ldr	r0, [pc, #172]	; (8013254 <etharp_find_entry+0x2e0>)
 80131a6:	f002 fcf9 	bl	8015b9c <iprintf>
    etharp_free_entry(i);
 80131aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff fe06 	bl	8012dc0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80131b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80131b8:	2b09      	cmp	r3, #9
 80131ba:	dd06      	ble.n	80131ca <etharp_find_entry+0x256>
 80131bc:	4b23      	ldr	r3, [pc, #140]	; (801324c <etharp_find_entry+0x2d8>)
 80131be:	f240 1283 	movw	r2, #387	; 0x183
 80131c2:	4926      	ldr	r1, [pc, #152]	; (801325c <etharp_find_entry+0x2e8>)
 80131c4:	4823      	ldr	r0, [pc, #140]	; (8013254 <etharp_find_entry+0x2e0>)
 80131c6:	f002 fce9 	bl	8015b9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80131ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131ce:	491e      	ldr	r1, [pc, #120]	; (8013248 <etharp_find_entry+0x2d4>)
 80131d0:	4613      	mov	r3, r2
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	4413      	add	r3, r2
 80131d6:	00db      	lsls	r3, r3, #3
 80131d8:	440b      	add	r3, r1
 80131da:	3314      	adds	r3, #20
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d006      	beq.n	80131f0 <etharp_find_entry+0x27c>
 80131e2:	4b1a      	ldr	r3, [pc, #104]	; (801324c <etharp_find_entry+0x2d8>)
 80131e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80131e8:	491d      	ldr	r1, [pc, #116]	; (8013260 <etharp_find_entry+0x2ec>)
 80131ea:	481a      	ldr	r0, [pc, #104]	; (8013254 <etharp_find_entry+0x2e0>)
 80131ec:	f002 fcd6 	bl	8015b9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00b      	beq.n	801320e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80131f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6819      	ldr	r1, [r3, #0]
 80131fe:	4812      	ldr	r0, [pc, #72]	; (8013248 <etharp_find_entry+0x2d4>)
 8013200:	4613      	mov	r3, r2
 8013202:	005b      	lsls	r3, r3, #1
 8013204:	4413      	add	r3, r2
 8013206:	00db      	lsls	r3, r3, #3
 8013208:	4403      	add	r3, r0
 801320a:	3304      	adds	r3, #4
 801320c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801320e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013212:	490d      	ldr	r1, [pc, #52]	; (8013248 <etharp_find_entry+0x2d4>)
 8013214:	4613      	mov	r3, r2
 8013216:	005b      	lsls	r3, r3, #1
 8013218:	4413      	add	r3, r2
 801321a:	00db      	lsls	r3, r3, #3
 801321c:	440b      	add	r3, r1
 801321e:	3312      	adds	r3, #18
 8013220:	2200      	movs	r2, #0
 8013222:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013228:	4907      	ldr	r1, [pc, #28]	; (8013248 <etharp_find_entry+0x2d4>)
 801322a:	4613      	mov	r3, r2
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	3308      	adds	r3, #8
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801323a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3728      	adds	r7, #40	; 0x28
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	2000ef28 	.word	0x2000ef28
 801324c:	08019bf4 	.word	0x08019bf4
 8013250:	08019c2c 	.word	0x08019c2c
 8013254:	08019c6c 	.word	0x08019c6c
 8013258:	08019c94 	.word	0x08019c94
 801325c:	08019cac 	.word	0x08019cac
 8013260:	08019cc0 	.word	0x08019cc0

08013264 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b088      	sub	sp, #32
 8013268:	af02      	add	r7, sp, #8
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013278:	2b06      	cmp	r3, #6
 801327a:	d006      	beq.n	801328a <etharp_update_arp_entry+0x26>
 801327c:	4b48      	ldr	r3, [pc, #288]	; (80133a0 <etharp_update_arp_entry+0x13c>)
 801327e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013282:	4948      	ldr	r1, [pc, #288]	; (80133a4 <etharp_update_arp_entry+0x140>)
 8013284:	4848      	ldr	r0, [pc, #288]	; (80133a8 <etharp_update_arp_entry+0x144>)
 8013286:	f002 fc89 	bl	8015b9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d012      	beq.n	80132b6 <etharp_update_arp_entry+0x52>
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00e      	beq.n	80132b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	68f9      	ldr	r1, [r7, #12]
 801329e:	4618      	mov	r0, r3
 80132a0:	f001 f8fe 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 80132a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d105      	bne.n	80132b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80132b2:	2be0      	cmp	r3, #224	; 0xe0
 80132b4:	d102      	bne.n	80132bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80132b6:	f06f 030f 	mvn.w	r3, #15
 80132ba:	e06c      	b.n	8013396 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80132bc:	78fb      	ldrb	r3, [r7, #3]
 80132be:	68fa      	ldr	r2, [r7, #12]
 80132c0:	4619      	mov	r1, r3
 80132c2:	68b8      	ldr	r0, [r7, #8]
 80132c4:	f7ff fe56 	bl	8012f74 <etharp_find_entry>
 80132c8:	4603      	mov	r3, r0
 80132ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80132cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	da02      	bge.n	80132da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80132d4:	8afb      	ldrh	r3, [r7, #22]
 80132d6:	b25b      	sxtb	r3, r3
 80132d8:	e05d      	b.n	8013396 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80132da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132de:	4933      	ldr	r1, [pc, #204]	; (80133ac <etharp_update_arp_entry+0x148>)
 80132e0:	4613      	mov	r3, r2
 80132e2:	005b      	lsls	r3, r3, #1
 80132e4:	4413      	add	r3, r2
 80132e6:	00db      	lsls	r3, r3, #3
 80132e8:	440b      	add	r3, r1
 80132ea:	3314      	adds	r3, #20
 80132ec:	2202      	movs	r2, #2
 80132ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80132f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132f4:	492d      	ldr	r1, [pc, #180]	; (80133ac <etharp_update_arp_entry+0x148>)
 80132f6:	4613      	mov	r3, r2
 80132f8:	005b      	lsls	r3, r3, #1
 80132fa:	4413      	add	r3, r2
 80132fc:	00db      	lsls	r3, r3, #3
 80132fe:	440b      	add	r3, r1
 8013300:	3308      	adds	r3, #8
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801330a:	4613      	mov	r3, r2
 801330c:	005b      	lsls	r3, r3, #1
 801330e:	4413      	add	r3, r2
 8013310:	00db      	lsls	r3, r3, #3
 8013312:	3308      	adds	r3, #8
 8013314:	4a25      	ldr	r2, [pc, #148]	; (80133ac <etharp_update_arp_entry+0x148>)
 8013316:	4413      	add	r3, r2
 8013318:	3304      	adds	r3, #4
 801331a:	2206      	movs	r2, #6
 801331c:	6879      	ldr	r1, [r7, #4]
 801331e:	4618      	mov	r0, r3
 8013320:	f002 fb2c 	bl	801597c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013328:	4920      	ldr	r1, [pc, #128]	; (80133ac <etharp_update_arp_entry+0x148>)
 801332a:	4613      	mov	r3, r2
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	4413      	add	r3, r2
 8013330:	00db      	lsls	r3, r3, #3
 8013332:	440b      	add	r3, r1
 8013334:	3312      	adds	r3, #18
 8013336:	2200      	movs	r2, #0
 8013338:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801333a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801333e:	491b      	ldr	r1, [pc, #108]	; (80133ac <etharp_update_arp_entry+0x148>)
 8013340:	4613      	mov	r3, r2
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	4413      	add	r3, r2
 8013346:	00db      	lsls	r3, r3, #3
 8013348:	440b      	add	r3, r1
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d021      	beq.n	8013394 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013354:	4915      	ldr	r1, [pc, #84]	; (80133ac <etharp_update_arp_entry+0x148>)
 8013356:	4613      	mov	r3, r2
 8013358:	005b      	lsls	r3, r3, #1
 801335a:	4413      	add	r3, r2
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	440b      	add	r3, r1
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013368:	4910      	ldr	r1, [pc, #64]	; (80133ac <etharp_update_arp_entry+0x148>)
 801336a:	4613      	mov	r3, r2
 801336c:	005b      	lsls	r3, r3, #1
 801336e:	4413      	add	r3, r2
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	440b      	add	r3, r1
 8013374:	2200      	movs	r2, #0
 8013376:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801337e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013382:	9300      	str	r3, [sp, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6939      	ldr	r1, [r7, #16]
 8013388:	68f8      	ldr	r0, [r7, #12]
 801338a:	f001 ff97 	bl	80152bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801338e:	6938      	ldr	r0, [r7, #16]
 8013390:	f7f8 fd7c 	bl	800be8c <pbuf_free>
  }
  return ERR_OK;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3718      	adds	r7, #24
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	08019bf4 	.word	0x08019bf4
 80133a4:	08019cec 	.word	0x08019cec
 80133a8:	08019c6c 	.word	0x08019c6c
 80133ac:	2000ef28 	.word	0x2000ef28

080133b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80133b8:	2300      	movs	r3, #0
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	e01e      	b.n	80133fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80133be:	4913      	ldr	r1, [pc, #76]	; (801340c <etharp_cleanup_netif+0x5c>)
 80133c0:	68fa      	ldr	r2, [r7, #12]
 80133c2:	4613      	mov	r3, r2
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	4413      	add	r3, r2
 80133c8:	00db      	lsls	r3, r3, #3
 80133ca:	440b      	add	r3, r1
 80133cc:	3314      	adds	r3, #20
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80133d2:	7afb      	ldrb	r3, [r7, #11]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d00e      	beq.n	80133f6 <etharp_cleanup_netif+0x46>
 80133d8:	490c      	ldr	r1, [pc, #48]	; (801340c <etharp_cleanup_netif+0x5c>)
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	4613      	mov	r3, r2
 80133de:	005b      	lsls	r3, r3, #1
 80133e0:	4413      	add	r3, r2
 80133e2:	00db      	lsls	r3, r3, #3
 80133e4:	440b      	add	r3, r1
 80133e6:	3308      	adds	r3, #8
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d102      	bne.n	80133f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f7ff fce5 	bl	8012dc0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	3301      	adds	r3, #1
 80133fa:	60fb      	str	r3, [r7, #12]
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b09      	cmp	r3, #9
 8013400:	dddd      	ble.n	80133be <etharp_cleanup_netif+0xe>
    }
  }
}
 8013402:	bf00      	nop
 8013404:	bf00      	nop
 8013406:	3710      	adds	r7, #16
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	2000ef28 	.word	0x2000ef28

08013410 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013410:	b5b0      	push	{r4, r5, r7, lr}
 8013412:	b08a      	sub	sp, #40	; 0x28
 8013414:	af04      	add	r7, sp, #16
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d107      	bne.n	8013430 <etharp_input+0x20>
 8013420:	4b3d      	ldr	r3, [pc, #244]	; (8013518 <etharp_input+0x108>)
 8013422:	f240 228a 	movw	r2, #650	; 0x28a
 8013426:	493d      	ldr	r1, [pc, #244]	; (801351c <etharp_input+0x10c>)
 8013428:	483d      	ldr	r0, [pc, #244]	; (8013520 <etharp_input+0x110>)
 801342a:	f002 fbb7 	bl	8015b9c <iprintf>
 801342e:	e06f      	b.n	8013510 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	881b      	ldrh	r3, [r3, #0]
 801343a:	b29b      	uxth	r3, r3
 801343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013440:	d10c      	bne.n	801345c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013446:	2b06      	cmp	r3, #6
 8013448:	d108      	bne.n	801345c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801344e:	2b04      	cmp	r3, #4
 8013450:	d104      	bne.n	801345c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	885b      	ldrh	r3, [r3, #2]
 8013456:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013458:	2b08      	cmp	r3, #8
 801345a:	d003      	beq.n	8013464 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7f8 fd15 	bl	800be8c <pbuf_free>
    return;
 8013462:	e055      	b.n	8013510 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	330e      	adds	r3, #14
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	3318      	adds	r3, #24
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	3304      	adds	r3, #4
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <etharp_input+0x74>
    for_us = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	75fb      	strb	r3, [r7, #23]
 8013482:	e009      	b.n	8013498 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	3304      	adds	r3, #4
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	429a      	cmp	r2, r3
 801348e:	bf0c      	ite	eq
 8013490:	2301      	moveq	r3, #1
 8013492:	2300      	movne	r3, #0
 8013494:	b2db      	uxtb	r3, r3
 8013496:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	f103 0208 	add.w	r2, r3, #8
 801349e:	7dfb      	ldrb	r3, [r7, #23]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d001      	beq.n	80134a8 <etharp_input+0x98>
 80134a4:	2301      	movs	r3, #1
 80134a6:	e000      	b.n	80134aa <etharp_input+0x9a>
 80134a8:	2302      	movs	r3, #2
 80134aa:	f107 010c 	add.w	r1, r7, #12
 80134ae:	6838      	ldr	r0, [r7, #0]
 80134b0:	f7ff fed8 	bl	8013264 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	88db      	ldrh	r3, [r3, #6]
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134be:	d003      	beq.n	80134c8 <etharp_input+0xb8>
 80134c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134c4:	d01e      	beq.n	8013504 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80134c6:	e020      	b.n	801350a <etharp_input+0xfa>
      if (for_us) {
 80134c8:	7dfb      	ldrb	r3, [r7, #23]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d01c      	beq.n	8013508 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80134e4:	693a      	ldr	r2, [r7, #16]
 80134e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80134e8:	2102      	movs	r1, #2
 80134ea:	9103      	str	r1, [sp, #12]
 80134ec:	f107 010c 	add.w	r1, r7, #12
 80134f0:	9102      	str	r1, [sp, #8]
 80134f2:	9201      	str	r2, [sp, #4]
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	462b      	mov	r3, r5
 80134f8:	4622      	mov	r2, r4
 80134fa:	4601      	mov	r1, r0
 80134fc:	6838      	ldr	r0, [r7, #0]
 80134fe:	f000 faeb 	bl	8013ad8 <etharp_raw>
      break;
 8013502:	e001      	b.n	8013508 <etharp_input+0xf8>
      break;
 8013504:	bf00      	nop
 8013506:	e000      	b.n	801350a <etharp_input+0xfa>
      break;
 8013508:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7f8 fcbe 	bl	800be8c <pbuf_free>
}
 8013510:	3718      	adds	r7, #24
 8013512:	46bd      	mov	sp, r7
 8013514:	bdb0      	pop	{r4, r5, r7, pc}
 8013516:	bf00      	nop
 8013518:	08019bf4 	.word	0x08019bf4
 801351c:	08019d44 	.word	0x08019d44
 8013520:	08019c6c 	.word	0x08019c6c

08013524 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b086      	sub	sp, #24
 8013528:	af02      	add	r7, sp, #8
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	4613      	mov	r3, r2
 8013530:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013532:	79fa      	ldrb	r2, [r7, #7]
 8013534:	4944      	ldr	r1, [pc, #272]	; (8013648 <etharp_output_to_arp_index+0x124>)
 8013536:	4613      	mov	r3, r2
 8013538:	005b      	lsls	r3, r3, #1
 801353a:	4413      	add	r3, r2
 801353c:	00db      	lsls	r3, r3, #3
 801353e:	440b      	add	r3, r1
 8013540:	3314      	adds	r3, #20
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d806      	bhi.n	8013556 <etharp_output_to_arp_index+0x32>
 8013548:	4b40      	ldr	r3, [pc, #256]	; (801364c <etharp_output_to_arp_index+0x128>)
 801354a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801354e:	4940      	ldr	r1, [pc, #256]	; (8013650 <etharp_output_to_arp_index+0x12c>)
 8013550:	4840      	ldr	r0, [pc, #256]	; (8013654 <etharp_output_to_arp_index+0x130>)
 8013552:	f002 fb23 	bl	8015b9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013556:	79fa      	ldrb	r2, [r7, #7]
 8013558:	493b      	ldr	r1, [pc, #236]	; (8013648 <etharp_output_to_arp_index+0x124>)
 801355a:	4613      	mov	r3, r2
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	4413      	add	r3, r2
 8013560:	00db      	lsls	r3, r3, #3
 8013562:	440b      	add	r3, r1
 8013564:	3314      	adds	r3, #20
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	2b02      	cmp	r3, #2
 801356a:	d153      	bne.n	8013614 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801356c:	79fa      	ldrb	r2, [r7, #7]
 801356e:	4936      	ldr	r1, [pc, #216]	; (8013648 <etharp_output_to_arp_index+0x124>)
 8013570:	4613      	mov	r3, r2
 8013572:	005b      	lsls	r3, r3, #1
 8013574:	4413      	add	r3, r2
 8013576:	00db      	lsls	r3, r3, #3
 8013578:	440b      	add	r3, r1
 801357a:	3312      	adds	r3, #18
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013582:	d919      	bls.n	80135b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013584:	79fa      	ldrb	r2, [r7, #7]
 8013586:	4613      	mov	r3, r2
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	4a2e      	ldr	r2, [pc, #184]	; (8013648 <etharp_output_to_arp_index+0x124>)
 8013590:	4413      	add	r3, r2
 8013592:	3304      	adds	r3, #4
 8013594:	4619      	mov	r1, r3
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	f000 fb4c 	bl	8013c34 <etharp_request>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d138      	bne.n	8013614 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80135a2:	79fa      	ldrb	r2, [r7, #7]
 80135a4:	4928      	ldr	r1, [pc, #160]	; (8013648 <etharp_output_to_arp_index+0x124>)
 80135a6:	4613      	mov	r3, r2
 80135a8:	005b      	lsls	r3, r3, #1
 80135aa:	4413      	add	r3, r2
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	440b      	add	r3, r1
 80135b0:	3314      	adds	r3, #20
 80135b2:	2203      	movs	r2, #3
 80135b4:	701a      	strb	r2, [r3, #0]
 80135b6:	e02d      	b.n	8013614 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80135b8:	79fa      	ldrb	r2, [r7, #7]
 80135ba:	4923      	ldr	r1, [pc, #140]	; (8013648 <etharp_output_to_arp_index+0x124>)
 80135bc:	4613      	mov	r3, r2
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	4413      	add	r3, r2
 80135c2:	00db      	lsls	r3, r3, #3
 80135c4:	440b      	add	r3, r1
 80135c6:	3312      	adds	r3, #18
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80135ce:	d321      	bcc.n	8013614 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80135d0:	79fa      	ldrb	r2, [r7, #7]
 80135d2:	4613      	mov	r3, r2
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4413      	add	r3, r2
 80135d8:	00db      	lsls	r3, r3, #3
 80135da:	4a1b      	ldr	r2, [pc, #108]	; (8013648 <etharp_output_to_arp_index+0x124>)
 80135dc:	4413      	add	r3, r2
 80135de:	1d19      	adds	r1, r3, #4
 80135e0:	79fa      	ldrb	r2, [r7, #7]
 80135e2:	4613      	mov	r3, r2
 80135e4:	005b      	lsls	r3, r3, #1
 80135e6:	4413      	add	r3, r2
 80135e8:	00db      	lsls	r3, r3, #3
 80135ea:	3308      	adds	r3, #8
 80135ec:	4a16      	ldr	r2, [pc, #88]	; (8013648 <etharp_output_to_arp_index+0x124>)
 80135ee:	4413      	add	r3, r2
 80135f0:	3304      	adds	r3, #4
 80135f2:	461a      	mov	r2, r3
 80135f4:	68f8      	ldr	r0, [r7, #12]
 80135f6:	f000 fafb 	bl	8013bf0 <etharp_request_dst>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d109      	bne.n	8013614 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013600:	79fa      	ldrb	r2, [r7, #7]
 8013602:	4911      	ldr	r1, [pc, #68]	; (8013648 <etharp_output_to_arp_index+0x124>)
 8013604:	4613      	mov	r3, r2
 8013606:	005b      	lsls	r3, r3, #1
 8013608:	4413      	add	r3, r2
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	440b      	add	r3, r1
 801360e:	3314      	adds	r3, #20
 8013610:	2203      	movs	r2, #3
 8013612:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801361a:	79fa      	ldrb	r2, [r7, #7]
 801361c:	4613      	mov	r3, r2
 801361e:	005b      	lsls	r3, r3, #1
 8013620:	4413      	add	r3, r2
 8013622:	00db      	lsls	r3, r3, #3
 8013624:	3308      	adds	r3, #8
 8013626:	4a08      	ldr	r2, [pc, #32]	; (8013648 <etharp_output_to_arp_index+0x124>)
 8013628:	4413      	add	r3, r2
 801362a:	3304      	adds	r3, #4
 801362c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013630:	9200      	str	r2, [sp, #0]
 8013632:	460a      	mov	r2, r1
 8013634:	68b9      	ldr	r1, [r7, #8]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f001 fe40 	bl	80152bc <ethernet_output>
 801363c:	4603      	mov	r3, r0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	2000ef28 	.word	0x2000ef28
 801364c:	08019bf4 	.word	0x08019bf4
 8013650:	08019d64 	.word	0x08019d64
 8013654:	08019c6c 	.word	0x08019c6c

08013658 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b08a      	sub	sp, #40	; 0x28
 801365c:	af02      	add	r7, sp, #8
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d106      	bne.n	801367c <etharp_output+0x24>
 801366e:	4b73      	ldr	r3, [pc, #460]	; (801383c <etharp_output+0x1e4>)
 8013670:	f240 321e 	movw	r2, #798	; 0x31e
 8013674:	4972      	ldr	r1, [pc, #456]	; (8013840 <etharp_output+0x1e8>)
 8013676:	4873      	ldr	r0, [pc, #460]	; (8013844 <etharp_output+0x1ec>)
 8013678:	f002 fa90 	bl	8015b9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d106      	bne.n	8013690 <etharp_output+0x38>
 8013682:	4b6e      	ldr	r3, [pc, #440]	; (801383c <etharp_output+0x1e4>)
 8013684:	f240 321f 	movw	r2, #799	; 0x31f
 8013688:	496f      	ldr	r1, [pc, #444]	; (8013848 <etharp_output+0x1f0>)
 801368a:	486e      	ldr	r0, [pc, #440]	; (8013844 <etharp_output+0x1ec>)
 801368c:	f002 fa86 	bl	8015b9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d106      	bne.n	80136a4 <etharp_output+0x4c>
 8013696:	4b69      	ldr	r3, [pc, #420]	; (801383c <etharp_output+0x1e4>)
 8013698:	f44f 7248 	mov.w	r2, #800	; 0x320
 801369c:	496b      	ldr	r1, [pc, #428]	; (801384c <etharp_output+0x1f4>)
 801369e:	4869      	ldr	r0, [pc, #420]	; (8013844 <etharp_output+0x1ec>)
 80136a0:	f002 fa7c 	bl	8015b9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	68f9      	ldr	r1, [r7, #12]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 fef8 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d002      	beq.n	80136bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80136b6:	4b66      	ldr	r3, [pc, #408]	; (8013850 <etharp_output+0x1f8>)
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	e0af      	b.n	801381c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136c4:	2be0      	cmp	r3, #224	; 0xe0
 80136c6:	d118      	bne.n	80136fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80136c8:	2301      	movs	r3, #1
 80136ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80136cc:	2300      	movs	r3, #0
 80136ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80136d0:	235e      	movs	r3, #94	; 0x5e
 80136d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	3301      	adds	r3, #1
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	3302      	adds	r3, #2
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	3303      	adds	r3, #3
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80136f2:	f107 0310 	add.w	r3, r7, #16
 80136f6:	61fb      	str	r3, [r7, #28]
 80136f8:	e090      	b.n	801381c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	3304      	adds	r3, #4
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	405a      	eors	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	3308      	adds	r3, #8
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	4013      	ands	r3, r2
 801370e:	2b00      	cmp	r3, #0
 8013710:	d012      	beq.n	8013738 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013718:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801371c:	4293      	cmp	r3, r2
 801371e:	d00b      	beq.n	8013738 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	330c      	adds	r3, #12
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	330c      	adds	r3, #12
 801372e:	61bb      	str	r3, [r7, #24]
 8013730:	e002      	b.n	8013738 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013732:	f06f 0303 	mvn.w	r3, #3
 8013736:	e07d      	b.n	8013834 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013738:	4b46      	ldr	r3, [pc, #280]	; (8013854 <etharp_output+0x1fc>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	4619      	mov	r1, r3
 801373e:	4a46      	ldr	r2, [pc, #280]	; (8013858 <etharp_output+0x200>)
 8013740:	460b      	mov	r3, r1
 8013742:	005b      	lsls	r3, r3, #1
 8013744:	440b      	add	r3, r1
 8013746:	00db      	lsls	r3, r3, #3
 8013748:	4413      	add	r3, r2
 801374a:	3314      	adds	r3, #20
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	2b01      	cmp	r3, #1
 8013750:	d925      	bls.n	801379e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013752:	4b40      	ldr	r3, [pc, #256]	; (8013854 <etharp_output+0x1fc>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	4619      	mov	r1, r3
 8013758:	4a3f      	ldr	r2, [pc, #252]	; (8013858 <etharp_output+0x200>)
 801375a:	460b      	mov	r3, r1
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	440b      	add	r3, r1
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	4413      	add	r3, r2
 8013764:	3308      	adds	r3, #8
 8013766:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	429a      	cmp	r2, r3
 801376c:	d117      	bne.n	801379e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	4b38      	ldr	r3, [pc, #224]	; (8013854 <etharp_output+0x1fc>)
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	4618      	mov	r0, r3
 8013778:	4937      	ldr	r1, [pc, #220]	; (8013858 <etharp_output+0x200>)
 801377a:	4603      	mov	r3, r0
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	4403      	add	r3, r0
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	440b      	add	r3, r1
 8013784:	3304      	adds	r3, #4
 8013786:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013788:	429a      	cmp	r2, r3
 801378a:	d108      	bne.n	801379e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801378c:	4b31      	ldr	r3, [pc, #196]	; (8013854 <etharp_output+0x1fc>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	461a      	mov	r2, r3
 8013792:	68b9      	ldr	r1, [r7, #8]
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f7ff fec5 	bl	8013524 <etharp_output_to_arp_index>
 801379a:	4603      	mov	r3, r0
 801379c:	e04a      	b.n	8013834 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801379e:	2300      	movs	r3, #0
 80137a0:	75fb      	strb	r3, [r7, #23]
 80137a2:	e031      	b.n	8013808 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80137a4:	7dfa      	ldrb	r2, [r7, #23]
 80137a6:	492c      	ldr	r1, [pc, #176]	; (8013858 <etharp_output+0x200>)
 80137a8:	4613      	mov	r3, r2
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	4413      	add	r3, r2
 80137ae:	00db      	lsls	r3, r3, #3
 80137b0:	440b      	add	r3, r1
 80137b2:	3314      	adds	r3, #20
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d923      	bls.n	8013802 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80137ba:	7dfa      	ldrb	r2, [r7, #23]
 80137bc:	4926      	ldr	r1, [pc, #152]	; (8013858 <etharp_output+0x200>)
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	440b      	add	r3, r1
 80137c8:	3308      	adds	r3, #8
 80137ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d117      	bne.n	8013802 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	6819      	ldr	r1, [r3, #0]
 80137d6:	7dfa      	ldrb	r2, [r7, #23]
 80137d8:	481f      	ldr	r0, [pc, #124]	; (8013858 <etharp_output+0x200>)
 80137da:	4613      	mov	r3, r2
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	4413      	add	r3, r2
 80137e0:	00db      	lsls	r3, r3, #3
 80137e2:	4403      	add	r3, r0
 80137e4:	3304      	adds	r3, #4
 80137e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80137e8:	4299      	cmp	r1, r3
 80137ea:	d10a      	bne.n	8013802 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80137ec:	4a19      	ldr	r2, [pc, #100]	; (8013854 <etharp_output+0x1fc>)
 80137ee:	7dfb      	ldrb	r3, [r7, #23]
 80137f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80137f2:	7dfb      	ldrb	r3, [r7, #23]
 80137f4:	461a      	mov	r2, r3
 80137f6:	68b9      	ldr	r1, [r7, #8]
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f7ff fe93 	bl	8013524 <etharp_output_to_arp_index>
 80137fe:	4603      	mov	r3, r0
 8013800:	e018      	b.n	8013834 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013802:	7dfb      	ldrb	r3, [r7, #23]
 8013804:	3301      	adds	r3, #1
 8013806:	75fb      	strb	r3, [r7, #23]
 8013808:	7dfb      	ldrb	r3, [r7, #23]
 801380a:	2b09      	cmp	r3, #9
 801380c:	d9ca      	bls.n	80137a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	69b9      	ldr	r1, [r7, #24]
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f000 f822 	bl	801385c <etharp_query>
 8013818:	4603      	mov	r3, r0
 801381a:	e00b      	b.n	8013834 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	68b9      	ldr	r1, [r7, #8]
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f001 fd45 	bl	80152bc <ethernet_output>
 8013832:	4603      	mov	r3, r0
}
 8013834:	4618      	mov	r0, r3
 8013836:	3720      	adds	r7, #32
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	08019bf4 	.word	0x08019bf4
 8013840:	08019d44 	.word	0x08019d44
 8013844:	08019c6c 	.word	0x08019c6c
 8013848:	08019d94 	.word	0x08019d94
 801384c:	08019d34 	.word	0x08019d34
 8013850:	0801a3f4 	.word	0x0801a3f4
 8013854:	2000f018 	.word	0x2000f018
 8013858:	2000ef28 	.word	0x2000ef28

0801385c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b08c      	sub	sp, #48	; 0x30
 8013860:	af02      	add	r7, sp, #8
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	60b9      	str	r1, [r7, #8]
 8013866:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	3326      	adds	r3, #38	; 0x26
 801386c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801386e:	23ff      	movs	r3, #255	; 0xff
 8013870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68f9      	ldr	r1, [r7, #12]
 801387e:	4618      	mov	r0, r3
 8013880:	f000 fe0e 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 8013884:	4603      	mov	r3, r0
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10c      	bne.n	80138a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013892:	2be0      	cmp	r3, #224	; 0xe0
 8013894:	d006      	beq.n	80138a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d003      	beq.n	80138a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d102      	bne.n	80138aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80138a4:	f06f 030f 	mvn.w	r3, #15
 80138a8:	e101      	b.n	8013aae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	2101      	movs	r1, #1
 80138ae:	68b8      	ldr	r0, [r7, #8]
 80138b0:	f7ff fb60 	bl	8012f74 <etharp_find_entry>
 80138b4:	4603      	mov	r3, r0
 80138b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80138b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	da02      	bge.n	80138c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80138c0:	8a7b      	ldrh	r3, [r7, #18]
 80138c2:	b25b      	sxtb	r3, r3
 80138c4:	e0f3      	b.n	8013aae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80138c6:	8a7b      	ldrh	r3, [r7, #18]
 80138c8:	2b7e      	cmp	r3, #126	; 0x7e
 80138ca:	d906      	bls.n	80138da <etharp_query+0x7e>
 80138cc:	4b7a      	ldr	r3, [pc, #488]	; (8013ab8 <etharp_query+0x25c>)
 80138ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80138d2:	497a      	ldr	r1, [pc, #488]	; (8013abc <etharp_query+0x260>)
 80138d4:	487a      	ldr	r0, [pc, #488]	; (8013ac0 <etharp_query+0x264>)
 80138d6:	f002 f961 	bl	8015b9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80138da:	8a7b      	ldrh	r3, [r7, #18]
 80138dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80138de:	7c7a      	ldrb	r2, [r7, #17]
 80138e0:	4978      	ldr	r1, [pc, #480]	; (8013ac4 <etharp_query+0x268>)
 80138e2:	4613      	mov	r3, r2
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	4413      	add	r3, r2
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	440b      	add	r3, r1
 80138ec:	3314      	adds	r3, #20
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d115      	bne.n	8013920 <etharp_query+0xc4>
    is_new_entry = 1;
 80138f4:	2301      	movs	r3, #1
 80138f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80138f8:	7c7a      	ldrb	r2, [r7, #17]
 80138fa:	4972      	ldr	r1, [pc, #456]	; (8013ac4 <etharp_query+0x268>)
 80138fc:	4613      	mov	r3, r2
 80138fe:	005b      	lsls	r3, r3, #1
 8013900:	4413      	add	r3, r2
 8013902:	00db      	lsls	r3, r3, #3
 8013904:	440b      	add	r3, r1
 8013906:	3314      	adds	r3, #20
 8013908:	2201      	movs	r2, #1
 801390a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801390c:	7c7a      	ldrb	r2, [r7, #17]
 801390e:	496d      	ldr	r1, [pc, #436]	; (8013ac4 <etharp_query+0x268>)
 8013910:	4613      	mov	r3, r2
 8013912:	005b      	lsls	r3, r3, #1
 8013914:	4413      	add	r3, r2
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	440b      	add	r3, r1
 801391a:	3308      	adds	r3, #8
 801391c:	68fa      	ldr	r2, [r7, #12]
 801391e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013920:	7c7a      	ldrb	r2, [r7, #17]
 8013922:	4968      	ldr	r1, [pc, #416]	; (8013ac4 <etharp_query+0x268>)
 8013924:	4613      	mov	r3, r2
 8013926:	005b      	lsls	r3, r3, #1
 8013928:	4413      	add	r3, r2
 801392a:	00db      	lsls	r3, r3, #3
 801392c:	440b      	add	r3, r1
 801392e:	3314      	adds	r3, #20
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	2b01      	cmp	r3, #1
 8013934:	d011      	beq.n	801395a <etharp_query+0xfe>
 8013936:	7c7a      	ldrb	r2, [r7, #17]
 8013938:	4962      	ldr	r1, [pc, #392]	; (8013ac4 <etharp_query+0x268>)
 801393a:	4613      	mov	r3, r2
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	4413      	add	r3, r2
 8013940:	00db      	lsls	r3, r3, #3
 8013942:	440b      	add	r3, r1
 8013944:	3314      	adds	r3, #20
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2b01      	cmp	r3, #1
 801394a:	d806      	bhi.n	801395a <etharp_query+0xfe>
 801394c:	4b5a      	ldr	r3, [pc, #360]	; (8013ab8 <etharp_query+0x25c>)
 801394e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013952:	495d      	ldr	r1, [pc, #372]	; (8013ac8 <etharp_query+0x26c>)
 8013954:	485a      	ldr	r0, [pc, #360]	; (8013ac0 <etharp_query+0x264>)
 8013956:	f002 f921 	bl	8015b9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801395a:	6a3b      	ldr	r3, [r7, #32]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d102      	bne.n	8013966 <etharp_query+0x10a>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d10c      	bne.n	8013980 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013966:	68b9      	ldr	r1, [r7, #8]
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 f963 	bl	8013c34 <etharp_request>
 801396e:	4603      	mov	r3, r0
 8013970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d102      	bne.n	8013980 <etharp_query+0x124>
      return result;
 801397a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801397e:	e096      	b.n	8013aae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d106      	bne.n	8013994 <etharp_query+0x138>
 8013986:	4b4c      	ldr	r3, [pc, #304]	; (8013ab8 <etharp_query+0x25c>)
 8013988:	f240 32e1 	movw	r2, #993	; 0x3e1
 801398c:	494f      	ldr	r1, [pc, #316]	; (8013acc <etharp_query+0x270>)
 801398e:	484c      	ldr	r0, [pc, #304]	; (8013ac0 <etharp_query+0x264>)
 8013990:	f002 f904 	bl	8015b9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013994:	7c7a      	ldrb	r2, [r7, #17]
 8013996:	494b      	ldr	r1, [pc, #300]	; (8013ac4 <etharp_query+0x268>)
 8013998:	4613      	mov	r3, r2
 801399a:	005b      	lsls	r3, r3, #1
 801399c:	4413      	add	r3, r2
 801399e:	00db      	lsls	r3, r3, #3
 80139a0:	440b      	add	r3, r1
 80139a2:	3314      	adds	r3, #20
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d917      	bls.n	80139da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80139aa:	4a49      	ldr	r2, [pc, #292]	; (8013ad0 <etharp_query+0x274>)
 80139ac:	7c7b      	ldrb	r3, [r7, #17]
 80139ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80139b0:	7c7a      	ldrb	r2, [r7, #17]
 80139b2:	4613      	mov	r3, r2
 80139b4:	005b      	lsls	r3, r3, #1
 80139b6:	4413      	add	r3, r2
 80139b8:	00db      	lsls	r3, r3, #3
 80139ba:	3308      	adds	r3, #8
 80139bc:	4a41      	ldr	r2, [pc, #260]	; (8013ac4 <etharp_query+0x268>)
 80139be:	4413      	add	r3, r2
 80139c0:	3304      	adds	r3, #4
 80139c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80139c6:	9200      	str	r2, [sp, #0]
 80139c8:	697a      	ldr	r2, [r7, #20]
 80139ca:	6879      	ldr	r1, [r7, #4]
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f001 fc75 	bl	80152bc <ethernet_output>
 80139d2:	4603      	mov	r3, r0
 80139d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80139d8:	e067      	b.n	8013aaa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80139da:	7c7a      	ldrb	r2, [r7, #17]
 80139dc:	4939      	ldr	r1, [pc, #228]	; (8013ac4 <etharp_query+0x268>)
 80139de:	4613      	mov	r3, r2
 80139e0:	005b      	lsls	r3, r3, #1
 80139e2:	4413      	add	r3, r2
 80139e4:	00db      	lsls	r3, r3, #3
 80139e6:	440b      	add	r3, r1
 80139e8:	3314      	adds	r3, #20
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	2b01      	cmp	r3, #1
 80139ee:	d15c      	bne.n	8013aaa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80139f0:	2300      	movs	r3, #0
 80139f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80139f8:	e01c      	b.n	8013a34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	895a      	ldrh	r2, [r3, #10]
 80139fe:	69fb      	ldr	r3, [r7, #28]
 8013a00:	891b      	ldrh	r3, [r3, #8]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d10a      	bne.n	8013a1c <etharp_query+0x1c0>
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d006      	beq.n	8013a1c <etharp_query+0x1c0>
 8013a0e:	4b2a      	ldr	r3, [pc, #168]	; (8013ab8 <etharp_query+0x25c>)
 8013a10:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013a14:	492f      	ldr	r1, [pc, #188]	; (8013ad4 <etharp_query+0x278>)
 8013a16:	482a      	ldr	r0, [pc, #168]	; (8013ac0 <etharp_query+0x264>)
 8013a18:	f002 f8c0 	bl	8015b9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	7b1b      	ldrb	r3, [r3, #12]
 8013a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d002      	beq.n	8013a2e <etharp_query+0x1d2>
        copy_needed = 1;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	61bb      	str	r3, [r7, #24]
        break;
 8013a2c:	e005      	b.n	8013a3a <etharp_query+0x1de>
      }
      p = p->next;
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d1df      	bne.n	80139fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d007      	beq.n	8013a50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013a46:	200e      	movs	r0, #14
 8013a48:	f7f8 fc88 	bl	800c35c <pbuf_clone>
 8013a4c:	61f8      	str	r0, [r7, #28]
 8013a4e:	e004      	b.n	8013a5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013a54:	69f8      	ldr	r0, [r7, #28]
 8013a56:	f7f8 fabf 	bl	800bfd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d021      	beq.n	8013aa4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013a60:	7c7a      	ldrb	r2, [r7, #17]
 8013a62:	4918      	ldr	r1, [pc, #96]	; (8013ac4 <etharp_query+0x268>)
 8013a64:	4613      	mov	r3, r2
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	4413      	add	r3, r2
 8013a6a:	00db      	lsls	r3, r3, #3
 8013a6c:	440b      	add	r3, r1
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00a      	beq.n	8013a8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013a74:	7c7a      	ldrb	r2, [r7, #17]
 8013a76:	4913      	ldr	r1, [pc, #76]	; (8013ac4 <etharp_query+0x268>)
 8013a78:	4613      	mov	r3, r2
 8013a7a:	005b      	lsls	r3, r3, #1
 8013a7c:	4413      	add	r3, r2
 8013a7e:	00db      	lsls	r3, r3, #3
 8013a80:	440b      	add	r3, r1
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7f8 fa01 	bl	800be8c <pbuf_free>
      }
      arp_table[i].q = p;
 8013a8a:	7c7a      	ldrb	r2, [r7, #17]
 8013a8c:	490d      	ldr	r1, [pc, #52]	; (8013ac4 <etharp_query+0x268>)
 8013a8e:	4613      	mov	r3, r2
 8013a90:	005b      	lsls	r3, r3, #1
 8013a92:	4413      	add	r3, r2
 8013a94:	00db      	lsls	r3, r3, #3
 8013a96:	440b      	add	r3, r1
 8013a98:	69fa      	ldr	r2, [r7, #28]
 8013a9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013aa2:	e002      	b.n	8013aaa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013aa4:	23ff      	movs	r3, #255	; 0xff
 8013aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013aaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3728      	adds	r7, #40	; 0x28
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	08019bf4 	.word	0x08019bf4
 8013abc:	08019da0 	.word	0x08019da0
 8013ac0:	08019c6c 	.word	0x08019c6c
 8013ac4:	2000ef28 	.word	0x2000ef28
 8013ac8:	08019db0 	.word	0x08019db0
 8013acc:	08019d94 	.word	0x08019d94
 8013ad0:	2000f018 	.word	0x2000f018
 8013ad4:	08019dd8 	.word	0x08019dd8

08013ad8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08a      	sub	sp, #40	; 0x28
 8013adc:	af02      	add	r7, sp, #8
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d106      	bne.n	8013afe <etharp_raw+0x26>
 8013af0:	4b3a      	ldr	r3, [pc, #232]	; (8013bdc <etharp_raw+0x104>)
 8013af2:	f240 4257 	movw	r2, #1111	; 0x457
 8013af6:	493a      	ldr	r1, [pc, #232]	; (8013be0 <etharp_raw+0x108>)
 8013af8:	483a      	ldr	r0, [pc, #232]	; (8013be4 <etharp_raw+0x10c>)
 8013afa:	f002 f84f 	bl	8015b9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013afe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b02:	211c      	movs	r1, #28
 8013b04:	200e      	movs	r0, #14
 8013b06:	f7f7 fedd 	bl	800b8c4 <pbuf_alloc>
 8013b0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d102      	bne.n	8013b18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013b12:	f04f 33ff 	mov.w	r3, #4294967295
 8013b16:	e05d      	b.n	8013bd4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	895b      	ldrh	r3, [r3, #10]
 8013b1c:	2b1b      	cmp	r3, #27
 8013b1e:	d806      	bhi.n	8013b2e <etharp_raw+0x56>
 8013b20:	4b2e      	ldr	r3, [pc, #184]	; (8013bdc <etharp_raw+0x104>)
 8013b22:	f240 4262 	movw	r2, #1122	; 0x462
 8013b26:	4930      	ldr	r1, [pc, #192]	; (8013be8 <etharp_raw+0x110>)
 8013b28:	482e      	ldr	r0, [pc, #184]	; (8013be4 <etharp_raw+0x10c>)
 8013b2a:	f002 f837 	bl	8015b9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013b34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f6 fdb6 	bl	800a6a8 <lwip_htons>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	461a      	mov	r2, r3
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b4a:	2b06      	cmp	r3, #6
 8013b4c:	d006      	beq.n	8013b5c <etharp_raw+0x84>
 8013b4e:	4b23      	ldr	r3, [pc, #140]	; (8013bdc <etharp_raw+0x104>)
 8013b50:	f240 4269 	movw	r2, #1129	; 0x469
 8013b54:	4925      	ldr	r1, [pc, #148]	; (8013bec <etharp_raw+0x114>)
 8013b56:	4823      	ldr	r0, [pc, #140]	; (8013be4 <etharp_raw+0x10c>)
 8013b58:	f002 f820 	bl	8015b9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	3308      	adds	r3, #8
 8013b60:	2206      	movs	r2, #6
 8013b62:	6839      	ldr	r1, [r7, #0]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f001 ff09 	bl	801597c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	3312      	adds	r3, #18
 8013b6e:	2206      	movs	r2, #6
 8013b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b72:	4618      	mov	r0, r3
 8013b74:	f001 ff02 	bl	801597c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	330e      	adds	r3, #14
 8013b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b7e:	6812      	ldr	r2, [r2, #0]
 8013b80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	3318      	adds	r3, #24
 8013b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b88:	6812      	ldr	r2, [r2, #0]
 8013b8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	701a      	strb	r2, [r3, #0]
 8013b92:	2200      	movs	r2, #0
 8013b94:	f042 0201 	orr.w	r2, r2, #1
 8013b98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f042 0208 	orr.w	r2, r2, #8
 8013ba2:	709a      	strb	r2, [r3, #2]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	2206      	movs	r2, #6
 8013bac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	2204      	movs	r2, #4
 8013bb2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013bb4:	f640 0306 	movw	r3, #2054	; 0x806
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	68ba      	ldr	r2, [r7, #8]
 8013bbe:	69b9      	ldr	r1, [r7, #24]
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f001 fb7b 	bl	80152bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013bc6:	69b8      	ldr	r0, [r7, #24]
 8013bc8:	f7f8 f960 	bl	800be8c <pbuf_free>
  p = NULL;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3720      	adds	r7, #32
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	08019bf4 	.word	0x08019bf4
 8013be0:	08019d44 	.word	0x08019d44
 8013be4:	08019c6c 	.word	0x08019c6c
 8013be8:	08019df4 	.word	0x08019df4
 8013bec:	08019e28 	.word	0x08019e28

08013bf0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b088      	sub	sp, #32
 8013bf4:	af04      	add	r7, sp, #16
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	9203      	str	r2, [sp, #12]
 8013c10:	68ba      	ldr	r2, [r7, #8]
 8013c12:	9202      	str	r2, [sp, #8]
 8013c14:	4a06      	ldr	r2, [pc, #24]	; (8013c30 <etharp_request_dst+0x40>)
 8013c16:	9201      	str	r2, [sp, #4]
 8013c18:	9300      	str	r3, [sp, #0]
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	68f8      	ldr	r0, [r7, #12]
 8013c20:	f7ff ff5a 	bl	8013ad8 <etharp_raw>
 8013c24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	0801a3fc 	.word	0x0801a3fc

08013c34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013c3e:	4a05      	ldr	r2, [pc, #20]	; (8013c54 <etharp_request+0x20>)
 8013c40:	6839      	ldr	r1, [r7, #0]
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7ff ffd4 	bl	8013bf0 <etharp_request_dst>
 8013c48:	4603      	mov	r3, r0
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	0801a3f4 	.word	0x0801a3f4

08013c58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b08e      	sub	sp, #56	; 0x38
 8013c5c:	af04      	add	r7, sp, #16
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013c62:	4b79      	ldr	r3, [pc, #484]	; (8013e48 <icmp_input+0x1f0>)
 8013c64:	689b      	ldr	r3, [r3, #8]
 8013c66:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	781b      	ldrb	r3, [r3, #0]
 8013c6c:	f003 030f 	and.w	r3, r3, #15
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c7a:	2b13      	cmp	r3, #19
 8013c7c:	f240 80cd 	bls.w	8013e1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	895b      	ldrh	r3, [r3, #10]
 8013c84:	2b03      	cmp	r3, #3
 8013c86:	f240 80ca 	bls.w	8013e1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013c94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f000 80b7 	beq.w	8013e0c <icmp_input+0x1b4>
 8013c9e:	2b08      	cmp	r3, #8
 8013ca0:	f040 80b7 	bne.w	8013e12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013ca4:	4b69      	ldr	r3, [pc, #420]	; (8013e4c <icmp_input+0x1f4>)
 8013ca6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ca8:	4b67      	ldr	r3, [pc, #412]	; (8013e48 <icmp_input+0x1f0>)
 8013caa:	695b      	ldr	r3, [r3, #20]
 8013cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013cb0:	2be0      	cmp	r3, #224	; 0xe0
 8013cb2:	f000 80bb 	beq.w	8013e2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013cb6:	4b64      	ldr	r3, [pc, #400]	; (8013e48 <icmp_input+0x1f0>)
 8013cb8:	695b      	ldr	r3, [r3, #20]
 8013cba:	4a63      	ldr	r2, [pc, #396]	; (8013e48 <icmp_input+0x1f0>)
 8013cbc:	6812      	ldr	r2, [r2, #0]
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f000 fbed 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f040 80b1 	bne.w	8013e30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	891b      	ldrh	r3, [r3, #8]
 8013cd2:	2b07      	cmp	r3, #7
 8013cd4:	f240 80a5 	bls.w	8013e22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cda:	330e      	adds	r3, #14
 8013cdc:	4619      	mov	r1, r3
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7f8 f83e 	bl	800bd60 <pbuf_add_header>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d04b      	beq.n	8013d82 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	891a      	ldrh	r2, [r3, #8]
 8013cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cf0:	4413      	add	r3, r2
 8013cf2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	891b      	ldrh	r3, [r3, #8]
 8013cf8:	8b7a      	ldrh	r2, [r7, #26]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	f0c0 809a 	bcc.w	8013e34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013d00:	8b7b      	ldrh	r3, [r7, #26]
 8013d02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d06:	4619      	mov	r1, r3
 8013d08:	200e      	movs	r0, #14
 8013d0a:	f7f7 fddb 	bl	800b8c4 <pbuf_alloc>
 8013d0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	f000 8090 	beq.w	8013e38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	895b      	ldrh	r3, [r3, #10]
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d20:	3308      	adds	r3, #8
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d203      	bcs.n	8013d2e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013d26:	6978      	ldr	r0, [r7, #20]
 8013d28:	f7f8 f8b0 	bl	800be8c <pbuf_free>
          goto icmperr;
 8013d2c:	e085      	b.n	8013e3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d36:	4618      	mov	r0, r3
 8013d38:	f001 fe20 	bl	801597c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6978      	ldr	r0, [r7, #20]
 8013d42:	f7f8 f81d 	bl	800bd80 <pbuf_remove_header>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d009      	beq.n	8013d60 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013d4c:	4b40      	ldr	r3, [pc, #256]	; (8013e50 <icmp_input+0x1f8>)
 8013d4e:	22b6      	movs	r2, #182	; 0xb6
 8013d50:	4940      	ldr	r1, [pc, #256]	; (8013e54 <icmp_input+0x1fc>)
 8013d52:	4841      	ldr	r0, [pc, #260]	; (8013e58 <icmp_input+0x200>)
 8013d54:	f001 ff22 	bl	8015b9c <iprintf>
          pbuf_free(r);
 8013d58:	6978      	ldr	r0, [r7, #20]
 8013d5a:	f7f8 f897 	bl	800be8c <pbuf_free>
          goto icmperr;
 8013d5e:	e06c      	b.n	8013e3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013d60:	6879      	ldr	r1, [r7, #4]
 8013d62:	6978      	ldr	r0, [r7, #20]
 8013d64:	f7f8 f9b6 	bl	800c0d4 <pbuf_copy>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d003      	beq.n	8013d76 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013d6e:	6978      	ldr	r0, [r7, #20]
 8013d70:	f7f8 f88c 	bl	800be8c <pbuf_free>
          goto icmperr;
 8013d74:	e061      	b.n	8013e3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f7f8 f888 	bl	800be8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	607b      	str	r3, [r7, #4]
 8013d80:	e00f      	b.n	8013da2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d84:	330e      	adds	r3, #14
 8013d86:	4619      	mov	r1, r3
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7f7 fff9 	bl	800bd80 <pbuf_remove_header>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d006      	beq.n	8013da2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013d94:	4b2e      	ldr	r3, [pc, #184]	; (8013e50 <icmp_input+0x1f8>)
 8013d96:	22c7      	movs	r2, #199	; 0xc7
 8013d98:	4930      	ldr	r1, [pc, #192]	; (8013e5c <icmp_input+0x204>)
 8013d9a:	482f      	ldr	r0, [pc, #188]	; (8013e58 <icmp_input+0x200>)
 8013d9c:	f001 fefe 	bl	8015b9c <iprintf>
          goto icmperr;
 8013da0:	e04b      	b.n	8013e3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013da8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013daa:	4619      	mov	r1, r3
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7f7 ffd7 	bl	800bd60 <pbuf_add_header>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d12b      	bne.n	8013e10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013dc6:	4b20      	ldr	r3, [pc, #128]	; (8013e48 <icmp_input+0x1f0>)
 8013dc8:	691a      	ldr	r2, [r3, #16]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	709a      	strb	r2, [r3, #2]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	22ff      	movs	r2, #255	; 0xff
 8013de2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2200      	movs	r2, #0
 8013de8:	729a      	strb	r2, [r3, #10]
 8013dea:	2200      	movs	r2, #0
 8013dec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	9302      	str	r3, [sp, #8]
 8013df2:	2301      	movs	r3, #1
 8013df4:	9301      	str	r3, [sp, #4]
 8013df6:	2300      	movs	r3, #0
 8013df8:	9300      	str	r3, [sp, #0]
 8013dfa:	23ff      	movs	r3, #255	; 0xff
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	69f9      	ldr	r1, [r7, #28]
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 fa75 	bl	80142f0 <ip4_output_if>
 8013e06:	4603      	mov	r3, r0
 8013e08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013e0a:	e001      	b.n	8013e10 <icmp_input+0x1b8>
      break;
 8013e0c:	bf00      	nop
 8013e0e:	e000      	b.n	8013e12 <icmp_input+0x1ba>
      break;
 8013e10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f7f8 f83a 	bl	800be8c <pbuf_free>
  return;
 8013e18:	e013      	b.n	8013e42 <icmp_input+0x1ea>
    goto lenerr;
 8013e1a:	bf00      	nop
 8013e1c:	e002      	b.n	8013e24 <icmp_input+0x1cc>
    goto lenerr;
 8013e1e:	bf00      	nop
 8013e20:	e000      	b.n	8013e24 <icmp_input+0x1cc>
        goto lenerr;
 8013e22:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7f8 f831 	bl	800be8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e2a:	e00a      	b.n	8013e42 <icmp_input+0x1ea>
        goto icmperr;
 8013e2c:	bf00      	nop
 8013e2e:	e004      	b.n	8013e3a <icmp_input+0x1e2>
        goto icmperr;
 8013e30:	bf00      	nop
 8013e32:	e002      	b.n	8013e3a <icmp_input+0x1e2>
          goto icmperr;
 8013e34:	bf00      	nop
 8013e36:	e000      	b.n	8013e3a <icmp_input+0x1e2>
          goto icmperr;
 8013e38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f7f8 f826 	bl	800be8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013e42:	3728      	adds	r7, #40	; 0x28
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	200095b4 	.word	0x200095b4
 8013e4c:	200095c8 	.word	0x200095c8
 8013e50:	08019e6c 	.word	0x08019e6c
 8013e54:	08019ea4 	.word	0x08019ea4
 8013e58:	08019edc 	.word	0x08019edc
 8013e5c:	08019f04 	.word	0x08019f04

08013e60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013e6c:	78fb      	ldrb	r3, [r7, #3]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	2103      	movs	r1, #3
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 f814 	bl	8013ea0 <icmp_send_response>
}
 8013e78:	bf00      	nop
 8013e7a:	3708      	adds	r7, #8
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013e8c:	78fb      	ldrb	r3, [r7, #3]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	210b      	movs	r1, #11
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f000 f804 	bl	8013ea0 <icmp_send_response>
}
 8013e98:	bf00      	nop
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b08c      	sub	sp, #48	; 0x30
 8013ea4:	af04      	add	r7, sp, #16
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	70fb      	strb	r3, [r7, #3]
 8013eac:	4613      	mov	r3, r2
 8013eae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013eb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013eb4:	2124      	movs	r1, #36	; 0x24
 8013eb6:	2022      	movs	r0, #34	; 0x22
 8013eb8:	f7f7 fd04 	bl	800b8c4 <pbuf_alloc>
 8013ebc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d04c      	beq.n	8013f5e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	895b      	ldrh	r3, [r3, #10]
 8013ec8:	2b23      	cmp	r3, #35	; 0x23
 8013eca:	d806      	bhi.n	8013eda <icmp_send_response+0x3a>
 8013ecc:	4b26      	ldr	r3, [pc, #152]	; (8013f68 <icmp_send_response+0xc8>)
 8013ece:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013ed2:	4926      	ldr	r1, [pc, #152]	; (8013f6c <icmp_send_response+0xcc>)
 8013ed4:	4826      	ldr	r0, [pc, #152]	; (8013f70 <icmp_send_response+0xd0>)
 8013ed6:	f001 fe61 	bl	8015b9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	78fa      	ldrb	r2, [r7, #3]
 8013eea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	78ba      	ldrb	r2, [r7, #2]
 8013ef0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	711a      	strb	r2, [r3, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	2200      	movs	r2, #0
 8013f00:	719a      	strb	r2, [r3, #6]
 8013f02:	2200      	movs	r2, #0
 8013f04:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	f103 0008 	add.w	r0, r3, #8
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	221c      	movs	r2, #28
 8013f14:	4619      	mov	r1, r3
 8013f16:	f001 fd31 	bl	801597c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013f1a:	69bb      	ldr	r3, [r7, #24]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013f20:	f107 030c 	add.w	r3, r7, #12
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 f825 	bl	8013f74 <ip4_route>
 8013f2a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d011      	beq.n	8013f56 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	2200      	movs	r2, #0
 8013f36:	709a      	strb	r2, [r3, #2]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013f3c:	f107 020c 	add.w	r2, r7, #12
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	9302      	str	r3, [sp, #8]
 8013f44:	2301      	movs	r3, #1
 8013f46:	9301      	str	r3, [sp, #4]
 8013f48:	2300      	movs	r3, #0
 8013f4a:	9300      	str	r3, [sp, #0]
 8013f4c:	23ff      	movs	r3, #255	; 0xff
 8013f4e:	2100      	movs	r1, #0
 8013f50:	69f8      	ldr	r0, [r7, #28]
 8013f52:	f000 f9cd 	bl	80142f0 <ip4_output_if>
  }
  pbuf_free(q);
 8013f56:	69f8      	ldr	r0, [r7, #28]
 8013f58:	f7f7 ff98 	bl	800be8c <pbuf_free>
 8013f5c:	e000      	b.n	8013f60 <icmp_send_response+0xc0>
    return;
 8013f5e:	bf00      	nop
}
 8013f60:	3720      	adds	r7, #32
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	08019e6c 	.word	0x08019e6c
 8013f6c:	08019f38 	.word	0x08019f38
 8013f70:	08019edc 	.word	0x08019edc

08013f74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013f7c:	4b33      	ldr	r3, [pc, #204]	; (801404c <ip4_route+0xd8>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	60fb      	str	r3, [r7, #12]
 8013f82:	e036      	b.n	8013ff2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f8a:	f003 0301 	and.w	r3, r3, #1
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d02b      	beq.n	8013fec <ip4_route+0x78>
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f9a:	089b      	lsrs	r3, r3, #2
 8013f9c:	f003 0301 	and.w	r3, r3, #1
 8013fa0:	b2db      	uxtb	r3, r3
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d022      	beq.n	8013fec <ip4_route+0x78>
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d01d      	beq.n	8013fec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	3304      	adds	r3, #4
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	405a      	eors	r2, r3
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	3308      	adds	r3, #8
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	e038      	b.n	801403e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013fd2:	f003 0302 	and.w	r3, r3, #2
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d108      	bne.n	8013fec <ip4_route+0x78>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681a      	ldr	r2, [r3, #0]
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	330c      	adds	r3, #12
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d101      	bne.n	8013fec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	e028      	b.n	801403e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d1c5      	bne.n	8013f84 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013ff8:	4b15      	ldr	r3, [pc, #84]	; (8014050 <ip4_route+0xdc>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d01a      	beq.n	8014036 <ip4_route+0xc2>
 8014000:	4b13      	ldr	r3, [pc, #76]	; (8014050 <ip4_route+0xdc>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014008:	f003 0301 	and.w	r3, r3, #1
 801400c:	2b00      	cmp	r3, #0
 801400e:	d012      	beq.n	8014036 <ip4_route+0xc2>
 8014010:	4b0f      	ldr	r3, [pc, #60]	; (8014050 <ip4_route+0xdc>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014018:	f003 0304 	and.w	r3, r3, #4
 801401c:	2b00      	cmp	r3, #0
 801401e:	d00a      	beq.n	8014036 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014020:	4b0b      	ldr	r3, [pc, #44]	; (8014050 <ip4_route+0xdc>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	3304      	adds	r3, #4
 8014026:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014028:	2b00      	cmp	r3, #0
 801402a:	d004      	beq.n	8014036 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	b2db      	uxtb	r3, r3
 8014032:	2b7f      	cmp	r3, #127	; 0x7f
 8014034:	d101      	bne.n	801403a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014036:	2300      	movs	r3, #0
 8014038:	e001      	b.n	801403e <ip4_route+0xca>
  }

  return netif_default;
 801403a:	4b05      	ldr	r3, [pc, #20]	; (8014050 <ip4_route+0xdc>)
 801403c:	681b      	ldr	r3, [r3, #0]
}
 801403e:	4618      	mov	r0, r3
 8014040:	3714      	adds	r7, #20
 8014042:	46bd      	mov	sp, r7
 8014044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	2000eebc 	.word	0x2000eebc
 8014050:	2000eec0 	.word	0x2000eec0

08014054 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b082      	sub	sp, #8
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014062:	f003 0301 	and.w	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	d016      	beq.n	801409a <ip4_input_accept+0x46>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3304      	adds	r3, #4
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d011      	beq.n	801409a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014076:	4b0b      	ldr	r3, [pc, #44]	; (80140a4 <ip4_input_accept+0x50>)
 8014078:	695a      	ldr	r2, [r3, #20]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	3304      	adds	r3, #4
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	429a      	cmp	r2, r3
 8014082:	d008      	beq.n	8014096 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014084:	4b07      	ldr	r3, [pc, #28]	; (80140a4 <ip4_input_accept+0x50>)
 8014086:	695b      	ldr	r3, [r3, #20]
 8014088:	6879      	ldr	r1, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	f000 fa08 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 8014090:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014092:	2b00      	cmp	r3, #0
 8014094:	d001      	beq.n	801409a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014096:	2301      	movs	r3, #1
 8014098:	e000      	b.n	801409c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801409a:	2300      	movs	r3, #0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	200095b4 	.word	0x200095b4

080140a8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b086      	sub	sp, #24
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	091b      	lsrs	r3, r3, #4
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	2b04      	cmp	r3, #4
 80140c2:	d004      	beq.n	80140ce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7f7 fee1 	bl	800be8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80140ca:	2300      	movs	r3, #0
 80140cc:	e107      	b.n	80142de <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f003 030f 	and.w	r3, r3, #15
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	885b      	ldrh	r3, [r3, #2]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f6 fadf 	bl	800a6a8 <lwip_htons>
 80140ea:	4603      	mov	r3, r0
 80140ec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	891b      	ldrh	r3, [r3, #8]
 80140f2:	89ba      	ldrh	r2, [r7, #12]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d204      	bcs.n	8014102 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80140f8:	89bb      	ldrh	r3, [r7, #12]
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7f7 fd3f 	bl	800bb80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	895b      	ldrh	r3, [r3, #10]
 8014106:	89fa      	ldrh	r2, [r7, #14]
 8014108:	429a      	cmp	r2, r3
 801410a:	d807      	bhi.n	801411c <ip4_input+0x74>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	891b      	ldrh	r3, [r3, #8]
 8014110:	89ba      	ldrh	r2, [r7, #12]
 8014112:	429a      	cmp	r2, r3
 8014114:	d802      	bhi.n	801411c <ip4_input+0x74>
 8014116:	89fb      	ldrh	r3, [r7, #14]
 8014118:	2b13      	cmp	r3, #19
 801411a:	d804      	bhi.n	8014126 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7f7 feb5 	bl	800be8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014122:	2300      	movs	r3, #0
 8014124:	e0db      	b.n	80142de <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	691b      	ldr	r3, [r3, #16]
 801412a:	4a6f      	ldr	r2, [pc, #444]	; (80142e8 <ip4_input+0x240>)
 801412c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	4a6d      	ldr	r2, [pc, #436]	; (80142e8 <ip4_input+0x240>)
 8014134:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014136:	4b6c      	ldr	r3, [pc, #432]	; (80142e8 <ip4_input+0x240>)
 8014138:	695b      	ldr	r3, [r3, #20]
 801413a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801413e:	2be0      	cmp	r3, #224	; 0xe0
 8014140:	d112      	bne.n	8014168 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	b2db      	uxtb	r3, r3
 801414e:	2b00      	cmp	r3, #0
 8014150:	d007      	beq.n	8014162 <ip4_input+0xba>
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	3304      	adds	r3, #4
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <ip4_input+0xba>
      netif = inp;
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	613b      	str	r3, [r7, #16]
 8014160:	e02a      	b.n	80141b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014162:	2300      	movs	r3, #0
 8014164:	613b      	str	r3, [r7, #16]
 8014166:	e027      	b.n	80141b8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014168:	6838      	ldr	r0, [r7, #0]
 801416a:	f7ff ff73 	bl	8014054 <ip4_input_accept>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d002      	beq.n	801417a <ip4_input+0xd2>
      netif = inp;
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	613b      	str	r3, [r7, #16]
 8014178:	e01e      	b.n	80141b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801417a:	2300      	movs	r3, #0
 801417c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801417e:	4b5a      	ldr	r3, [pc, #360]	; (80142e8 <ip4_input+0x240>)
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	b2db      	uxtb	r3, r3
 8014184:	2b7f      	cmp	r3, #127	; 0x7f
 8014186:	d017      	beq.n	80141b8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014188:	4b58      	ldr	r3, [pc, #352]	; (80142ec <ip4_input+0x244>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	613b      	str	r3, [r7, #16]
 801418e:	e00e      	b.n	80141ae <ip4_input+0x106>
          if (netif == inp) {
 8014190:	693a      	ldr	r2, [r7, #16]
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	429a      	cmp	r2, r3
 8014196:	d006      	beq.n	80141a6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014198:	6938      	ldr	r0, [r7, #16]
 801419a:	f7ff ff5b 	bl	8014054 <ip4_input_accept>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d108      	bne.n	80141b6 <ip4_input+0x10e>
 80141a4:	e000      	b.n	80141a8 <ip4_input+0x100>
            continue;
 80141a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	613b      	str	r3, [r7, #16]
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d1ed      	bne.n	8014190 <ip4_input+0xe8>
 80141b4:	e000      	b.n	80141b8 <ip4_input+0x110>
            break;
 80141b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80141b8:	4b4b      	ldr	r3, [pc, #300]	; (80142e8 <ip4_input+0x240>)
 80141ba:	691b      	ldr	r3, [r3, #16]
 80141bc:	6839      	ldr	r1, [r7, #0]
 80141be:	4618      	mov	r0, r3
 80141c0:	f000 f96e 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d105      	bne.n	80141d6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80141ca:	4b47      	ldr	r3, [pc, #284]	; (80142e8 <ip4_input+0x240>)
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80141d2:	2be0      	cmp	r3, #224	; 0xe0
 80141d4:	d104      	bne.n	80141e0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f7f7 fe58 	bl	800be8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80141dc:	2300      	movs	r3, #0
 80141de:	e07e      	b.n	80142de <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d104      	bne.n	80141f0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7f7 fe50 	bl	800be8c <pbuf_free>
    return ERR_OK;
 80141ec:	2300      	movs	r3, #0
 80141ee:	e076      	b.n	80142de <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	88db      	ldrh	r3, [r3, #6]
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	461a      	mov	r2, r3
 80141f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80141fc:	4013      	ands	r3, r2
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00b      	beq.n	801421a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f000 fc92 	bl	8014b2c <ip4_reass>
 8014208:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d101      	bne.n	8014214 <ip4_input+0x16c>
      return ERR_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	e064      	b.n	80142de <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801421a:	4a33      	ldr	r2, [pc, #204]	; (80142e8 <ip4_input+0x240>)
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014220:	4a31      	ldr	r2, [pc, #196]	; (80142e8 <ip4_input+0x240>)
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014226:	4a30      	ldr	r2, [pc, #192]	; (80142e8 <ip4_input+0x240>)
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	f003 030f 	and.w	r3, r3, #15
 8014234:	b2db      	uxtb	r3, r3
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	b2db      	uxtb	r3, r3
 801423a:	b29a      	uxth	r2, r3
 801423c:	4b2a      	ldr	r3, [pc, #168]	; (80142e8 <ip4_input+0x240>)
 801423e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014240:	89fb      	ldrh	r3, [r7, #14]
 8014242:	4619      	mov	r1, r3
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7f7 fd9b 	bl	800bd80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	7a5b      	ldrb	r3, [r3, #9]
 801424e:	2b11      	cmp	r3, #17
 8014250:	d006      	beq.n	8014260 <ip4_input+0x1b8>
 8014252:	2b11      	cmp	r3, #17
 8014254:	dc13      	bgt.n	801427e <ip4_input+0x1d6>
 8014256:	2b01      	cmp	r3, #1
 8014258:	d00c      	beq.n	8014274 <ip4_input+0x1cc>
 801425a:	2b06      	cmp	r3, #6
 801425c:	d005      	beq.n	801426a <ip4_input+0x1c2>
 801425e:	e00e      	b.n	801427e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014260:	6839      	ldr	r1, [r7, #0]
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7fe fb5a 	bl	801291c <udp_input>
        break;
 8014268:	e026      	b.n	80142b8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7f9 ff13 	bl	800e098 <tcp_input>
        break;
 8014272:	e021      	b.n	80142b8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014274:	6839      	ldr	r1, [r7, #0]
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7ff fcee 	bl	8013c58 <icmp_input>
        break;
 801427c:	e01c      	b.n	80142b8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801427e:	4b1a      	ldr	r3, [pc, #104]	; (80142e8 <ip4_input+0x240>)
 8014280:	695b      	ldr	r3, [r3, #20]
 8014282:	6939      	ldr	r1, [r7, #16]
 8014284:	4618      	mov	r0, r3
 8014286:	f000 f90b 	bl	80144a0 <ip4_addr_isbroadcast_u32>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10f      	bne.n	80142b0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014290:	4b15      	ldr	r3, [pc, #84]	; (80142e8 <ip4_input+0x240>)
 8014292:	695b      	ldr	r3, [r3, #20]
 8014294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014298:	2be0      	cmp	r3, #224	; 0xe0
 801429a:	d009      	beq.n	80142b0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801429c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80142a0:	4619      	mov	r1, r3
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7f7 fddf 	bl	800be66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80142a8:	2102      	movs	r1, #2
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f7ff fdd8 	bl	8013e60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7f7 fdeb 	bl	800be8c <pbuf_free>
        break;
 80142b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80142b8:	4b0b      	ldr	r3, [pc, #44]	; (80142e8 <ip4_input+0x240>)
 80142ba:	2200      	movs	r2, #0
 80142bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80142be:	4b0a      	ldr	r3, [pc, #40]	; (80142e8 <ip4_input+0x240>)
 80142c0:	2200      	movs	r2, #0
 80142c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80142c4:	4b08      	ldr	r3, [pc, #32]	; (80142e8 <ip4_input+0x240>)
 80142c6:	2200      	movs	r2, #0
 80142c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80142ca:	4b07      	ldr	r3, [pc, #28]	; (80142e8 <ip4_input+0x240>)
 80142cc:	2200      	movs	r2, #0
 80142ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80142d0:	4b05      	ldr	r3, [pc, #20]	; (80142e8 <ip4_input+0x240>)
 80142d2:	2200      	movs	r2, #0
 80142d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80142d6:	4b04      	ldr	r3, [pc, #16]	; (80142e8 <ip4_input+0x240>)
 80142d8:	2200      	movs	r2, #0
 80142da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80142dc:	2300      	movs	r3, #0
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3718      	adds	r7, #24
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	200095b4 	.word	0x200095b4
 80142ec:	2000eebc 	.word	0x2000eebc

080142f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08a      	sub	sp, #40	; 0x28
 80142f4:	af04      	add	r7, sp, #16
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]
 80142fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d009      	beq.n	801431c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d003      	beq.n	8014316 <ip4_output_if+0x26>
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d102      	bne.n	801431c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014318:	3304      	adds	r3, #4
 801431a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801431c:	78fa      	ldrb	r2, [r7, #3]
 801431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014320:	9302      	str	r3, [sp, #8]
 8014322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	f897 3020 	ldrb.w	r3, [r7, #32]
 801432c:	9300      	str	r3, [sp, #0]
 801432e:	4613      	mov	r3, r2
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	6979      	ldr	r1, [r7, #20]
 8014334:	68f8      	ldr	r0, [r7, #12]
 8014336:	f000 f805 	bl	8014344 <ip4_output_if_src>
 801433a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801433c:	4618      	mov	r0, r3
 801433e:	3718      	adds	r7, #24
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}

08014344 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	7b9b      	ldrb	r3, [r3, #14]
 8014356:	2b01      	cmp	r3, #1
 8014358:	d006      	beq.n	8014368 <ip4_output_if_src+0x24>
 801435a:	4b4b      	ldr	r3, [pc, #300]	; (8014488 <ip4_output_if_src+0x144>)
 801435c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014360:	494a      	ldr	r1, [pc, #296]	; (801448c <ip4_output_if_src+0x148>)
 8014362:	484b      	ldr	r0, [pc, #300]	; (8014490 <ip4_output_if_src+0x14c>)
 8014364:	f001 fc1a 	bl	8015b9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d060      	beq.n	8014430 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801436e:	2314      	movs	r3, #20
 8014370:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014372:	2114      	movs	r1, #20
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f7f7 fcf3 	bl	800bd60 <pbuf_add_header>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d002      	beq.n	8014386 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014380:	f06f 0301 	mvn.w	r3, #1
 8014384:	e07c      	b.n	8014480 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	895b      	ldrh	r3, [r3, #10]
 8014390:	2b13      	cmp	r3, #19
 8014392:	d806      	bhi.n	80143a2 <ip4_output_if_src+0x5e>
 8014394:	4b3c      	ldr	r3, [pc, #240]	; (8014488 <ip4_output_if_src+0x144>)
 8014396:	f44f 7262 	mov.w	r2, #904	; 0x388
 801439a:	493e      	ldr	r1, [pc, #248]	; (8014494 <ip4_output_if_src+0x150>)
 801439c:	483c      	ldr	r0, [pc, #240]	; (8014490 <ip4_output_if_src+0x14c>)
 801439e:	f001 fbfd 	bl	8015b9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80143a2:	69fb      	ldr	r3, [r7, #28]
 80143a4:	78fa      	ldrb	r2, [r7, #3]
 80143a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80143ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80143b8:	8b7b      	ldrh	r3, [r7, #26]
 80143ba:	089b      	lsrs	r3, r3, #2
 80143bc:	b29b      	uxth	r3, r3
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143c4:	b2da      	uxtb	r2, r3
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80143d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	891b      	ldrh	r3, [r3, #8]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7f6 f966 	bl	800a6a8 <lwip_htons>
 80143dc:	4603      	mov	r3, r0
 80143de:	461a      	mov	r2, r3
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	2200      	movs	r2, #0
 80143e8:	719a      	strb	r2, [r3, #6]
 80143ea:	2200      	movs	r2, #0
 80143ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80143ee:	4b2a      	ldr	r3, [pc, #168]	; (8014498 <ip4_output_if_src+0x154>)
 80143f0:	881b      	ldrh	r3, [r3, #0]
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7f6 f958 	bl	800a6a8 <lwip_htons>
 80143f8:	4603      	mov	r3, r0
 80143fa:	461a      	mov	r2, r3
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014400:	4b25      	ldr	r3, [pc, #148]	; (8014498 <ip4_output_if_src+0x154>)
 8014402:	881b      	ldrh	r3, [r3, #0]
 8014404:	3301      	adds	r3, #1
 8014406:	b29a      	uxth	r2, r3
 8014408:	4b23      	ldr	r3, [pc, #140]	; (8014498 <ip4_output_if_src+0x154>)
 801440a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d104      	bne.n	801441c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014412:	4b22      	ldr	r3, [pc, #136]	; (801449c <ip4_output_if_src+0x158>)
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	60da      	str	r2, [r3, #12]
 801441a:	e003      	b.n	8014424 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	2200      	movs	r2, #0
 8014428:	729a      	strb	r2, [r3, #10]
 801442a:	2200      	movs	r2, #0
 801442c:	72da      	strb	r2, [r3, #11]
 801442e:	e00f      	b.n	8014450 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	895b      	ldrh	r3, [r3, #10]
 8014434:	2b13      	cmp	r3, #19
 8014436:	d802      	bhi.n	801443e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014438:	f06f 0301 	mvn.w	r3, #1
 801443c:	e020      	b.n	8014480 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801444a:	f107 0314 	add.w	r3, r7, #20
 801444e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014454:	2b00      	cmp	r3, #0
 8014456:	d00c      	beq.n	8014472 <ip4_output_if_src+0x12e>
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	891a      	ldrh	r2, [r3, #8]
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014460:	429a      	cmp	r2, r3
 8014462:	d906      	bls.n	8014472 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f000 fd53 	bl	8014f14 <ip4_frag>
 801446e:	4603      	mov	r3, r0
 8014470:	e006      	b.n	8014480 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	68f9      	ldr	r1, [r7, #12]
 801447a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801447c:	4798      	blx	r3
 801447e:	4603      	mov	r3, r0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3720      	adds	r7, #32
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	08019f64 	.word	0x08019f64
 801448c:	08019f98 	.word	0x08019f98
 8014490:	08019fa4 	.word	0x08019fa4
 8014494:	08019fcc 	.word	0x08019fcc
 8014498:	2000f01a 	.word	0x2000f01a
 801449c:	0801a3f0 	.word	0x0801a3f0

080144a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b085      	sub	sp, #20
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144b4:	d002      	beq.n	80144bc <ip4_addr_isbroadcast_u32+0x1c>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d101      	bne.n	80144c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80144bc:	2301      	movs	r3, #1
 80144be:	e02a      	b.n	8014516 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80144c6:	f003 0302 	and.w	r3, r3, #2
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d101      	bne.n	80144d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	e021      	b.n	8014516 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	3304      	adds	r3, #4
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d101      	bne.n	80144e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	e019      	b.n	8014516 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	3304      	adds	r3, #4
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	405a      	eors	r2, r3
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	3308      	adds	r3, #8
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	4013      	ands	r3, r2
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d10d      	bne.n	8014514 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	3308      	adds	r3, #8
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	43da      	mvns	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	3308      	adds	r3, #8
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801450c:	429a      	cmp	r2, r3
 801450e:	d101      	bne.n	8014514 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014510:	2301      	movs	r3, #1
 8014512:	e000      	b.n	8014516 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014514:	2300      	movs	r3, #0
  }
}
 8014516:	4618      	mov	r0, r3
 8014518:	3714      	adds	r7, #20
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr
	...

08014524 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b084      	sub	sp, #16
 8014528:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801452a:	2300      	movs	r3, #0
 801452c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801452e:	4b12      	ldr	r3, [pc, #72]	; (8014578 <ip_reass_tmr+0x54>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014534:	e018      	b.n	8014568 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	7fdb      	ldrb	r3, [r3, #31]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00b      	beq.n	8014556 <ip_reass_tmr+0x32>
      r->timer--;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	7fdb      	ldrb	r3, [r3, #31]
 8014542:	3b01      	subs	r3, #1
 8014544:	b2da      	uxtb	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	60fb      	str	r3, [r7, #12]
 8014554:	e008      	b.n	8014568 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014560:	68b9      	ldr	r1, [r7, #8]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 f80a 	bl	801457c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d1e3      	bne.n	8014536 <ip_reass_tmr+0x12>
    }
  }
}
 801456e:	bf00      	nop
 8014570:	bf00      	nop
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}
 8014578:	2000f01c 	.word	0x2000f01c

0801457c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b088      	sub	sp, #32
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801458a:	683a      	ldr	r2, [r7, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	429a      	cmp	r2, r3
 8014590:	d105      	bne.n	801459e <ip_reass_free_complete_datagram+0x22>
 8014592:	4b45      	ldr	r3, [pc, #276]	; (80146a8 <ip_reass_free_complete_datagram+0x12c>)
 8014594:	22ab      	movs	r2, #171	; 0xab
 8014596:	4945      	ldr	r1, [pc, #276]	; (80146ac <ip_reass_free_complete_datagram+0x130>)
 8014598:	4845      	ldr	r0, [pc, #276]	; (80146b0 <ip_reass_free_complete_datagram+0x134>)
 801459a:	f001 faff 	bl	8015b9c <iprintf>
  if (prev != NULL) {
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d00a      	beq.n	80145ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d005      	beq.n	80145ba <ip_reass_free_complete_datagram+0x3e>
 80145ae:	4b3e      	ldr	r3, [pc, #248]	; (80146a8 <ip_reass_free_complete_datagram+0x12c>)
 80145b0:	22ad      	movs	r2, #173	; 0xad
 80145b2:	4940      	ldr	r1, [pc, #256]	; (80146b4 <ip_reass_free_complete_datagram+0x138>)
 80145b4:	483e      	ldr	r0, [pc, #248]	; (80146b0 <ip_reass_free_complete_datagram+0x134>)
 80145b6:	f001 faf1 	bl	8015b9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	685b      	ldr	r3, [r3, #4]
 80145c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	889b      	ldrh	r3, [r3, #4]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d12a      	bne.n	8014622 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	6858      	ldr	r0, [r3, #4]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	3308      	adds	r3, #8
 80145e2:	2214      	movs	r2, #20
 80145e4:	4619      	mov	r1, r3
 80145e6:	f001 f9c9 	bl	801597c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80145ea:	2101      	movs	r1, #1
 80145ec:	69b8      	ldr	r0, [r7, #24]
 80145ee:	f7ff fc47 	bl	8013e80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80145f2:	69b8      	ldr	r0, [r7, #24]
 80145f4:	f7f7 fcd8 	bl	800bfa8 <pbuf_clen>
 80145f8:	4603      	mov	r3, r0
 80145fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80145fc:	8bfa      	ldrh	r2, [r7, #30]
 80145fe:	8a7b      	ldrh	r3, [r7, #18]
 8014600:	4413      	add	r3, r2
 8014602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014606:	db05      	blt.n	8014614 <ip_reass_free_complete_datagram+0x98>
 8014608:	4b27      	ldr	r3, [pc, #156]	; (80146a8 <ip_reass_free_complete_datagram+0x12c>)
 801460a:	22bc      	movs	r2, #188	; 0xbc
 801460c:	492a      	ldr	r1, [pc, #168]	; (80146b8 <ip_reass_free_complete_datagram+0x13c>)
 801460e:	4828      	ldr	r0, [pc, #160]	; (80146b0 <ip_reass_free_complete_datagram+0x134>)
 8014610:	f001 fac4 	bl	8015b9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014614:	8bfa      	ldrh	r2, [r7, #30]
 8014616:	8a7b      	ldrh	r3, [r7, #18]
 8014618:	4413      	add	r3, r2
 801461a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801461c:	69b8      	ldr	r0, [r7, #24]
 801461e:	f7f7 fc35 	bl	800be8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014628:	e01f      	b.n	801466a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801462a:	69bb      	ldr	r3, [r7, #24]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f7f7 fcb4 	bl	800bfa8 <pbuf_clen>
 8014640:	4603      	mov	r3, r0
 8014642:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014644:	8bfa      	ldrh	r2, [r7, #30]
 8014646:	8a7b      	ldrh	r3, [r7, #18]
 8014648:	4413      	add	r3, r2
 801464a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801464e:	db05      	blt.n	801465c <ip_reass_free_complete_datagram+0xe0>
 8014650:	4b15      	ldr	r3, [pc, #84]	; (80146a8 <ip_reass_free_complete_datagram+0x12c>)
 8014652:	22cc      	movs	r2, #204	; 0xcc
 8014654:	4918      	ldr	r1, [pc, #96]	; (80146b8 <ip_reass_free_complete_datagram+0x13c>)
 8014656:	4816      	ldr	r0, [pc, #88]	; (80146b0 <ip_reass_free_complete_datagram+0x134>)
 8014658:	f001 faa0 	bl	8015b9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801465c:	8bfa      	ldrh	r2, [r7, #30]
 801465e:	8a7b      	ldrh	r3, [r7, #18]
 8014660:	4413      	add	r3, r2
 8014662:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014664:	68f8      	ldr	r0, [r7, #12]
 8014666:	f7f7 fc11 	bl	800be8c <pbuf_free>
  while (p != NULL) {
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1dc      	bne.n	801462a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 f8c2 	bl	80147fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014678:	4b10      	ldr	r3, [pc, #64]	; (80146bc <ip_reass_free_complete_datagram+0x140>)
 801467a:	881b      	ldrh	r3, [r3, #0]
 801467c:	8bfa      	ldrh	r2, [r7, #30]
 801467e:	429a      	cmp	r2, r3
 8014680:	d905      	bls.n	801468e <ip_reass_free_complete_datagram+0x112>
 8014682:	4b09      	ldr	r3, [pc, #36]	; (80146a8 <ip_reass_free_complete_datagram+0x12c>)
 8014684:	22d2      	movs	r2, #210	; 0xd2
 8014686:	490e      	ldr	r1, [pc, #56]	; (80146c0 <ip_reass_free_complete_datagram+0x144>)
 8014688:	4809      	ldr	r0, [pc, #36]	; (80146b0 <ip_reass_free_complete_datagram+0x134>)
 801468a:	f001 fa87 	bl	8015b9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801468e:	4b0b      	ldr	r3, [pc, #44]	; (80146bc <ip_reass_free_complete_datagram+0x140>)
 8014690:	881a      	ldrh	r2, [r3, #0]
 8014692:	8bfb      	ldrh	r3, [r7, #30]
 8014694:	1ad3      	subs	r3, r2, r3
 8014696:	b29a      	uxth	r2, r3
 8014698:	4b08      	ldr	r3, [pc, #32]	; (80146bc <ip_reass_free_complete_datagram+0x140>)
 801469a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801469c:	8bfb      	ldrh	r3, [r7, #30]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3720      	adds	r7, #32
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	08019ffc 	.word	0x08019ffc
 80146ac:	0801a038 	.word	0x0801a038
 80146b0:	0801a044 	.word	0x0801a044
 80146b4:	0801a06c 	.word	0x0801a06c
 80146b8:	0801a080 	.word	0x0801a080
 80146bc:	2000f020 	.word	0x2000f020
 80146c0:	0801a0a0 	.word	0x0801a0a0

080146c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b08a      	sub	sp, #40	; 0x28
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80146ce:	2300      	movs	r3, #0
 80146d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80146d2:	2300      	movs	r3, #0
 80146d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80146d6:	2300      	movs	r3, #0
 80146d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80146da:	2300      	movs	r3, #0
 80146dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80146e2:	4b28      	ldr	r3, [pc, #160]	; (8014784 <ip_reass_remove_oldest_datagram+0xc0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80146e8:	e030      	b.n	801474c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80146ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ec:	695a      	ldr	r2, [r3, #20]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68db      	ldr	r3, [r3, #12]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d10c      	bne.n	8014710 <ip_reass_remove_oldest_datagram+0x4c>
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	699a      	ldr	r2, [r3, #24]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	691b      	ldr	r3, [r3, #16]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d106      	bne.n	8014710 <ip_reass_remove_oldest_datagram+0x4c>
 8014702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014704:	899a      	ldrh	r2, [r3, #12]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	889b      	ldrh	r3, [r3, #4]
 801470a:	b29b      	uxth	r3, r3
 801470c:	429a      	cmp	r2, r3
 801470e:	d014      	beq.n	801473a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	3301      	adds	r3, #1
 8014714:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014716:	6a3b      	ldr	r3, [r7, #32]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d104      	bne.n	8014726 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014720:	69fb      	ldr	r3, [r7, #28]
 8014722:	61bb      	str	r3, [r7, #24]
 8014724:	e009      	b.n	801473a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	7fda      	ldrb	r2, [r3, #31]
 801472a:	6a3b      	ldr	r3, [r7, #32]
 801472c:	7fdb      	ldrb	r3, [r3, #31]
 801472e:	429a      	cmp	r2, r3
 8014730:	d803      	bhi.n	801473a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d001      	beq.n	8014746 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014744:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	2b00      	cmp	r3, #0
 8014750:	d1cb      	bne.n	80146ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014752:	6a3b      	ldr	r3, [r7, #32]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d008      	beq.n	801476a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014758:	69b9      	ldr	r1, [r7, #24]
 801475a:	6a38      	ldr	r0, [r7, #32]
 801475c:	f7ff ff0e 	bl	801457c <ip_reass_free_complete_datagram>
 8014760:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014762:	697a      	ldr	r2, [r7, #20]
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	4413      	add	r3, r2
 8014768:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801476a:	697a      	ldr	r2, [r7, #20]
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	429a      	cmp	r2, r3
 8014770:	da02      	bge.n	8014778 <ip_reass_remove_oldest_datagram+0xb4>
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	2b01      	cmp	r3, #1
 8014776:	dcac      	bgt.n	80146d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014778:	697b      	ldr	r3, [r7, #20]
}
 801477a:	4618      	mov	r0, r3
 801477c:	3728      	adds	r7, #40	; 0x28
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	2000f01c 	.word	0x2000f01c

08014788 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014792:	2004      	movs	r0, #4
 8014794:	f7f6 fc60 	bl	800b058 <memp_malloc>
 8014798:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d110      	bne.n	80147c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80147a0:	6839      	ldr	r1, [r7, #0]
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f7ff ff8e 	bl	80146c4 <ip_reass_remove_oldest_datagram>
 80147a8:	4602      	mov	r2, r0
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	4293      	cmp	r3, r2
 80147ae:	dc03      	bgt.n	80147b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80147b0:	2004      	movs	r0, #4
 80147b2:	f7f6 fc51 	bl	800b058 <memp_malloc>
 80147b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d101      	bne.n	80147c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80147be:	2300      	movs	r3, #0
 80147c0:	e016      	b.n	80147f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80147c2:	2220      	movs	r2, #32
 80147c4:	2100      	movs	r1, #0
 80147c6:	68f8      	ldr	r0, [r7, #12]
 80147c8:	f001 f900 	bl	80159cc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	220f      	movs	r2, #15
 80147d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80147d2:	4b09      	ldr	r3, [pc, #36]	; (80147f8 <ip_reass_enqueue_new_datagram+0x70>)
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80147da:	4a07      	ldr	r2, [pc, #28]	; (80147f8 <ip_reass_enqueue_new_datagram+0x70>)
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	3308      	adds	r3, #8
 80147e4:	2214      	movs	r2, #20
 80147e6:	6879      	ldr	r1, [r7, #4]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f001 f8c7 	bl	801597c <memcpy>
  return ipr;
 80147ee:	68fb      	ldr	r3, [r7, #12]
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3710      	adds	r7, #16
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	2000f01c 	.word	0x2000f01c

080147fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014806:	4b10      	ldr	r3, [pc, #64]	; (8014848 <ip_reass_dequeue_datagram+0x4c>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	429a      	cmp	r2, r3
 801480e:	d104      	bne.n	801481a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4a0c      	ldr	r2, [pc, #48]	; (8014848 <ip_reass_dequeue_datagram+0x4c>)
 8014816:	6013      	str	r3, [r2, #0]
 8014818:	e00d      	b.n	8014836 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d106      	bne.n	801482e <ip_reass_dequeue_datagram+0x32>
 8014820:	4b0a      	ldr	r3, [pc, #40]	; (801484c <ip_reass_dequeue_datagram+0x50>)
 8014822:	f240 1245 	movw	r2, #325	; 0x145
 8014826:	490a      	ldr	r1, [pc, #40]	; (8014850 <ip_reass_dequeue_datagram+0x54>)
 8014828:	480a      	ldr	r0, [pc, #40]	; (8014854 <ip_reass_dequeue_datagram+0x58>)
 801482a:	f001 f9b7 	bl	8015b9c <iprintf>
    prev->next = ipr->next;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014836:	6879      	ldr	r1, [r7, #4]
 8014838:	2004      	movs	r0, #4
 801483a:	f7f6 fc83 	bl	800b144 <memp_free>
}
 801483e:	bf00      	nop
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
 8014846:	bf00      	nop
 8014848:	2000f01c 	.word	0x2000f01c
 801484c:	08019ffc 	.word	0x08019ffc
 8014850:	0801a0c4 	.word	0x0801a0c4
 8014854:	0801a044 	.word	0x0801a044

08014858 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08c      	sub	sp, #48	; 0x30
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014864:	2300      	movs	r3, #0
 8014866:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014868:	2301      	movs	r3, #1
 801486a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	885b      	ldrh	r3, [r3, #2]
 8014876:	b29b      	uxth	r3, r3
 8014878:	4618      	mov	r0, r3
 801487a:	f7f5 ff15 	bl	800a6a8 <lwip_htons>
 801487e:	4603      	mov	r3, r0
 8014880:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	f003 030f 	and.w	r3, r3, #15
 801488a:	b2db      	uxtb	r3, r3
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014890:	7e7b      	ldrb	r3, [r7, #25]
 8014892:	b29b      	uxth	r3, r3
 8014894:	8b7a      	ldrh	r2, [r7, #26]
 8014896:	429a      	cmp	r2, r3
 8014898:	d202      	bcs.n	80148a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801489a:	f04f 33ff 	mov.w	r3, #4294967295
 801489e:	e135      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80148a0:	7e7b      	ldrb	r3, [r7, #25]
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	8b7a      	ldrh	r2, [r7, #26]
 80148a6:	1ad3      	subs	r3, r2, r3
 80148a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	88db      	ldrh	r3, [r3, #6]
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7f5 fef9 	bl	800a6a8 <lwip_htons>
 80148b6:	4603      	mov	r3, r0
 80148b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148bc:	b29b      	uxth	r3, r3
 80148be:	00db      	lsls	r3, r3, #3
 80148c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80148c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ca:	2200      	movs	r2, #0
 80148cc:	701a      	strb	r2, [r3, #0]
 80148ce:	2200      	movs	r2, #0
 80148d0:	705a      	strb	r2, [r3, #1]
 80148d2:	2200      	movs	r2, #0
 80148d4:	709a      	strb	r2, [r3, #2]
 80148d6:	2200      	movs	r2, #0
 80148d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80148da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148dc:	8afa      	ldrh	r2, [r7, #22]
 80148de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80148e0:	8afa      	ldrh	r2, [r7, #22]
 80148e2:	8b7b      	ldrh	r3, [r7, #26]
 80148e4:	4413      	add	r3, r2
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80148ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ee:	88db      	ldrh	r3, [r3, #6]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	8afa      	ldrh	r2, [r7, #22]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d902      	bls.n	80148fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80148f8:	f04f 33ff 	mov.w	r3, #4294967295
 80148fc:	e106      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	627b      	str	r3, [r7, #36]	; 0x24
 8014904:	e068      	b.n	80149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490e:	889b      	ldrh	r3, [r3, #4]
 8014910:	b29a      	uxth	r2, r3
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	889b      	ldrh	r3, [r3, #4]
 8014916:	b29b      	uxth	r3, r3
 8014918:	429a      	cmp	r2, r3
 801491a:	d235      	bcs.n	8014988 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014920:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014924:	2b00      	cmp	r3, #0
 8014926:	d020      	beq.n	801496a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492a:	889b      	ldrh	r3, [r3, #4]
 801492c:	b29a      	uxth	r2, r3
 801492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014930:	88db      	ldrh	r3, [r3, #6]
 8014932:	b29b      	uxth	r3, r3
 8014934:	429a      	cmp	r2, r3
 8014936:	d307      	bcc.n	8014948 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493a:	88db      	ldrh	r3, [r3, #6]
 801493c:	b29a      	uxth	r2, r3
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	889b      	ldrh	r3, [r3, #4]
 8014942:	b29b      	uxth	r3, r3
 8014944:	429a      	cmp	r2, r3
 8014946:	d902      	bls.n	801494e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014948:	f04f 33ff 	mov.w	r3, #4294967295
 801494c:	e0de      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014950:	68ba      	ldr	r2, [r7, #8]
 8014952:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014956:	88db      	ldrh	r3, [r3, #6]
 8014958:	b29a      	uxth	r2, r3
 801495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495c:	889b      	ldrh	r3, [r3, #4]
 801495e:	b29b      	uxth	r3, r3
 8014960:	429a      	cmp	r2, r3
 8014962:	d03d      	beq.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014964:	2300      	movs	r3, #0
 8014966:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014968:	e03a      	b.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496c:	88db      	ldrh	r3, [r3, #6]
 801496e:	b29a      	uxth	r2, r3
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	889b      	ldrh	r3, [r3, #4]
 8014974:	b29b      	uxth	r3, r3
 8014976:	429a      	cmp	r2, r3
 8014978:	d902      	bls.n	8014980 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801497a:	f04f 33ff 	mov.w	r3, #4294967295
 801497e:	e0c5      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	68ba      	ldr	r2, [r7, #8]
 8014984:	605a      	str	r2, [r3, #4]
      break;
 8014986:	e02b      	b.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	889b      	ldrh	r3, [r3, #4]
 801498c:	b29a      	uxth	r2, r3
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	889b      	ldrh	r3, [r3, #4]
 8014992:	b29b      	uxth	r3, r3
 8014994:	429a      	cmp	r2, r3
 8014996:	d102      	bne.n	801499e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014998:	f04f 33ff 	mov.w	r3, #4294967295
 801499c:	e0b6      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a0:	889b      	ldrh	r3, [r3, #4]
 80149a2:	b29a      	uxth	r2, r3
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	88db      	ldrh	r3, [r3, #6]
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d202      	bcs.n	80149b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149ae:	f04f 33ff 	mov.w	r3, #4294967295
 80149b2:	e0ab      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80149b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d009      	beq.n	80149ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80149ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149bc:	88db      	ldrh	r3, [r3, #6]
 80149be:	b29a      	uxth	r2, r3
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	889b      	ldrh	r3, [r3, #4]
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d001      	beq.n	80149ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80149ca:	2300      	movs	r3, #0
 80149cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80149d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d193      	bne.n	8014906 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80149de:	e000      	b.n	80149e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80149e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d12d      	bne.n	8014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80149e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d01c      	beq.n	8014a28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80149ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f0:	88db      	ldrh	r3, [r3, #6]
 80149f2:	b29a      	uxth	r2, r3
 80149f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f6:	889b      	ldrh	r3, [r3, #4]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d906      	bls.n	8014a0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80149fe:	4b45      	ldr	r3, [pc, #276]	; (8014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014a04:	4944      	ldr	r1, [pc, #272]	; (8014b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014a06:	4845      	ldr	r0, [pc, #276]	; (8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a08:	f001 f8c8 	bl	8015b9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	68ba      	ldr	r2, [r7, #8]
 8014a10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a14:	88db      	ldrh	r3, [r3, #6]
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	889b      	ldrh	r3, [r3, #4]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d010      	beq.n	8014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	623b      	str	r3, [r7, #32]
 8014a26:	e00d      	b.n	8014a44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d006      	beq.n	8014a3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014a30:	4b38      	ldr	r3, [pc, #224]	; (8014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014a36:	493a      	ldr	r1, [pc, #232]	; (8014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014a38:	4838      	ldr	r0, [pc, #224]	; (8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a3a:	f001 f8af 	bl	8015b9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d105      	bne.n	8014a56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	7f9b      	ldrb	r3, [r3, #30]
 8014a4e:	f003 0301 	and.w	r3, r3, #1
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d059      	beq.n	8014b0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014a56:	6a3b      	ldr	r3, [r7, #32]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d04f      	beq.n	8014afc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d006      	beq.n	8014a72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	685b      	ldr	r3, [r3, #4]
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	889b      	ldrh	r3, [r3, #4]
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d002      	beq.n	8014a78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	623b      	str	r3, [r7, #32]
 8014a76:	e041      	b.n	8014afc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014a82:	e012      	b.n	8014aaa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a86:	685b      	ldr	r3, [r3, #4]
 8014a88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8c:	88db      	ldrh	r3, [r3, #6]
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a92:	889b      	ldrh	r3, [r3, #4]
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d002      	beq.n	8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	623b      	str	r3, [r7, #32]
            break;
 8014a9e:	e007      	b.n	8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d1e9      	bne.n	8014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014ab0:	6a3b      	ldr	r3, [r7, #32]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d022      	beq.n	8014afc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d106      	bne.n	8014acc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014abe:	4b15      	ldr	r3, [pc, #84]	; (8014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ac0:	f240 12df 	movw	r2, #479	; 0x1df
 8014ac4:	4917      	ldr	r1, [pc, #92]	; (8014b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014ac6:	4815      	ldr	r0, [pc, #84]	; (8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ac8:	f001 f868 	bl	8015b9c <iprintf>
          LWIP_ASSERT("sanity check",
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	685b      	ldr	r3, [r3, #4]
 8014ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d106      	bne.n	8014ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014ad8:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ada:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014ade:	4911      	ldr	r1, [pc, #68]	; (8014b24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014ae0:	480e      	ldr	r0, [pc, #56]	; (8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ae2:	f001 f85b 	bl	8015b9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d006      	beq.n	8014afc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014aee:	4b09      	ldr	r3, [pc, #36]	; (8014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014af0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014af4:	490c      	ldr	r1, [pc, #48]	; (8014b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014af6:	4809      	ldr	r0, [pc, #36]	; (8014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014af8:	f001 f850 	bl	8015b9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014afc:	6a3b      	ldr	r3, [r7, #32]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	bf14      	ite	ne
 8014b02:	2301      	movne	r3, #1
 8014b04:	2300      	moveq	r3, #0
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	e000      	b.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014b0a:	2300      	movs	r3, #0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3730      	adds	r7, #48	; 0x30
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	08019ffc 	.word	0x08019ffc
 8014b18:	0801a0e0 	.word	0x0801a0e0
 8014b1c:	0801a044 	.word	0x0801a044
 8014b20:	0801a100 	.word	0x0801a100
 8014b24:	0801a138 	.word	0x0801a138
 8014b28:	0801a148 	.word	0x0801a148

08014b2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08e      	sub	sp, #56	; 0x38
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	f003 030f 	and.w	r3, r3, #15
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b14      	cmp	r3, #20
 8014b4a:	f040 8171 	bne.w	8014e30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b50:	88db      	ldrh	r3, [r3, #6]
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f5 fda7 	bl	800a6a8 <lwip_htons>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	00db      	lsls	r3, r3, #3
 8014b64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b68:	885b      	ldrh	r3, [r3, #2]
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7f5 fd9b 	bl	800a6a8 <lwip_htons>
 8014b72:	4603      	mov	r3, r0
 8014b74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	f003 030f 	and.w	r3, r3, #15
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	f0c0 8150 	bcc.w	8014e34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b9c:	1ad3      	subs	r3, r2, r3
 8014b9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f7f7 fa01 	bl	800bfa8 <pbuf_clen>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014baa:	4b8c      	ldr	r3, [pc, #560]	; (8014ddc <ip4_reass+0x2b0>)
 8014bac:	881b      	ldrh	r3, [r3, #0]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	8c3b      	ldrh	r3, [r7, #32]
 8014bb2:	4413      	add	r3, r2
 8014bb4:	2b0a      	cmp	r3, #10
 8014bb6:	dd10      	ble.n	8014bda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014bb8:	8c3b      	ldrh	r3, [r7, #32]
 8014bba:	4619      	mov	r1, r3
 8014bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bbe:	f7ff fd81 	bl	80146c4 <ip_reass_remove_oldest_datagram>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f000 8137 	beq.w	8014e38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014bca:	4b84      	ldr	r3, [pc, #528]	; (8014ddc <ip4_reass+0x2b0>)
 8014bcc:	881b      	ldrh	r3, [r3, #0]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	8c3b      	ldrh	r3, [r7, #32]
 8014bd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014bd4:	2b0a      	cmp	r3, #10
 8014bd6:	f300 812f 	bgt.w	8014e38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014bda:	4b81      	ldr	r3, [pc, #516]	; (8014de0 <ip4_reass+0x2b4>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	633b      	str	r3, [r7, #48]	; 0x30
 8014be0:	e015      	b.n	8014c0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be4:	695a      	ldr	r2, [r3, #20]
 8014be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d10c      	bne.n	8014c08 <ip4_reass+0xdc>
 8014bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf0:	699a      	ldr	r2, [r3, #24]
 8014bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf4:	691b      	ldr	r3, [r3, #16]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d106      	bne.n	8014c08 <ip4_reass+0xdc>
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfc:	899a      	ldrh	r2, [r3, #12]
 8014bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c00:	889b      	ldrh	r3, [r3, #4]
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d006      	beq.n	8014c16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8014c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d1e6      	bne.n	8014be2 <ip4_reass+0xb6>
 8014c14:	e000      	b.n	8014c18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014c16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d109      	bne.n	8014c32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014c1e:	8c3b      	ldrh	r3, [r7, #32]
 8014c20:	4619      	mov	r1, r3
 8014c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c24:	f7ff fdb0 	bl	8014788 <ip_reass_enqueue_new_datagram>
 8014c28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d11c      	bne.n	8014c6a <ip4_reass+0x13e>
      goto nullreturn;
 8014c30:	e105      	b.n	8014e3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c34:	88db      	ldrh	r3, [r3, #6]
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7f5 fd35 	bl	800a6a8 <lwip_htons>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d110      	bne.n	8014c6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4a:	89db      	ldrh	r3, [r3, #14]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f5 fd2b 	bl	800a6a8 <lwip_htons>
 8014c52:	4603      	mov	r3, r0
 8014c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d006      	beq.n	8014c6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5e:	3308      	adds	r3, #8
 8014c60:	2214      	movs	r2, #20
 8014c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c64:	4618      	mov	r0, r3
 8014c66:	f000 fe89 	bl	801597c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c6c:	88db      	ldrh	r3, [r3, #6]
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	f003 0320 	and.w	r3, r3, #32
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	bf0c      	ite	eq
 8014c78:	2301      	moveq	r3, #1
 8014c7a:	2300      	movne	r3, #0
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00e      	beq.n	8014ca4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c8a:	4413      	add	r3, r2
 8014c8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014c8e:	8b7a      	ldrh	r2, [r7, #26]
 8014c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c92:	429a      	cmp	r2, r3
 8014c94:	f0c0 80a0 	bcc.w	8014dd8 <ip4_reass+0x2ac>
 8014c98:	8b7b      	ldrh	r3, [r7, #26]
 8014c9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	f200 809a 	bhi.w	8014dd8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014ca4:	69fa      	ldr	r2, [r7, #28]
 8014ca6:	6879      	ldr	r1, [r7, #4]
 8014ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014caa:	f7ff fdd5 	bl	8014858 <ip_reass_chain_frag_into_datagram_and_validate>
 8014cae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cb6:	f000 809b 	beq.w	8014df0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014cba:	4b48      	ldr	r3, [pc, #288]	; (8014ddc <ip4_reass+0x2b0>)
 8014cbc:	881a      	ldrh	r2, [r3, #0]
 8014cbe:	8c3b      	ldrh	r3, [r7, #32]
 8014cc0:	4413      	add	r3, r2
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	4b45      	ldr	r3, [pc, #276]	; (8014ddc <ip4_reass+0x2b0>)
 8014cc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014cc8:	69fb      	ldr	r3, [r7, #28]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00d      	beq.n	8014cea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014cce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014cd2:	4413      	add	r3, r2
 8014cd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd8:	8a7a      	ldrh	r2, [r7, #18]
 8014cda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cde:	7f9b      	ldrb	r3, [r3, #30]
 8014ce0:	f043 0301 	orr.w	r3, r3, #1
 8014ce4:	b2da      	uxtb	r2, r3
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d171      	bne.n	8014dd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf2:	8b9b      	ldrh	r3, [r3, #28]
 8014cf4:	3314      	adds	r3, #20
 8014cf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d0c:	3308      	adds	r3, #8
 8014d0e:	2214      	movs	r2, #20
 8014d10:	4619      	mov	r1, r3
 8014d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d14:	f000 fe32 	bl	801597c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014d18:	8a3b      	ldrh	r3, [r7, #16]
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7f5 fcc4 	bl	800a6a8 <lwip_htons>
 8014d20:	4603      	mov	r3, r0
 8014d22:	461a      	mov	r2, r3
 8014d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	719a      	strb	r2, [r3, #6]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d34:	2200      	movs	r2, #0
 8014d36:	729a      	strb	r2, [r3, #10]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d3e:	685b      	ldr	r3, [r3, #4]
 8014d40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014d42:	e00d      	b.n	8014d60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014d4a:	2114      	movs	r1, #20
 8014d4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014d4e:	f7f7 f817 	bl	800bd80 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014d52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7f7 f967 	bl	800c028 <pbuf_cat>
      r = iprh->next_pbuf;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1ee      	bne.n	8014d44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014d66:	4b1e      	ldr	r3, [pc, #120]	; (8014de0 <ip4_reass+0x2b4>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d102      	bne.n	8014d76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014d70:	2300      	movs	r3, #0
 8014d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d74:	e010      	b.n	8014d98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d76:	4b1a      	ldr	r3, [pc, #104]	; (8014de0 <ip4_reass+0x2b4>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d7c:	e007      	b.n	8014d8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d006      	beq.n	8014d96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d1f4      	bne.n	8014d7e <ip4_reass+0x252>
 8014d94:	e000      	b.n	8014d98 <ip4_reass+0x26c>
          break;
 8014d96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d9c:	f7ff fd2e 	bl	80147fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7f7 f901 	bl	800bfa8 <pbuf_clen>
 8014da6:	4603      	mov	r3, r0
 8014da8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014daa:	4b0c      	ldr	r3, [pc, #48]	; (8014ddc <ip4_reass+0x2b0>)
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	8c3a      	ldrh	r2, [r7, #32]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d906      	bls.n	8014dc2 <ip4_reass+0x296>
 8014db4:	4b0b      	ldr	r3, [pc, #44]	; (8014de4 <ip4_reass+0x2b8>)
 8014db6:	f240 229b 	movw	r2, #667	; 0x29b
 8014dba:	490b      	ldr	r1, [pc, #44]	; (8014de8 <ip4_reass+0x2bc>)
 8014dbc:	480b      	ldr	r0, [pc, #44]	; (8014dec <ip4_reass+0x2c0>)
 8014dbe:	f000 feed 	bl	8015b9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014dc2:	4b06      	ldr	r3, [pc, #24]	; (8014ddc <ip4_reass+0x2b0>)
 8014dc4:	881a      	ldrh	r2, [r3, #0]
 8014dc6:	8c3b      	ldrh	r3, [r7, #32]
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	4b03      	ldr	r3, [pc, #12]	; (8014ddc <ip4_reass+0x2b0>)
 8014dce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	e038      	b.n	8014e46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	e036      	b.n	8014e46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014dd8:	bf00      	nop
 8014dda:	e00a      	b.n	8014df2 <ip4_reass+0x2c6>
 8014ddc:	2000f020 	.word	0x2000f020
 8014de0:	2000f01c 	.word	0x2000f01c
 8014de4:	08019ffc 	.word	0x08019ffc
 8014de8:	0801a16c 	.word	0x0801a16c
 8014dec:	0801a044 	.word	0x0801a044
    goto nullreturn_ipr;
 8014df0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d106      	bne.n	8014e06 <ip4_reass+0x2da>
 8014df8:	4b15      	ldr	r3, [pc, #84]	; (8014e50 <ip4_reass+0x324>)
 8014dfa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014dfe:	4915      	ldr	r1, [pc, #84]	; (8014e54 <ip4_reass+0x328>)
 8014e00:	4815      	ldr	r0, [pc, #84]	; (8014e58 <ip4_reass+0x32c>)
 8014e02:	f000 fecb 	bl	8015b9c <iprintf>
  if (ipr->p == NULL) {
 8014e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e08:	685b      	ldr	r3, [r3, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d116      	bne.n	8014e3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014e0e:	4b13      	ldr	r3, [pc, #76]	; (8014e5c <ip4_reass+0x330>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d006      	beq.n	8014e26 <ip4_reass+0x2fa>
 8014e18:	4b0d      	ldr	r3, [pc, #52]	; (8014e50 <ip4_reass+0x324>)
 8014e1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e1e:	4910      	ldr	r1, [pc, #64]	; (8014e60 <ip4_reass+0x334>)
 8014e20:	480d      	ldr	r0, [pc, #52]	; (8014e58 <ip4_reass+0x32c>)
 8014e22:	f000 febb 	bl	8015b9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014e26:	2100      	movs	r1, #0
 8014e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e2a:	f7ff fce7 	bl	80147fc <ip_reass_dequeue_datagram>
 8014e2e:	e006      	b.n	8014e3e <ip4_reass+0x312>
    goto nullreturn;
 8014e30:	bf00      	nop
 8014e32:	e004      	b.n	8014e3e <ip4_reass+0x312>
    goto nullreturn;
 8014e34:	bf00      	nop
 8014e36:	e002      	b.n	8014e3e <ip4_reass+0x312>
      goto nullreturn;
 8014e38:	bf00      	nop
 8014e3a:	e000      	b.n	8014e3e <ip4_reass+0x312>
  }

nullreturn:
 8014e3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7f7 f824 	bl	800be8c <pbuf_free>
  return NULL;
 8014e44:	2300      	movs	r3, #0
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3738      	adds	r7, #56	; 0x38
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	08019ffc 	.word	0x08019ffc
 8014e54:	0801a188 	.word	0x0801a188
 8014e58:	0801a044 	.word	0x0801a044
 8014e5c:	2000f01c 	.word	0x2000f01c
 8014e60:	0801a194 	.word	0x0801a194

08014e64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014e68:	2005      	movs	r0, #5
 8014e6a:	f7f6 f8f5 	bl	800b058 <memp_malloc>
 8014e6e:	4603      	mov	r3, r0
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d106      	bne.n	8014e90 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014e82:	4b07      	ldr	r3, [pc, #28]	; (8014ea0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014e84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014e88:	4906      	ldr	r1, [pc, #24]	; (8014ea4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014e8a:	4807      	ldr	r0, [pc, #28]	; (8014ea8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014e8c:	f000 fe86 	bl	8015b9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014e90:	6879      	ldr	r1, [r7, #4]
 8014e92:	2005      	movs	r0, #5
 8014e94:	f7f6 f956 	bl	800b144 <memp_free>
}
 8014e98:	bf00      	nop
 8014e9a:	3708      	adds	r7, #8
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	08019ffc 	.word	0x08019ffc
 8014ea4:	0801a1b4 	.word	0x0801a1b4
 8014ea8:	0801a044 	.word	0x0801a044

08014eac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d106      	bne.n	8014ecc <ipfrag_free_pbuf_custom+0x20>
 8014ebe:	4b11      	ldr	r3, [pc, #68]	; (8014f04 <ipfrag_free_pbuf_custom+0x58>)
 8014ec0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014ec4:	4910      	ldr	r1, [pc, #64]	; (8014f08 <ipfrag_free_pbuf_custom+0x5c>)
 8014ec6:	4811      	ldr	r0, [pc, #68]	; (8014f0c <ipfrag_free_pbuf_custom+0x60>)
 8014ec8:	f000 fe68 	bl	8015b9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014ecc:	68fa      	ldr	r2, [r7, #12]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d006      	beq.n	8014ee2 <ipfrag_free_pbuf_custom+0x36>
 8014ed4:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <ipfrag_free_pbuf_custom+0x58>)
 8014ed6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014eda:	490d      	ldr	r1, [pc, #52]	; (8014f10 <ipfrag_free_pbuf_custom+0x64>)
 8014edc:	480b      	ldr	r0, [pc, #44]	; (8014f0c <ipfrag_free_pbuf_custom+0x60>)
 8014ede:	f000 fe5d 	bl	8015b9c <iprintf>
  if (pcr->original != NULL) {
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	695b      	ldr	r3, [r3, #20]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d004      	beq.n	8014ef4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	695b      	ldr	r3, [r3, #20]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7f6 ffcc 	bl	800be8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f7ff ffbd 	bl	8014e74 <ip_frag_free_pbuf_custom_ref>
}
 8014efa:	bf00      	nop
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	08019ffc 	.word	0x08019ffc
 8014f08:	0801a1c0 	.word	0x0801a1c0
 8014f0c:	0801a044 	.word	0x0801a044
 8014f10:	0801a1cc 	.word	0x0801a1cc

08014f14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b094      	sub	sp, #80	; 0x50
 8014f18:	af02      	add	r7, sp, #8
 8014f1a:	60f8      	str	r0, [r7, #12]
 8014f1c:	60b9      	str	r1, [r7, #8]
 8014f1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014f20:	2300      	movs	r3, #0
 8014f22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f2a:	3b14      	subs	r3, #20
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	da00      	bge.n	8014f32 <ip4_frag+0x1e>
 8014f30:	3307      	adds	r3, #7
 8014f32:	10db      	asrs	r3, r3, #3
 8014f34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014f36:	2314      	movs	r3, #20
 8014f38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	f003 030f 	and.w	r3, r3, #15
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	009b      	lsls	r3, r3, #2
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	2b14      	cmp	r3, #20
 8014f54:	d002      	beq.n	8014f5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014f56:	f06f 0305 	mvn.w	r3, #5
 8014f5a:	e110      	b.n	801517e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	895b      	ldrh	r3, [r3, #10]
 8014f60:	2b13      	cmp	r3, #19
 8014f62:	d809      	bhi.n	8014f78 <ip4_frag+0x64>
 8014f64:	4b88      	ldr	r3, [pc, #544]	; (8015188 <ip4_frag+0x274>)
 8014f66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014f6a:	4988      	ldr	r1, [pc, #544]	; (801518c <ip4_frag+0x278>)
 8014f6c:	4888      	ldr	r0, [pc, #544]	; (8015190 <ip4_frag+0x27c>)
 8014f6e:	f000 fe15 	bl	8015b9c <iprintf>
 8014f72:	f06f 0305 	mvn.w	r3, #5
 8014f76:	e102      	b.n	801517e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7a:	88db      	ldrh	r3, [r3, #6]
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7f5 fb92 	bl	800a6a8 <lwip_htons>
 8014f84:	4603      	mov	r3, r0
 8014f86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014f88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014f92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014f98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	891b      	ldrh	r3, [r3, #8]
 8014f9e:	3b14      	subs	r3, #20
 8014fa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014fa4:	e0e1      	b.n	801516a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014fa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014fa8:	00db      	lsls	r3, r3, #3
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	bf28      	it	cs
 8014fb4:	4613      	movcs	r3, r2
 8014fb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014fb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fbc:	2114      	movs	r1, #20
 8014fbe:	200e      	movs	r0, #14
 8014fc0:	f7f6 fc80 	bl	800b8c4 <pbuf_alloc>
 8014fc4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f000 80d5 	beq.w	8015178 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd0:	895b      	ldrh	r3, [r3, #10]
 8014fd2:	2b13      	cmp	r3, #19
 8014fd4:	d806      	bhi.n	8014fe4 <ip4_frag+0xd0>
 8014fd6:	4b6c      	ldr	r3, [pc, #432]	; (8015188 <ip4_frag+0x274>)
 8014fd8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014fdc:	496d      	ldr	r1, [pc, #436]	; (8015194 <ip4_frag+0x280>)
 8014fde:	486c      	ldr	r0, [pc, #432]	; (8015190 <ip4_frag+0x27c>)
 8014fe0:	f000 fddc 	bl	8015b9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	2214      	movs	r2, #20
 8014fea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014fec:	4618      	mov	r0, r3
 8014fee:	f000 fcc5 	bl	801597c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ffa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014ffe:	e064      	b.n	80150ca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	895a      	ldrh	r2, [r3, #10]
 8015004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015006:	1ad3      	subs	r3, r2, r3
 8015008:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	895b      	ldrh	r3, [r3, #10]
 801500e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015010:	429a      	cmp	r2, r3
 8015012:	d906      	bls.n	8015022 <ip4_frag+0x10e>
 8015014:	4b5c      	ldr	r3, [pc, #368]	; (8015188 <ip4_frag+0x274>)
 8015016:	f240 322d 	movw	r2, #813	; 0x32d
 801501a:	495f      	ldr	r1, [pc, #380]	; (8015198 <ip4_frag+0x284>)
 801501c:	485c      	ldr	r0, [pc, #368]	; (8015190 <ip4_frag+0x27c>)
 801501e:	f000 fdbd 	bl	8015b9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015022:	8bfa      	ldrh	r2, [r7, #30]
 8015024:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015028:	4293      	cmp	r3, r2
 801502a:	bf28      	it	cs
 801502c:	4613      	movcs	r3, r2
 801502e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015036:	2b00      	cmp	r3, #0
 8015038:	d105      	bne.n	8015046 <ip4_frag+0x132>
        poff = 0;
 801503a:	2300      	movs	r3, #0
 801503c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	60fb      	str	r3, [r7, #12]
        continue;
 8015044:	e041      	b.n	80150ca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015046:	f7ff ff0d 	bl	8014e64 <ip_frag_alloc_pbuf_custom_ref>
 801504a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d103      	bne.n	801505a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015054:	f7f6 ff1a 	bl	800be8c <pbuf_free>
        goto memerr;
 8015058:	e08f      	b.n	801517a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801505a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015062:	4413      	add	r3, r2
 8015064:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015068:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801506c:	9201      	str	r2, [sp, #4]
 801506e:	9300      	str	r3, [sp, #0]
 8015070:	4603      	mov	r3, r0
 8015072:	2241      	movs	r2, #65	; 0x41
 8015074:	2000      	movs	r0, #0
 8015076:	f7f6 fd4f 	bl	800bb18 <pbuf_alloced_custom>
 801507a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d106      	bne.n	8015090 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015082:	69b8      	ldr	r0, [r7, #24]
 8015084:	f7ff fef6 	bl	8014e74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801508a:	f7f6 feff 	bl	800be8c <pbuf_free>
        goto memerr;
 801508e:	e074      	b.n	801517a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f7f6 ffa1 	bl	800bfd8 <pbuf_ref>
      pcr->original = p;
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	4a3f      	ldr	r2, [pc, #252]	; (801519c <ip4_frag+0x288>)
 80150a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80150a2:	6979      	ldr	r1, [r7, #20]
 80150a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150a6:	f7f6 ffbf 	bl	800c028 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80150aa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80150ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80150b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d004      	beq.n	80150ca <ip4_frag+0x1b6>
        poff = 0;
 80150c0:	2300      	movs	r3, #0
 80150c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80150ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d196      	bne.n	8015000 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80150d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80150d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80150d8:	4413      	add	r3, r2
 80150da:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80150e0:	f1a3 0213 	sub.w	r2, r3, #19
 80150e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150e8:	429a      	cmp	r2, r3
 80150ea:	bfcc      	ite	gt
 80150ec:	2301      	movgt	r3, #1
 80150ee:	2300      	movle	r3, #0
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80150f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80150f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80150fe:	6a3b      	ldr	r3, [r7, #32]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d002      	beq.n	801510a <ip4_frag+0x1f6>
 8015104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015106:	2b00      	cmp	r3, #0
 8015108:	d003      	beq.n	8015112 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801510a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801510c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015110:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015114:	4618      	mov	r0, r3
 8015116:	f7f5 fac7 	bl	800a6a8 <lwip_htons>
 801511a:	4603      	mov	r3, r0
 801511c:	461a      	mov	r2, r3
 801511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015120:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015124:	3314      	adds	r3, #20
 8015126:	b29b      	uxth	r3, r3
 8015128:	4618      	mov	r0, r3
 801512a:	f7f5 fabd 	bl	800a6a8 <lwip_htons>
 801512e:	4603      	mov	r3, r0
 8015130:	461a      	mov	r2, r3
 8015132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015134:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015138:	2200      	movs	r2, #0
 801513a:	729a      	strb	r2, [r3, #10]
 801513c:	2200      	movs	r2, #0
 801513e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	695b      	ldr	r3, [r3, #20]
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015148:	68b8      	ldr	r0, [r7, #8]
 801514a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801514c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801514e:	f7f6 fe9d 	bl	800be8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015156:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801515e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015164:	4413      	add	r3, r2
 8015166:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801516a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801516e:	2b00      	cmp	r3, #0
 8015170:	f47f af19 	bne.w	8014fa6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	e002      	b.n	801517e <ip4_frag+0x26a>
      goto memerr;
 8015178:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801517a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801517e:	4618      	mov	r0, r3
 8015180:	3748      	adds	r7, #72	; 0x48
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
 8015186:	bf00      	nop
 8015188:	08019ffc 	.word	0x08019ffc
 801518c:	0801a1d8 	.word	0x0801a1d8
 8015190:	0801a044 	.word	0x0801a044
 8015194:	0801a1f4 	.word	0x0801a1f4
 8015198:	0801a214 	.word	0x0801a214
 801519c:	08014ead 	.word	0x08014ead

080151a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b086      	sub	sp, #24
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80151aa:	230e      	movs	r3, #14
 80151ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	895b      	ldrh	r3, [r3, #10]
 80151b2:	2b0e      	cmp	r3, #14
 80151b4:	d96e      	bls.n	8015294 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	7bdb      	ldrb	r3, [r3, #15]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d106      	bne.n	80151cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151c4:	3301      	adds	r3, #1
 80151c6:	b2da      	uxtb	r2, r3
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	7b1a      	ldrb	r2, [r3, #12]
 80151d6:	7b5b      	ldrb	r3, [r3, #13]
 80151d8:	021b      	lsls	r3, r3, #8
 80151da:	4313      	orrs	r3, r2
 80151dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	f003 0301 	and.w	r3, r3, #1
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d023      	beq.n	8015232 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	781b      	ldrb	r3, [r3, #0]
 80151ee:	2b01      	cmp	r3, #1
 80151f0:	d10f      	bne.n	8015212 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	785b      	ldrb	r3, [r3, #1]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d11b      	bne.n	8015232 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80151fe:	2b5e      	cmp	r3, #94	; 0x5e
 8015200:	d117      	bne.n	8015232 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	7b5b      	ldrb	r3, [r3, #13]
 8015206:	f043 0310 	orr.w	r3, r3, #16
 801520a:	b2da      	uxtb	r2, r3
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	735a      	strb	r2, [r3, #13]
 8015210:	e00f      	b.n	8015232 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	2206      	movs	r2, #6
 8015216:	4928      	ldr	r1, [pc, #160]	; (80152b8 <ethernet_input+0x118>)
 8015218:	4618      	mov	r0, r3
 801521a:	f000 fb9f 	bl	801595c <memcmp>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d106      	bne.n	8015232 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	7b5b      	ldrb	r3, [r3, #13]
 8015228:	f043 0308 	orr.w	r3, r3, #8
 801522c:	b2da      	uxtb	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015232:	89fb      	ldrh	r3, [r7, #14]
 8015234:	2b08      	cmp	r3, #8
 8015236:	d003      	beq.n	8015240 <ethernet_input+0xa0>
 8015238:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801523c:	d014      	beq.n	8015268 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801523e:	e032      	b.n	80152a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015246:	f003 0308 	and.w	r3, r3, #8
 801524a:	2b00      	cmp	r3, #0
 801524c:	d024      	beq.n	8015298 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801524e:	8afb      	ldrh	r3, [r7, #22]
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7f6 fd94 	bl	800bd80 <pbuf_remove_header>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d11e      	bne.n	801529c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801525e:	6839      	ldr	r1, [r7, #0]
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f7fe ff21 	bl	80140a8 <ip4_input>
      break;
 8015266:	e013      	b.n	8015290 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801526e:	f003 0308 	and.w	r3, r3, #8
 8015272:	2b00      	cmp	r3, #0
 8015274:	d014      	beq.n	80152a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015276:	8afb      	ldrh	r3, [r7, #22]
 8015278:	4619      	mov	r1, r3
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7f6 fd80 	bl	800bd80 <pbuf_remove_header>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d10e      	bne.n	80152a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f7fe f8c1 	bl	8013410 <etharp_input>
      break;
 801528e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015290:	2300      	movs	r3, #0
 8015292:	e00c      	b.n	80152ae <ethernet_input+0x10e>
    goto free_and_return;
 8015294:	bf00      	nop
 8015296:	e006      	b.n	80152a6 <ethernet_input+0x106>
        goto free_and_return;
 8015298:	bf00      	nop
 801529a:	e004      	b.n	80152a6 <ethernet_input+0x106>
        goto free_and_return;
 801529c:	bf00      	nop
 801529e:	e002      	b.n	80152a6 <ethernet_input+0x106>
        goto free_and_return;
 80152a0:	bf00      	nop
 80152a2:	e000      	b.n	80152a6 <ethernet_input+0x106>
        goto free_and_return;
 80152a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f7f6 fdf0 	bl	800be8c <pbuf_free>
  return ERR_OK;
 80152ac:	2300      	movs	r3, #0
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	0801a3f4 	.word	0x0801a3f4

080152bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	60b9      	str	r1, [r7, #8]
 80152c6:	607a      	str	r2, [r7, #4]
 80152c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80152ca:	8c3b      	ldrh	r3, [r7, #32]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7f5 f9eb 	bl	800a6a8 <lwip_htons>
 80152d2:	4603      	mov	r3, r0
 80152d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80152d6:	210e      	movs	r1, #14
 80152d8:	68b8      	ldr	r0, [r7, #8]
 80152da:	f7f6 fd41 	bl	800bd60 <pbuf_add_header>
 80152de:	4603      	mov	r3, r0
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d125      	bne.n	8015330 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	8afa      	ldrh	r2, [r7, #22]
 80152ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	2206      	movs	r2, #6
 80152f4:	6839      	ldr	r1, [r7, #0]
 80152f6:	4618      	mov	r0, r3
 80152f8:	f000 fb40 	bl	801597c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	3306      	adds	r3, #6
 8015300:	2206      	movs	r2, #6
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	4618      	mov	r0, r3
 8015306:	f000 fb39 	bl	801597c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015310:	2b06      	cmp	r3, #6
 8015312:	d006      	beq.n	8015322 <ethernet_output+0x66>
 8015314:	4b0a      	ldr	r3, [pc, #40]	; (8015340 <ethernet_output+0x84>)
 8015316:	f44f 7299 	mov.w	r2, #306	; 0x132
 801531a:	490a      	ldr	r1, [pc, #40]	; (8015344 <ethernet_output+0x88>)
 801531c:	480a      	ldr	r0, [pc, #40]	; (8015348 <ethernet_output+0x8c>)
 801531e:	f000 fc3d 	bl	8015b9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	699b      	ldr	r3, [r3, #24]
 8015326:	68b9      	ldr	r1, [r7, #8]
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	4798      	blx	r3
 801532c:	4603      	mov	r3, r0
 801532e:	e002      	b.n	8015336 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015330:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015332:	f06f 0301 	mvn.w	r3, #1
}
 8015336:	4618      	mov	r0, r3
 8015338:	3718      	adds	r7, #24
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	0801a224 	.word	0x0801a224
 8015344:	0801a25c 	.word	0x0801a25c
 8015348:	0801a290 	.word	0x0801a290

0801534c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b086      	sub	sp, #24
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	60bb      	str	r3, [r7, #8]
 801535a:	2304      	movs	r3, #4
 801535c:	60fb      	str	r3, [r7, #12]
 801535e:	2300      	movs	r3, #0
 8015360:	613b      	str	r3, [r7, #16]
 8015362:	2300      	movs	r3, #0
 8015364:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015366:	f107 0308 	add.w	r3, r7, #8
 801536a:	2100      	movs	r1, #0
 801536c:	4618      	mov	r0, r3
 801536e:	f7f0 f880 	bl	8005472 <osMessageCreate>
 8015372:	4602      	mov	r2, r0
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d102      	bne.n	8015386 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015380:	f04f 33ff 	mov.w	r3, #4294967295
 8015384:	e000      	b.n	8015388 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015386:	2300      	movs	r3, #0
}
 8015388:	4618      	mov	r0, r3
 801538a:	3718      	adds	r7, #24
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	4618      	mov	r0, r3
 801539e:	f7f0 f945 	bl	800562c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7f0 f956 	bl	8005658 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80153ac:	bf00      	nop
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	2200      	movs	r2, #0
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f0 f87c 	bl	80054c4 <osMessagePut>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d102      	bne.n	80153d8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80153d2:	2300      	movs	r3, #0
 80153d4:	73fb      	strb	r3, [r7, #15]
 80153d6:	e001      	b.n	80153dc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80153d8:	23ff      	movs	r3, #255	; 0xff
 80153da:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80153dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3710      	adds	r7, #16
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b08c      	sub	sp, #48	; 0x30
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	61f8      	str	r0, [r7, #28]
 80153f0:	61b9      	str	r1, [r7, #24]
 80153f2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80153f4:	f7ef fe68 	bl	80050c8 <osKernelSysTick>
 80153f8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80153fa:	697b      	ldr	r3, [r7, #20]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d017      	beq.n	8015430 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	6819      	ldr	r1, [r3, #0]
 8015404:	f107 0320 	add.w	r3, r7, #32
 8015408:	697a      	ldr	r2, [r7, #20]
 801540a:	4618      	mov	r0, r3
 801540c:	f7f0 f89a 	bl	8005544 <osMessageGet>

    if(event.status == osEventMessage)
 8015410:	6a3b      	ldr	r3, [r7, #32]
 8015412:	2b10      	cmp	r3, #16
 8015414:	d109      	bne.n	801542a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015418:	461a      	mov	r2, r3
 801541a:	69bb      	ldr	r3, [r7, #24]
 801541c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801541e:	f7ef fe53 	bl	80050c8 <osKernelSysTick>
 8015422:	4602      	mov	r2, r0
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	1ad3      	subs	r3, r2, r3
 8015428:	e019      	b.n	801545e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801542a:	f04f 33ff 	mov.w	r3, #4294967295
 801542e:	e016      	b.n	801545e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	6819      	ldr	r1, [r3, #0]
 8015434:	463b      	mov	r3, r7
 8015436:	f04f 32ff 	mov.w	r2, #4294967295
 801543a:	4618      	mov	r0, r3
 801543c:	f7f0 f882 	bl	8005544 <osMessageGet>
 8015440:	f107 0320 	add.w	r3, r7, #32
 8015444:	463a      	mov	r2, r7
 8015446:	ca07      	ldmia	r2, {r0, r1, r2}
 8015448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	461a      	mov	r2, r3
 8015450:	69bb      	ldr	r3, [r7, #24]
 8015452:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015454:	f7ef fe38 	bl	80050c8 <osKernelSysTick>
 8015458:	4602      	mov	r2, r0
 801545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801545e:	4618      	mov	r0, r3
 8015460:	3730      	adds	r7, #48	; 0x30
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015466:	b580      	push	{r7, lr}
 8015468:	b086      	sub	sp, #24
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6819      	ldr	r1, [r3, #0]
 8015474:	f107 030c 	add.w	r3, r7, #12
 8015478:	2200      	movs	r2, #0
 801547a:	4618      	mov	r0, r3
 801547c:	f7f0 f862 	bl	8005544 <osMessageGet>

  if(event.status == osEventMessage)
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2b10      	cmp	r3, #16
 8015484:	d105      	bne.n	8015492 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	461a      	mov	r2, r3
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801548e:	2300      	movs	r3, #0
 8015490:	e001      	b.n	8015496 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015492:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801549e:	b480      	push	{r7}
 80154a0:	b083      	sub	sp, #12
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d101      	bne.n	80154b2 <sys_mbox_valid+0x14>
    return 0;
 80154ae:	2300      	movs	r3, #0
 80154b0:	e000      	b.n	80154b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80154b2:	2301      	movs	r3, #1
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr

080154c0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80154c0:	b480      	push	{r7}
 80154c2:	b083      	sub	sp, #12
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2200      	movs	r2, #0
 80154cc:	601a      	str	r2, [r3, #0]
}
 80154ce:	bf00      	nop
 80154d0:	370c      	adds	r7, #12
 80154d2:	46bd      	mov	sp, r7
 80154d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d8:	4770      	bx	lr

080154da <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b084      	sub	sp, #16
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
 80154e2:	460b      	mov	r3, r1
 80154e4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80154e6:	2300      	movs	r3, #0
 80154e8:	60bb      	str	r3, [r7, #8]
 80154ea:	2300      	movs	r3, #0
 80154ec:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80154ee:	f107 0308 	add.w	r3, r7, #8
 80154f2:	2101      	movs	r1, #1
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7ef fef3 	bl	80052e0 <osSemaphoreCreate>
 80154fa:	4602      	mov	r2, r0
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d102      	bne.n	801550e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015508:	f04f 33ff 	mov.w	r3, #4294967295
 801550c:	e009      	b.n	8015522 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801550e:	78fb      	ldrb	r3, [r7, #3]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d105      	bne.n	8015520 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2100      	movs	r1, #0
 801551a:	4618      	mov	r0, r3
 801551c:	f7ef ff12 	bl	8005344 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015520:	2300      	movs	r3, #0
}
 8015522:	4618      	mov	r0, r3
 8015524:	3710      	adds	r7, #16
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801552a:	b580      	push	{r7, lr}
 801552c:	b084      	sub	sp, #16
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
 8015532:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015534:	f7ef fdc8 	bl	80050c8 <osKernelSysTick>
 8015538:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d011      	beq.n	8015564 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	6839      	ldr	r1, [r7, #0]
 8015546:	4618      	mov	r0, r3
 8015548:	f7ef fefc 	bl	8005344 <osSemaphoreWait>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d105      	bne.n	801555e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015552:	f7ef fdb9 	bl	80050c8 <osKernelSysTick>
 8015556:	4602      	mov	r2, r0
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	e012      	b.n	8015584 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801555e:	f04f 33ff 	mov.w	r3, #4294967295
 8015562:	e00f      	b.n	8015584 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015564:	bf00      	nop
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f04f 31ff 	mov.w	r1, #4294967295
 801556e:	4618      	mov	r0, r3
 8015570:	f7ef fee8 	bl	8005344 <osSemaphoreWait>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1f5      	bne.n	8015566 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801557a:	f7ef fda5 	bl	80050c8 <osKernelSysTick>
 801557e:	4602      	mov	r2, r0
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4618      	mov	r0, r3
 801559a:	f7ef ff21 	bl	80053e0 <osSemaphoreRelease>
}
 801559e:	bf00      	nop
 80155a0:	3708      	adds	r7, #8
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b082      	sub	sp, #8
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7ef ff4a 	bl	800544c <osSemaphoreDelete>
}
 80155b8:	bf00      	nop
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80155c0:	b480      	push	{r7}
 80155c2:	b083      	sub	sp, #12
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d101      	bne.n	80155d4 <sys_sem_valid+0x14>
    return 0;
 80155d0:	2300      	movs	r3, #0
 80155d2:	e000      	b.n	80155d6 <sys_sem_valid+0x16>
  else
    return 1;
 80155d4:	2301      	movs	r3, #1
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80155e2:	b480      	push	{r7}
 80155e4:	b083      	sub	sp, #12
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2200      	movs	r2, #0
 80155ee:	601a      	str	r2, [r3, #0]
}
 80155f0:	bf00      	nop
 80155f2:	370c      	adds	r7, #12
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015600:	4803      	ldr	r0, [pc, #12]	; (8015610 <sys_init+0x14>)
 8015602:	f7ef fdd1 	bl	80051a8 <osMutexCreate>
 8015606:	4603      	mov	r3, r0
 8015608:	4a02      	ldr	r2, [pc, #8]	; (8015614 <sys_init+0x18>)
 801560a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801560c:	bf00      	nop
 801560e:	bd80      	pop	{r7, pc}
 8015610:	0801a404 	.word	0x0801a404
 8015614:	2000f024 	.word	0x2000f024

08015618 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015618:	b580      	push	{r7, lr}
 801561a:	b084      	sub	sp, #16
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015620:	2300      	movs	r3, #0
 8015622:	60bb      	str	r3, [r7, #8]
 8015624:	2300      	movs	r3, #0
 8015626:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015628:	f107 0308 	add.w	r3, r7, #8
 801562c:	4618      	mov	r0, r3
 801562e:	f7ef fdbb 	bl	80051a8 <osMutexCreate>
 8015632:	4602      	mov	r2, r0
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d102      	bne.n	8015646 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015640:	f04f 33ff 	mov.w	r3, #4294967295
 8015644:	e000      	b.n	8015648 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015646:	2300      	movs	r3, #0
}
 8015648:	4618      	mov	r0, r3
 801564a:	3710      	adds	r7, #16
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f04f 31ff 	mov.w	r1, #4294967295
 8015660:	4618      	mov	r0, r3
 8015662:	f7ef fdb9 	bl	80051d8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015666:	bf00      	nop
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b082      	sub	sp, #8
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4618      	mov	r0, r3
 801567c:	f7ef fdfa 	bl	8005274 <osMutexRelease>
}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b08c      	sub	sp, #48	; 0x30
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015696:	f107 0314 	add.w	r3, r7, #20
 801569a:	2200      	movs	r2, #0
 801569c:	601a      	str	r2, [r3, #0]
 801569e:	605a      	str	r2, [r3, #4]
 80156a0:	609a      	str	r2, [r3, #8]
 80156a2:	60da      	str	r2, [r3, #12]
 80156a4:	611a      	str	r2, [r3, #16]
 80156a6:	615a      	str	r2, [r3, #20]
 80156a8:	619a      	str	r2, [r3, #24]
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	617b      	str	r3, [r7, #20]
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	61bb      	str	r3, [r7, #24]
 80156b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156b4:	b21b      	sxth	r3, r3
 80156b6:	83bb      	strh	r3, [r7, #28]
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80156bc:	f107 0314 	add.w	r3, r7, #20
 80156c0:	6879      	ldr	r1, [r7, #4]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7ef fd10 	bl	80050e8 <osThreadCreate>
 80156c8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3730      	adds	r7, #48	; 0x30
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
	...

080156d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80156d8:	4b04      	ldr	r3, [pc, #16]	; (80156ec <sys_arch_protect+0x18>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f04f 31ff 	mov.w	r1, #4294967295
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ef fd79 	bl	80051d8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80156e6:	2301      	movs	r3, #1
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	2000f024 	.word	0x2000f024

080156f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80156f8:	4b04      	ldr	r3, [pc, #16]	; (801570c <sys_arch_unprotect+0x1c>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7ef fdb9 	bl	8005274 <osMutexRelease>
}
 8015702:	bf00      	nop
 8015704:	3708      	adds	r7, #8
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}
 801570a:	bf00      	nop
 801570c:	2000f024 	.word	0x2000f024

08015710 <std>:
 8015710:	2300      	movs	r3, #0
 8015712:	b510      	push	{r4, lr}
 8015714:	4604      	mov	r4, r0
 8015716:	e9c0 3300 	strd	r3, r3, [r0]
 801571a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801571e:	6083      	str	r3, [r0, #8]
 8015720:	8181      	strh	r1, [r0, #12]
 8015722:	6643      	str	r3, [r0, #100]	; 0x64
 8015724:	81c2      	strh	r2, [r0, #14]
 8015726:	6183      	str	r3, [r0, #24]
 8015728:	4619      	mov	r1, r3
 801572a:	2208      	movs	r2, #8
 801572c:	305c      	adds	r0, #92	; 0x5c
 801572e:	f000 f94d 	bl	80159cc <memset>
 8015732:	4b05      	ldr	r3, [pc, #20]	; (8015748 <std+0x38>)
 8015734:	6263      	str	r3, [r4, #36]	; 0x24
 8015736:	4b05      	ldr	r3, [pc, #20]	; (801574c <std+0x3c>)
 8015738:	62a3      	str	r3, [r4, #40]	; 0x28
 801573a:	4b05      	ldr	r3, [pc, #20]	; (8015750 <std+0x40>)
 801573c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801573e:	4b05      	ldr	r3, [pc, #20]	; (8015754 <std+0x44>)
 8015740:	6224      	str	r4, [r4, #32]
 8015742:	6323      	str	r3, [r4, #48]	; 0x30
 8015744:	bd10      	pop	{r4, pc}
 8015746:	bf00      	nop
 8015748:	08015d7d 	.word	0x08015d7d
 801574c:	08015d9f 	.word	0x08015d9f
 8015750:	08015dd7 	.word	0x08015dd7
 8015754:	08015dfb 	.word	0x08015dfb

08015758 <_cleanup_r>:
 8015758:	4901      	ldr	r1, [pc, #4]	; (8015760 <_cleanup_r+0x8>)
 801575a:	f000 b8af 	b.w	80158bc <_fwalk_reent>
 801575e:	bf00      	nop
 8015760:	08015fb5 	.word	0x08015fb5

08015764 <__sfmoreglue>:
 8015764:	b570      	push	{r4, r5, r6, lr}
 8015766:	2268      	movs	r2, #104	; 0x68
 8015768:	1e4d      	subs	r5, r1, #1
 801576a:	4355      	muls	r5, r2
 801576c:	460e      	mov	r6, r1
 801576e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015772:	f000 f99f 	bl	8015ab4 <_malloc_r>
 8015776:	4604      	mov	r4, r0
 8015778:	b140      	cbz	r0, 801578c <__sfmoreglue+0x28>
 801577a:	2100      	movs	r1, #0
 801577c:	e9c0 1600 	strd	r1, r6, [r0]
 8015780:	300c      	adds	r0, #12
 8015782:	60a0      	str	r0, [r4, #8]
 8015784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015788:	f000 f920 	bl	80159cc <memset>
 801578c:	4620      	mov	r0, r4
 801578e:	bd70      	pop	{r4, r5, r6, pc}

08015790 <__sfp_lock_acquire>:
 8015790:	4801      	ldr	r0, [pc, #4]	; (8015798 <__sfp_lock_acquire+0x8>)
 8015792:	f000 b8d8 	b.w	8015946 <__retarget_lock_acquire_recursive>
 8015796:	bf00      	nop
 8015798:	2000f029 	.word	0x2000f029

0801579c <__sfp_lock_release>:
 801579c:	4801      	ldr	r0, [pc, #4]	; (80157a4 <__sfp_lock_release+0x8>)
 801579e:	f000 b8d3 	b.w	8015948 <__retarget_lock_release_recursive>
 80157a2:	bf00      	nop
 80157a4:	2000f029 	.word	0x2000f029

080157a8 <__sinit_lock_acquire>:
 80157a8:	4801      	ldr	r0, [pc, #4]	; (80157b0 <__sinit_lock_acquire+0x8>)
 80157aa:	f000 b8cc 	b.w	8015946 <__retarget_lock_acquire_recursive>
 80157ae:	bf00      	nop
 80157b0:	2000f02a 	.word	0x2000f02a

080157b4 <__sinit_lock_release>:
 80157b4:	4801      	ldr	r0, [pc, #4]	; (80157bc <__sinit_lock_release+0x8>)
 80157b6:	f000 b8c7 	b.w	8015948 <__retarget_lock_release_recursive>
 80157ba:	bf00      	nop
 80157bc:	2000f02a 	.word	0x2000f02a

080157c0 <__sinit>:
 80157c0:	b510      	push	{r4, lr}
 80157c2:	4604      	mov	r4, r0
 80157c4:	f7ff fff0 	bl	80157a8 <__sinit_lock_acquire>
 80157c8:	69a3      	ldr	r3, [r4, #24]
 80157ca:	b11b      	cbz	r3, 80157d4 <__sinit+0x14>
 80157cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157d0:	f7ff bff0 	b.w	80157b4 <__sinit_lock_release>
 80157d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80157d8:	6523      	str	r3, [r4, #80]	; 0x50
 80157da:	4b13      	ldr	r3, [pc, #76]	; (8015828 <__sinit+0x68>)
 80157dc:	4a13      	ldr	r2, [pc, #76]	; (801582c <__sinit+0x6c>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80157e2:	42a3      	cmp	r3, r4
 80157e4:	bf04      	itt	eq
 80157e6:	2301      	moveq	r3, #1
 80157e8:	61a3      	streq	r3, [r4, #24]
 80157ea:	4620      	mov	r0, r4
 80157ec:	f000 f820 	bl	8015830 <__sfp>
 80157f0:	6060      	str	r0, [r4, #4]
 80157f2:	4620      	mov	r0, r4
 80157f4:	f000 f81c 	bl	8015830 <__sfp>
 80157f8:	60a0      	str	r0, [r4, #8]
 80157fa:	4620      	mov	r0, r4
 80157fc:	f000 f818 	bl	8015830 <__sfp>
 8015800:	2200      	movs	r2, #0
 8015802:	60e0      	str	r0, [r4, #12]
 8015804:	2104      	movs	r1, #4
 8015806:	6860      	ldr	r0, [r4, #4]
 8015808:	f7ff ff82 	bl	8015710 <std>
 801580c:	68a0      	ldr	r0, [r4, #8]
 801580e:	2201      	movs	r2, #1
 8015810:	2109      	movs	r1, #9
 8015812:	f7ff ff7d 	bl	8015710 <std>
 8015816:	68e0      	ldr	r0, [r4, #12]
 8015818:	2202      	movs	r2, #2
 801581a:	2112      	movs	r1, #18
 801581c:	f7ff ff78 	bl	8015710 <std>
 8015820:	2301      	movs	r3, #1
 8015822:	61a3      	str	r3, [r4, #24]
 8015824:	e7d2      	b.n	80157cc <__sinit+0xc>
 8015826:	bf00      	nop
 8015828:	0801a46c 	.word	0x0801a46c
 801582c:	08015759 	.word	0x08015759

08015830 <__sfp>:
 8015830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015832:	4607      	mov	r7, r0
 8015834:	f7ff ffac 	bl	8015790 <__sfp_lock_acquire>
 8015838:	4b1e      	ldr	r3, [pc, #120]	; (80158b4 <__sfp+0x84>)
 801583a:	681e      	ldr	r6, [r3, #0]
 801583c:	69b3      	ldr	r3, [r6, #24]
 801583e:	b913      	cbnz	r3, 8015846 <__sfp+0x16>
 8015840:	4630      	mov	r0, r6
 8015842:	f7ff ffbd 	bl	80157c0 <__sinit>
 8015846:	3648      	adds	r6, #72	; 0x48
 8015848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801584c:	3b01      	subs	r3, #1
 801584e:	d503      	bpl.n	8015858 <__sfp+0x28>
 8015850:	6833      	ldr	r3, [r6, #0]
 8015852:	b30b      	cbz	r3, 8015898 <__sfp+0x68>
 8015854:	6836      	ldr	r6, [r6, #0]
 8015856:	e7f7      	b.n	8015848 <__sfp+0x18>
 8015858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801585c:	b9d5      	cbnz	r5, 8015894 <__sfp+0x64>
 801585e:	4b16      	ldr	r3, [pc, #88]	; (80158b8 <__sfp+0x88>)
 8015860:	60e3      	str	r3, [r4, #12]
 8015862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015866:	6665      	str	r5, [r4, #100]	; 0x64
 8015868:	f000 f86c 	bl	8015944 <__retarget_lock_init_recursive>
 801586c:	f7ff ff96 	bl	801579c <__sfp_lock_release>
 8015870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015878:	6025      	str	r5, [r4, #0]
 801587a:	61a5      	str	r5, [r4, #24]
 801587c:	2208      	movs	r2, #8
 801587e:	4629      	mov	r1, r5
 8015880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015884:	f000 f8a2 	bl	80159cc <memset>
 8015888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801588c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015890:	4620      	mov	r0, r4
 8015892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015894:	3468      	adds	r4, #104	; 0x68
 8015896:	e7d9      	b.n	801584c <__sfp+0x1c>
 8015898:	2104      	movs	r1, #4
 801589a:	4638      	mov	r0, r7
 801589c:	f7ff ff62 	bl	8015764 <__sfmoreglue>
 80158a0:	4604      	mov	r4, r0
 80158a2:	6030      	str	r0, [r6, #0]
 80158a4:	2800      	cmp	r0, #0
 80158a6:	d1d5      	bne.n	8015854 <__sfp+0x24>
 80158a8:	f7ff ff78 	bl	801579c <__sfp_lock_release>
 80158ac:	230c      	movs	r3, #12
 80158ae:	603b      	str	r3, [r7, #0]
 80158b0:	e7ee      	b.n	8015890 <__sfp+0x60>
 80158b2:	bf00      	nop
 80158b4:	0801a46c 	.word	0x0801a46c
 80158b8:	ffff0001 	.word	0xffff0001

080158bc <_fwalk_reent>:
 80158bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158c0:	4606      	mov	r6, r0
 80158c2:	4688      	mov	r8, r1
 80158c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80158c8:	2700      	movs	r7, #0
 80158ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80158ce:	f1b9 0901 	subs.w	r9, r9, #1
 80158d2:	d505      	bpl.n	80158e0 <_fwalk_reent+0x24>
 80158d4:	6824      	ldr	r4, [r4, #0]
 80158d6:	2c00      	cmp	r4, #0
 80158d8:	d1f7      	bne.n	80158ca <_fwalk_reent+0xe>
 80158da:	4638      	mov	r0, r7
 80158dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158e0:	89ab      	ldrh	r3, [r5, #12]
 80158e2:	2b01      	cmp	r3, #1
 80158e4:	d907      	bls.n	80158f6 <_fwalk_reent+0x3a>
 80158e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80158ea:	3301      	adds	r3, #1
 80158ec:	d003      	beq.n	80158f6 <_fwalk_reent+0x3a>
 80158ee:	4629      	mov	r1, r5
 80158f0:	4630      	mov	r0, r6
 80158f2:	47c0      	blx	r8
 80158f4:	4307      	orrs	r7, r0
 80158f6:	3568      	adds	r5, #104	; 0x68
 80158f8:	e7e9      	b.n	80158ce <_fwalk_reent+0x12>
	...

080158fc <__libc_init_array>:
 80158fc:	b570      	push	{r4, r5, r6, lr}
 80158fe:	4d0d      	ldr	r5, [pc, #52]	; (8015934 <__libc_init_array+0x38>)
 8015900:	4c0d      	ldr	r4, [pc, #52]	; (8015938 <__libc_init_array+0x3c>)
 8015902:	1b64      	subs	r4, r4, r5
 8015904:	10a4      	asrs	r4, r4, #2
 8015906:	2600      	movs	r6, #0
 8015908:	42a6      	cmp	r6, r4
 801590a:	d109      	bne.n	8015920 <__libc_init_array+0x24>
 801590c:	4d0b      	ldr	r5, [pc, #44]	; (801593c <__libc_init_array+0x40>)
 801590e:	4c0c      	ldr	r4, [pc, #48]	; (8015940 <__libc_init_array+0x44>)
 8015910:	f001 f9e2 	bl	8016cd8 <_init>
 8015914:	1b64      	subs	r4, r4, r5
 8015916:	10a4      	asrs	r4, r4, #2
 8015918:	2600      	movs	r6, #0
 801591a:	42a6      	cmp	r6, r4
 801591c:	d105      	bne.n	801592a <__libc_init_array+0x2e>
 801591e:	bd70      	pop	{r4, r5, r6, pc}
 8015920:	f855 3b04 	ldr.w	r3, [r5], #4
 8015924:	4798      	blx	r3
 8015926:	3601      	adds	r6, #1
 8015928:	e7ee      	b.n	8015908 <__libc_init_array+0xc>
 801592a:	f855 3b04 	ldr.w	r3, [r5], #4
 801592e:	4798      	blx	r3
 8015930:	3601      	adds	r6, #1
 8015932:	e7f2      	b.n	801591a <__libc_init_array+0x1e>
 8015934:	0801a55c 	.word	0x0801a55c
 8015938:	0801a55c 	.word	0x0801a55c
 801593c:	0801a55c 	.word	0x0801a55c
 8015940:	0801a560 	.word	0x0801a560

08015944 <__retarget_lock_init_recursive>:
 8015944:	4770      	bx	lr

08015946 <__retarget_lock_acquire_recursive>:
 8015946:	4770      	bx	lr

08015948 <__retarget_lock_release_recursive>:
 8015948:	4770      	bx	lr
	...

0801594c <malloc>:
 801594c:	4b02      	ldr	r3, [pc, #8]	; (8015958 <malloc+0xc>)
 801594e:	4601      	mov	r1, r0
 8015950:	6818      	ldr	r0, [r3, #0]
 8015952:	f000 b8af 	b.w	8015ab4 <_malloc_r>
 8015956:	bf00      	nop
 8015958:	20000030 	.word	0x20000030

0801595c <memcmp>:
 801595c:	b510      	push	{r4, lr}
 801595e:	3901      	subs	r1, #1
 8015960:	4402      	add	r2, r0
 8015962:	4290      	cmp	r0, r2
 8015964:	d101      	bne.n	801596a <memcmp+0xe>
 8015966:	2000      	movs	r0, #0
 8015968:	e005      	b.n	8015976 <memcmp+0x1a>
 801596a:	7803      	ldrb	r3, [r0, #0]
 801596c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015970:	42a3      	cmp	r3, r4
 8015972:	d001      	beq.n	8015978 <memcmp+0x1c>
 8015974:	1b18      	subs	r0, r3, r4
 8015976:	bd10      	pop	{r4, pc}
 8015978:	3001      	adds	r0, #1
 801597a:	e7f2      	b.n	8015962 <memcmp+0x6>

0801597c <memcpy>:
 801597c:	440a      	add	r2, r1
 801597e:	4291      	cmp	r1, r2
 8015980:	f100 33ff 	add.w	r3, r0, #4294967295
 8015984:	d100      	bne.n	8015988 <memcpy+0xc>
 8015986:	4770      	bx	lr
 8015988:	b510      	push	{r4, lr}
 801598a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801598e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015992:	4291      	cmp	r1, r2
 8015994:	d1f9      	bne.n	801598a <memcpy+0xe>
 8015996:	bd10      	pop	{r4, pc}

08015998 <memmove>:
 8015998:	4288      	cmp	r0, r1
 801599a:	b510      	push	{r4, lr}
 801599c:	eb01 0402 	add.w	r4, r1, r2
 80159a0:	d902      	bls.n	80159a8 <memmove+0x10>
 80159a2:	4284      	cmp	r4, r0
 80159a4:	4623      	mov	r3, r4
 80159a6:	d807      	bhi.n	80159b8 <memmove+0x20>
 80159a8:	1e43      	subs	r3, r0, #1
 80159aa:	42a1      	cmp	r1, r4
 80159ac:	d008      	beq.n	80159c0 <memmove+0x28>
 80159ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80159b6:	e7f8      	b.n	80159aa <memmove+0x12>
 80159b8:	4402      	add	r2, r0
 80159ba:	4601      	mov	r1, r0
 80159bc:	428a      	cmp	r2, r1
 80159be:	d100      	bne.n	80159c2 <memmove+0x2a>
 80159c0:	bd10      	pop	{r4, pc}
 80159c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80159c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80159ca:	e7f7      	b.n	80159bc <memmove+0x24>

080159cc <memset>:
 80159cc:	4402      	add	r2, r0
 80159ce:	4603      	mov	r3, r0
 80159d0:	4293      	cmp	r3, r2
 80159d2:	d100      	bne.n	80159d6 <memset+0xa>
 80159d4:	4770      	bx	lr
 80159d6:	f803 1b01 	strb.w	r1, [r3], #1
 80159da:	e7f9      	b.n	80159d0 <memset+0x4>

080159dc <_free_r>:
 80159dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159de:	2900      	cmp	r1, #0
 80159e0:	d044      	beq.n	8015a6c <_free_r+0x90>
 80159e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159e6:	9001      	str	r0, [sp, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	f1a1 0404 	sub.w	r4, r1, #4
 80159ee:	bfb8      	it	lt
 80159f0:	18e4      	addlt	r4, r4, r3
 80159f2:	f000 fb3f 	bl	8016074 <__malloc_lock>
 80159f6:	4a1e      	ldr	r2, [pc, #120]	; (8015a70 <_free_r+0x94>)
 80159f8:	9801      	ldr	r0, [sp, #4]
 80159fa:	6813      	ldr	r3, [r2, #0]
 80159fc:	b933      	cbnz	r3, 8015a0c <_free_r+0x30>
 80159fe:	6063      	str	r3, [r4, #4]
 8015a00:	6014      	str	r4, [r2, #0]
 8015a02:	b003      	add	sp, #12
 8015a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a08:	f000 bb3a 	b.w	8016080 <__malloc_unlock>
 8015a0c:	42a3      	cmp	r3, r4
 8015a0e:	d908      	bls.n	8015a22 <_free_r+0x46>
 8015a10:	6825      	ldr	r5, [r4, #0]
 8015a12:	1961      	adds	r1, r4, r5
 8015a14:	428b      	cmp	r3, r1
 8015a16:	bf01      	itttt	eq
 8015a18:	6819      	ldreq	r1, [r3, #0]
 8015a1a:	685b      	ldreq	r3, [r3, #4]
 8015a1c:	1949      	addeq	r1, r1, r5
 8015a1e:	6021      	streq	r1, [r4, #0]
 8015a20:	e7ed      	b.n	80159fe <_free_r+0x22>
 8015a22:	461a      	mov	r2, r3
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	b10b      	cbz	r3, 8015a2c <_free_r+0x50>
 8015a28:	42a3      	cmp	r3, r4
 8015a2a:	d9fa      	bls.n	8015a22 <_free_r+0x46>
 8015a2c:	6811      	ldr	r1, [r2, #0]
 8015a2e:	1855      	adds	r5, r2, r1
 8015a30:	42a5      	cmp	r5, r4
 8015a32:	d10b      	bne.n	8015a4c <_free_r+0x70>
 8015a34:	6824      	ldr	r4, [r4, #0]
 8015a36:	4421      	add	r1, r4
 8015a38:	1854      	adds	r4, r2, r1
 8015a3a:	42a3      	cmp	r3, r4
 8015a3c:	6011      	str	r1, [r2, #0]
 8015a3e:	d1e0      	bne.n	8015a02 <_free_r+0x26>
 8015a40:	681c      	ldr	r4, [r3, #0]
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	6053      	str	r3, [r2, #4]
 8015a46:	4421      	add	r1, r4
 8015a48:	6011      	str	r1, [r2, #0]
 8015a4a:	e7da      	b.n	8015a02 <_free_r+0x26>
 8015a4c:	d902      	bls.n	8015a54 <_free_r+0x78>
 8015a4e:	230c      	movs	r3, #12
 8015a50:	6003      	str	r3, [r0, #0]
 8015a52:	e7d6      	b.n	8015a02 <_free_r+0x26>
 8015a54:	6825      	ldr	r5, [r4, #0]
 8015a56:	1961      	adds	r1, r4, r5
 8015a58:	428b      	cmp	r3, r1
 8015a5a:	bf04      	itt	eq
 8015a5c:	6819      	ldreq	r1, [r3, #0]
 8015a5e:	685b      	ldreq	r3, [r3, #4]
 8015a60:	6063      	str	r3, [r4, #4]
 8015a62:	bf04      	itt	eq
 8015a64:	1949      	addeq	r1, r1, r5
 8015a66:	6021      	streq	r1, [r4, #0]
 8015a68:	6054      	str	r4, [r2, #4]
 8015a6a:	e7ca      	b.n	8015a02 <_free_r+0x26>
 8015a6c:	b003      	add	sp, #12
 8015a6e:	bd30      	pop	{r4, r5, pc}
 8015a70:	2000f02c 	.word	0x2000f02c

08015a74 <sbrk_aligned>:
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	4e0e      	ldr	r6, [pc, #56]	; (8015ab0 <sbrk_aligned+0x3c>)
 8015a78:	460c      	mov	r4, r1
 8015a7a:	6831      	ldr	r1, [r6, #0]
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	b911      	cbnz	r1, 8015a86 <sbrk_aligned+0x12>
 8015a80:	f000 f94c 	bl	8015d1c <_sbrk_r>
 8015a84:	6030      	str	r0, [r6, #0]
 8015a86:	4621      	mov	r1, r4
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f000 f947 	bl	8015d1c <_sbrk_r>
 8015a8e:	1c43      	adds	r3, r0, #1
 8015a90:	d00a      	beq.n	8015aa8 <sbrk_aligned+0x34>
 8015a92:	1cc4      	adds	r4, r0, #3
 8015a94:	f024 0403 	bic.w	r4, r4, #3
 8015a98:	42a0      	cmp	r0, r4
 8015a9a:	d007      	beq.n	8015aac <sbrk_aligned+0x38>
 8015a9c:	1a21      	subs	r1, r4, r0
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	f000 f93c 	bl	8015d1c <_sbrk_r>
 8015aa4:	3001      	adds	r0, #1
 8015aa6:	d101      	bne.n	8015aac <sbrk_aligned+0x38>
 8015aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8015aac:	4620      	mov	r0, r4
 8015aae:	bd70      	pop	{r4, r5, r6, pc}
 8015ab0:	2000f030 	.word	0x2000f030

08015ab4 <_malloc_r>:
 8015ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab8:	1ccd      	adds	r5, r1, #3
 8015aba:	f025 0503 	bic.w	r5, r5, #3
 8015abe:	3508      	adds	r5, #8
 8015ac0:	2d0c      	cmp	r5, #12
 8015ac2:	bf38      	it	cc
 8015ac4:	250c      	movcc	r5, #12
 8015ac6:	2d00      	cmp	r5, #0
 8015ac8:	4607      	mov	r7, r0
 8015aca:	db01      	blt.n	8015ad0 <_malloc_r+0x1c>
 8015acc:	42a9      	cmp	r1, r5
 8015ace:	d905      	bls.n	8015adc <_malloc_r+0x28>
 8015ad0:	230c      	movs	r3, #12
 8015ad2:	603b      	str	r3, [r7, #0]
 8015ad4:	2600      	movs	r6, #0
 8015ad6:	4630      	mov	r0, r6
 8015ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015adc:	4e2e      	ldr	r6, [pc, #184]	; (8015b98 <_malloc_r+0xe4>)
 8015ade:	f000 fac9 	bl	8016074 <__malloc_lock>
 8015ae2:	6833      	ldr	r3, [r6, #0]
 8015ae4:	461c      	mov	r4, r3
 8015ae6:	bb34      	cbnz	r4, 8015b36 <_malloc_r+0x82>
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4638      	mov	r0, r7
 8015aec:	f7ff ffc2 	bl	8015a74 <sbrk_aligned>
 8015af0:	1c43      	adds	r3, r0, #1
 8015af2:	4604      	mov	r4, r0
 8015af4:	d14d      	bne.n	8015b92 <_malloc_r+0xde>
 8015af6:	6834      	ldr	r4, [r6, #0]
 8015af8:	4626      	mov	r6, r4
 8015afa:	2e00      	cmp	r6, #0
 8015afc:	d140      	bne.n	8015b80 <_malloc_r+0xcc>
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	4631      	mov	r1, r6
 8015b02:	4638      	mov	r0, r7
 8015b04:	eb04 0803 	add.w	r8, r4, r3
 8015b08:	f000 f908 	bl	8015d1c <_sbrk_r>
 8015b0c:	4580      	cmp	r8, r0
 8015b0e:	d13a      	bne.n	8015b86 <_malloc_r+0xd2>
 8015b10:	6821      	ldr	r1, [r4, #0]
 8015b12:	3503      	adds	r5, #3
 8015b14:	1a6d      	subs	r5, r5, r1
 8015b16:	f025 0503 	bic.w	r5, r5, #3
 8015b1a:	3508      	adds	r5, #8
 8015b1c:	2d0c      	cmp	r5, #12
 8015b1e:	bf38      	it	cc
 8015b20:	250c      	movcc	r5, #12
 8015b22:	4629      	mov	r1, r5
 8015b24:	4638      	mov	r0, r7
 8015b26:	f7ff ffa5 	bl	8015a74 <sbrk_aligned>
 8015b2a:	3001      	adds	r0, #1
 8015b2c:	d02b      	beq.n	8015b86 <_malloc_r+0xd2>
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	442b      	add	r3, r5
 8015b32:	6023      	str	r3, [r4, #0]
 8015b34:	e00e      	b.n	8015b54 <_malloc_r+0xa0>
 8015b36:	6822      	ldr	r2, [r4, #0]
 8015b38:	1b52      	subs	r2, r2, r5
 8015b3a:	d41e      	bmi.n	8015b7a <_malloc_r+0xc6>
 8015b3c:	2a0b      	cmp	r2, #11
 8015b3e:	d916      	bls.n	8015b6e <_malloc_r+0xba>
 8015b40:	1961      	adds	r1, r4, r5
 8015b42:	42a3      	cmp	r3, r4
 8015b44:	6025      	str	r5, [r4, #0]
 8015b46:	bf18      	it	ne
 8015b48:	6059      	strne	r1, [r3, #4]
 8015b4a:	6863      	ldr	r3, [r4, #4]
 8015b4c:	bf08      	it	eq
 8015b4e:	6031      	streq	r1, [r6, #0]
 8015b50:	5162      	str	r2, [r4, r5]
 8015b52:	604b      	str	r3, [r1, #4]
 8015b54:	4638      	mov	r0, r7
 8015b56:	f104 060b 	add.w	r6, r4, #11
 8015b5a:	f000 fa91 	bl	8016080 <__malloc_unlock>
 8015b5e:	f026 0607 	bic.w	r6, r6, #7
 8015b62:	1d23      	adds	r3, r4, #4
 8015b64:	1af2      	subs	r2, r6, r3
 8015b66:	d0b6      	beq.n	8015ad6 <_malloc_r+0x22>
 8015b68:	1b9b      	subs	r3, r3, r6
 8015b6a:	50a3      	str	r3, [r4, r2]
 8015b6c:	e7b3      	b.n	8015ad6 <_malloc_r+0x22>
 8015b6e:	6862      	ldr	r2, [r4, #4]
 8015b70:	42a3      	cmp	r3, r4
 8015b72:	bf0c      	ite	eq
 8015b74:	6032      	streq	r2, [r6, #0]
 8015b76:	605a      	strne	r2, [r3, #4]
 8015b78:	e7ec      	b.n	8015b54 <_malloc_r+0xa0>
 8015b7a:	4623      	mov	r3, r4
 8015b7c:	6864      	ldr	r4, [r4, #4]
 8015b7e:	e7b2      	b.n	8015ae6 <_malloc_r+0x32>
 8015b80:	4634      	mov	r4, r6
 8015b82:	6876      	ldr	r6, [r6, #4]
 8015b84:	e7b9      	b.n	8015afa <_malloc_r+0x46>
 8015b86:	230c      	movs	r3, #12
 8015b88:	603b      	str	r3, [r7, #0]
 8015b8a:	4638      	mov	r0, r7
 8015b8c:	f000 fa78 	bl	8016080 <__malloc_unlock>
 8015b90:	e7a1      	b.n	8015ad6 <_malloc_r+0x22>
 8015b92:	6025      	str	r5, [r4, #0]
 8015b94:	e7de      	b.n	8015b54 <_malloc_r+0xa0>
 8015b96:	bf00      	nop
 8015b98:	2000f02c 	.word	0x2000f02c

08015b9c <iprintf>:
 8015b9c:	b40f      	push	{r0, r1, r2, r3}
 8015b9e:	4b0a      	ldr	r3, [pc, #40]	; (8015bc8 <iprintf+0x2c>)
 8015ba0:	b513      	push	{r0, r1, r4, lr}
 8015ba2:	681c      	ldr	r4, [r3, #0]
 8015ba4:	b124      	cbz	r4, 8015bb0 <iprintf+0x14>
 8015ba6:	69a3      	ldr	r3, [r4, #24]
 8015ba8:	b913      	cbnz	r3, 8015bb0 <iprintf+0x14>
 8015baa:	4620      	mov	r0, r4
 8015bac:	f7ff fe08 	bl	80157c0 <__sinit>
 8015bb0:	ab05      	add	r3, sp, #20
 8015bb2:	9a04      	ldr	r2, [sp, #16]
 8015bb4:	68a1      	ldr	r1, [r4, #8]
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f000 fbed 	bl	8016398 <_vfiprintf_r>
 8015bbe:	b002      	add	sp, #8
 8015bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bc4:	b004      	add	sp, #16
 8015bc6:	4770      	bx	lr
 8015bc8:	20000030 	.word	0x20000030

08015bcc <rand>:
 8015bcc:	4b16      	ldr	r3, [pc, #88]	; (8015c28 <rand+0x5c>)
 8015bce:	b510      	push	{r4, lr}
 8015bd0:	681c      	ldr	r4, [r3, #0]
 8015bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015bd4:	b9b3      	cbnz	r3, 8015c04 <rand+0x38>
 8015bd6:	2018      	movs	r0, #24
 8015bd8:	f7ff feb8 	bl	801594c <malloc>
 8015bdc:	63a0      	str	r0, [r4, #56]	; 0x38
 8015bde:	b928      	cbnz	r0, 8015bec <rand+0x20>
 8015be0:	4602      	mov	r2, r0
 8015be2:	4b12      	ldr	r3, [pc, #72]	; (8015c2c <rand+0x60>)
 8015be4:	4812      	ldr	r0, [pc, #72]	; (8015c30 <rand+0x64>)
 8015be6:	214e      	movs	r1, #78	; 0x4e
 8015be8:	f000 f930 	bl	8015e4c <__assert_func>
 8015bec:	4a11      	ldr	r2, [pc, #68]	; (8015c34 <rand+0x68>)
 8015bee:	4b12      	ldr	r3, [pc, #72]	; (8015c38 <rand+0x6c>)
 8015bf0:	e9c0 2300 	strd	r2, r3, [r0]
 8015bf4:	4b11      	ldr	r3, [pc, #68]	; (8015c3c <rand+0x70>)
 8015bf6:	6083      	str	r3, [r0, #8]
 8015bf8:	230b      	movs	r3, #11
 8015bfa:	8183      	strh	r3, [r0, #12]
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	2300      	movs	r3, #0
 8015c00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015c04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015c06:	4a0e      	ldr	r2, [pc, #56]	; (8015c40 <rand+0x74>)
 8015c08:	6920      	ldr	r0, [r4, #16]
 8015c0a:	6963      	ldr	r3, [r4, #20]
 8015c0c:	490d      	ldr	r1, [pc, #52]	; (8015c44 <rand+0x78>)
 8015c0e:	4342      	muls	r2, r0
 8015c10:	fb01 2203 	mla	r2, r1, r3, r2
 8015c14:	fba0 0101 	umull	r0, r1, r0, r1
 8015c18:	1c43      	adds	r3, r0, #1
 8015c1a:	eb42 0001 	adc.w	r0, r2, r1
 8015c1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015c22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015c26:	bd10      	pop	{r4, pc}
 8015c28:	20000030 	.word	0x20000030
 8015c2c:	0801a470 	.word	0x0801a470
 8015c30:	0801a487 	.word	0x0801a487
 8015c34:	abcd330e 	.word	0xabcd330e
 8015c38:	e66d1234 	.word	0xe66d1234
 8015c3c:	0005deec 	.word	0x0005deec
 8015c40:	5851f42d 	.word	0x5851f42d
 8015c44:	4c957f2d 	.word	0x4c957f2d

08015c48 <cleanup_glue>:
 8015c48:	b538      	push	{r3, r4, r5, lr}
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	6809      	ldr	r1, [r1, #0]
 8015c4e:	4605      	mov	r5, r0
 8015c50:	b109      	cbz	r1, 8015c56 <cleanup_glue+0xe>
 8015c52:	f7ff fff9 	bl	8015c48 <cleanup_glue>
 8015c56:	4621      	mov	r1, r4
 8015c58:	4628      	mov	r0, r5
 8015c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c5e:	f7ff bebd 	b.w	80159dc <_free_r>
	...

08015c64 <_reclaim_reent>:
 8015c64:	4b2c      	ldr	r3, [pc, #176]	; (8015d18 <_reclaim_reent+0xb4>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4283      	cmp	r3, r0
 8015c6a:	b570      	push	{r4, r5, r6, lr}
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	d051      	beq.n	8015d14 <_reclaim_reent+0xb0>
 8015c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015c72:	b143      	cbz	r3, 8015c86 <_reclaim_reent+0x22>
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d14a      	bne.n	8015d10 <_reclaim_reent+0xac>
 8015c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c7c:	6819      	ldr	r1, [r3, #0]
 8015c7e:	b111      	cbz	r1, 8015c86 <_reclaim_reent+0x22>
 8015c80:	4620      	mov	r0, r4
 8015c82:	f7ff feab 	bl	80159dc <_free_r>
 8015c86:	6961      	ldr	r1, [r4, #20]
 8015c88:	b111      	cbz	r1, 8015c90 <_reclaim_reent+0x2c>
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f7ff fea6 	bl	80159dc <_free_r>
 8015c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015c92:	b111      	cbz	r1, 8015c9a <_reclaim_reent+0x36>
 8015c94:	4620      	mov	r0, r4
 8015c96:	f7ff fea1 	bl	80159dc <_free_r>
 8015c9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015c9c:	b111      	cbz	r1, 8015ca4 <_reclaim_reent+0x40>
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f7ff fe9c 	bl	80159dc <_free_r>
 8015ca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015ca6:	b111      	cbz	r1, 8015cae <_reclaim_reent+0x4a>
 8015ca8:	4620      	mov	r0, r4
 8015caa:	f7ff fe97 	bl	80159dc <_free_r>
 8015cae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015cb0:	b111      	cbz	r1, 8015cb8 <_reclaim_reent+0x54>
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	f7ff fe92 	bl	80159dc <_free_r>
 8015cb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015cba:	b111      	cbz	r1, 8015cc2 <_reclaim_reent+0x5e>
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	f7ff fe8d 	bl	80159dc <_free_r>
 8015cc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015cc4:	b111      	cbz	r1, 8015ccc <_reclaim_reent+0x68>
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	f7ff fe88 	bl	80159dc <_free_r>
 8015ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cce:	b111      	cbz	r1, 8015cd6 <_reclaim_reent+0x72>
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f7ff fe83 	bl	80159dc <_free_r>
 8015cd6:	69a3      	ldr	r3, [r4, #24]
 8015cd8:	b1e3      	cbz	r3, 8015d14 <_reclaim_reent+0xb0>
 8015cda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015cdc:	4620      	mov	r0, r4
 8015cde:	4798      	blx	r3
 8015ce0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015ce2:	b1b9      	cbz	r1, 8015d14 <_reclaim_reent+0xb0>
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cea:	f7ff bfad 	b.w	8015c48 <cleanup_glue>
 8015cee:	5949      	ldr	r1, [r1, r5]
 8015cf0:	b941      	cbnz	r1, 8015d04 <_reclaim_reent+0xa0>
 8015cf2:	3504      	adds	r5, #4
 8015cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cf6:	2d80      	cmp	r5, #128	; 0x80
 8015cf8:	68d9      	ldr	r1, [r3, #12]
 8015cfa:	d1f8      	bne.n	8015cee <_reclaim_reent+0x8a>
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f7ff fe6d 	bl	80159dc <_free_r>
 8015d02:	e7ba      	b.n	8015c7a <_reclaim_reent+0x16>
 8015d04:	680e      	ldr	r6, [r1, #0]
 8015d06:	4620      	mov	r0, r4
 8015d08:	f7ff fe68 	bl	80159dc <_free_r>
 8015d0c:	4631      	mov	r1, r6
 8015d0e:	e7ef      	b.n	8015cf0 <_reclaim_reent+0x8c>
 8015d10:	2500      	movs	r5, #0
 8015d12:	e7ef      	b.n	8015cf4 <_reclaim_reent+0x90>
 8015d14:	bd70      	pop	{r4, r5, r6, pc}
 8015d16:	bf00      	nop
 8015d18:	20000030 	.word	0x20000030

08015d1c <_sbrk_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	4d06      	ldr	r5, [pc, #24]	; (8015d38 <_sbrk_r+0x1c>)
 8015d20:	2300      	movs	r3, #0
 8015d22:	4604      	mov	r4, r0
 8015d24:	4608      	mov	r0, r1
 8015d26:	602b      	str	r3, [r5, #0]
 8015d28:	f7eb f808 	bl	8000d3c <_sbrk>
 8015d2c:	1c43      	adds	r3, r0, #1
 8015d2e:	d102      	bne.n	8015d36 <_sbrk_r+0x1a>
 8015d30:	682b      	ldr	r3, [r5, #0]
 8015d32:	b103      	cbz	r3, 8015d36 <_sbrk_r+0x1a>
 8015d34:	6023      	str	r3, [r4, #0]
 8015d36:	bd38      	pop	{r3, r4, r5, pc}
 8015d38:	2000f034 	.word	0x2000f034

08015d3c <siprintf>:
 8015d3c:	b40e      	push	{r1, r2, r3}
 8015d3e:	b500      	push	{lr}
 8015d40:	b09c      	sub	sp, #112	; 0x70
 8015d42:	ab1d      	add	r3, sp, #116	; 0x74
 8015d44:	9002      	str	r0, [sp, #8]
 8015d46:	9006      	str	r0, [sp, #24]
 8015d48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d4c:	4809      	ldr	r0, [pc, #36]	; (8015d74 <siprintf+0x38>)
 8015d4e:	9107      	str	r1, [sp, #28]
 8015d50:	9104      	str	r1, [sp, #16]
 8015d52:	4909      	ldr	r1, [pc, #36]	; (8015d78 <siprintf+0x3c>)
 8015d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d58:	9105      	str	r1, [sp, #20]
 8015d5a:	6800      	ldr	r0, [r0, #0]
 8015d5c:	9301      	str	r3, [sp, #4]
 8015d5e:	a902      	add	r1, sp, #8
 8015d60:	f000 f9f0 	bl	8016144 <_svfiprintf_r>
 8015d64:	9b02      	ldr	r3, [sp, #8]
 8015d66:	2200      	movs	r2, #0
 8015d68:	701a      	strb	r2, [r3, #0]
 8015d6a:	b01c      	add	sp, #112	; 0x70
 8015d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d70:	b003      	add	sp, #12
 8015d72:	4770      	bx	lr
 8015d74:	20000030 	.word	0x20000030
 8015d78:	ffff0208 	.word	0xffff0208

08015d7c <__sread>:
 8015d7c:	b510      	push	{r4, lr}
 8015d7e:	460c      	mov	r4, r1
 8015d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d84:	f000 fdcc 	bl	8016920 <_read_r>
 8015d88:	2800      	cmp	r0, #0
 8015d8a:	bfab      	itete	ge
 8015d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8015d90:	181b      	addge	r3, r3, r0
 8015d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d96:	bfac      	ite	ge
 8015d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d9a:	81a3      	strhlt	r3, [r4, #12]
 8015d9c:	bd10      	pop	{r4, pc}

08015d9e <__swrite>:
 8015d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da2:	461f      	mov	r7, r3
 8015da4:	898b      	ldrh	r3, [r1, #12]
 8015da6:	05db      	lsls	r3, r3, #23
 8015da8:	4605      	mov	r5, r0
 8015daa:	460c      	mov	r4, r1
 8015dac:	4616      	mov	r6, r2
 8015dae:	d505      	bpl.n	8015dbc <__swrite+0x1e>
 8015db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015db4:	2302      	movs	r3, #2
 8015db6:	2200      	movs	r2, #0
 8015db8:	f000 f94a 	bl	8016050 <_lseek_r>
 8015dbc:	89a3      	ldrh	r3, [r4, #12]
 8015dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015dc6:	81a3      	strh	r3, [r4, #12]
 8015dc8:	4632      	mov	r2, r6
 8015dca:	463b      	mov	r3, r7
 8015dcc:	4628      	mov	r0, r5
 8015dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd2:	f000 b829 	b.w	8015e28 <_write_r>

08015dd6 <__sseek>:
 8015dd6:	b510      	push	{r4, lr}
 8015dd8:	460c      	mov	r4, r1
 8015dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dde:	f000 f937 	bl	8016050 <_lseek_r>
 8015de2:	1c43      	adds	r3, r0, #1
 8015de4:	89a3      	ldrh	r3, [r4, #12]
 8015de6:	bf15      	itete	ne
 8015de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8015dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015df2:	81a3      	strheq	r3, [r4, #12]
 8015df4:	bf18      	it	ne
 8015df6:	81a3      	strhne	r3, [r4, #12]
 8015df8:	bd10      	pop	{r4, pc}

08015dfa <__sclose>:
 8015dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dfe:	f000 b843 	b.w	8015e88 <_close_r>

08015e02 <strncpy>:
 8015e02:	b510      	push	{r4, lr}
 8015e04:	3901      	subs	r1, #1
 8015e06:	4603      	mov	r3, r0
 8015e08:	b132      	cbz	r2, 8015e18 <strncpy+0x16>
 8015e0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e0e:	f803 4b01 	strb.w	r4, [r3], #1
 8015e12:	3a01      	subs	r2, #1
 8015e14:	2c00      	cmp	r4, #0
 8015e16:	d1f7      	bne.n	8015e08 <strncpy+0x6>
 8015e18:	441a      	add	r2, r3
 8015e1a:	2100      	movs	r1, #0
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d100      	bne.n	8015e22 <strncpy+0x20>
 8015e20:	bd10      	pop	{r4, pc}
 8015e22:	f803 1b01 	strb.w	r1, [r3], #1
 8015e26:	e7f9      	b.n	8015e1c <strncpy+0x1a>

08015e28 <_write_r>:
 8015e28:	b538      	push	{r3, r4, r5, lr}
 8015e2a:	4d07      	ldr	r5, [pc, #28]	; (8015e48 <_write_r+0x20>)
 8015e2c:	4604      	mov	r4, r0
 8015e2e:	4608      	mov	r0, r1
 8015e30:	4611      	mov	r1, r2
 8015e32:	2200      	movs	r2, #0
 8015e34:	602a      	str	r2, [r5, #0]
 8015e36:	461a      	mov	r2, r3
 8015e38:	f7ea ff2f 	bl	8000c9a <_write>
 8015e3c:	1c43      	adds	r3, r0, #1
 8015e3e:	d102      	bne.n	8015e46 <_write_r+0x1e>
 8015e40:	682b      	ldr	r3, [r5, #0]
 8015e42:	b103      	cbz	r3, 8015e46 <_write_r+0x1e>
 8015e44:	6023      	str	r3, [r4, #0]
 8015e46:	bd38      	pop	{r3, r4, r5, pc}
 8015e48:	2000f034 	.word	0x2000f034

08015e4c <__assert_func>:
 8015e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e4e:	4614      	mov	r4, r2
 8015e50:	461a      	mov	r2, r3
 8015e52:	4b09      	ldr	r3, [pc, #36]	; (8015e78 <__assert_func+0x2c>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	4605      	mov	r5, r0
 8015e58:	68d8      	ldr	r0, [r3, #12]
 8015e5a:	b14c      	cbz	r4, 8015e70 <__assert_func+0x24>
 8015e5c:	4b07      	ldr	r3, [pc, #28]	; (8015e7c <__assert_func+0x30>)
 8015e5e:	9100      	str	r1, [sp, #0]
 8015e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015e64:	4906      	ldr	r1, [pc, #24]	; (8015e80 <__assert_func+0x34>)
 8015e66:	462b      	mov	r3, r5
 8015e68:	f000 f8e0 	bl	801602c <fiprintf>
 8015e6c:	f000 fe2a 	bl	8016ac4 <abort>
 8015e70:	4b04      	ldr	r3, [pc, #16]	; (8015e84 <__assert_func+0x38>)
 8015e72:	461c      	mov	r4, r3
 8015e74:	e7f3      	b.n	8015e5e <__assert_func+0x12>
 8015e76:	bf00      	nop
 8015e78:	20000030 	.word	0x20000030
 8015e7c:	0801a4e2 	.word	0x0801a4e2
 8015e80:	0801a4ef 	.word	0x0801a4ef
 8015e84:	0801a51d 	.word	0x0801a51d

08015e88 <_close_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4d06      	ldr	r5, [pc, #24]	; (8015ea4 <_close_r+0x1c>)
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	4604      	mov	r4, r0
 8015e90:	4608      	mov	r0, r1
 8015e92:	602b      	str	r3, [r5, #0]
 8015e94:	f7ea ff1d 	bl	8000cd2 <_close>
 8015e98:	1c43      	adds	r3, r0, #1
 8015e9a:	d102      	bne.n	8015ea2 <_close_r+0x1a>
 8015e9c:	682b      	ldr	r3, [r5, #0]
 8015e9e:	b103      	cbz	r3, 8015ea2 <_close_r+0x1a>
 8015ea0:	6023      	str	r3, [r4, #0]
 8015ea2:	bd38      	pop	{r3, r4, r5, pc}
 8015ea4:	2000f034 	.word	0x2000f034

08015ea8 <__sflush_r>:
 8015ea8:	898a      	ldrh	r2, [r1, #12]
 8015eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eae:	4605      	mov	r5, r0
 8015eb0:	0710      	lsls	r0, r2, #28
 8015eb2:	460c      	mov	r4, r1
 8015eb4:	d458      	bmi.n	8015f68 <__sflush_r+0xc0>
 8015eb6:	684b      	ldr	r3, [r1, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	dc05      	bgt.n	8015ec8 <__sflush_r+0x20>
 8015ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	dc02      	bgt.n	8015ec8 <__sflush_r+0x20>
 8015ec2:	2000      	movs	r0, #0
 8015ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015eca:	2e00      	cmp	r6, #0
 8015ecc:	d0f9      	beq.n	8015ec2 <__sflush_r+0x1a>
 8015ece:	2300      	movs	r3, #0
 8015ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ed4:	682f      	ldr	r7, [r5, #0]
 8015ed6:	602b      	str	r3, [r5, #0]
 8015ed8:	d032      	beq.n	8015f40 <__sflush_r+0x98>
 8015eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015edc:	89a3      	ldrh	r3, [r4, #12]
 8015ede:	075a      	lsls	r2, r3, #29
 8015ee0:	d505      	bpl.n	8015eee <__sflush_r+0x46>
 8015ee2:	6863      	ldr	r3, [r4, #4]
 8015ee4:	1ac0      	subs	r0, r0, r3
 8015ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ee8:	b10b      	cbz	r3, 8015eee <__sflush_r+0x46>
 8015eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015eec:	1ac0      	subs	r0, r0, r3
 8015eee:	2300      	movs	r3, #0
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ef4:	6a21      	ldr	r1, [r4, #32]
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	47b0      	blx	r6
 8015efa:	1c43      	adds	r3, r0, #1
 8015efc:	89a3      	ldrh	r3, [r4, #12]
 8015efe:	d106      	bne.n	8015f0e <__sflush_r+0x66>
 8015f00:	6829      	ldr	r1, [r5, #0]
 8015f02:	291d      	cmp	r1, #29
 8015f04:	d82c      	bhi.n	8015f60 <__sflush_r+0xb8>
 8015f06:	4a2a      	ldr	r2, [pc, #168]	; (8015fb0 <__sflush_r+0x108>)
 8015f08:	40ca      	lsrs	r2, r1
 8015f0a:	07d6      	lsls	r6, r2, #31
 8015f0c:	d528      	bpl.n	8015f60 <__sflush_r+0xb8>
 8015f0e:	2200      	movs	r2, #0
 8015f10:	6062      	str	r2, [r4, #4]
 8015f12:	04d9      	lsls	r1, r3, #19
 8015f14:	6922      	ldr	r2, [r4, #16]
 8015f16:	6022      	str	r2, [r4, #0]
 8015f18:	d504      	bpl.n	8015f24 <__sflush_r+0x7c>
 8015f1a:	1c42      	adds	r2, r0, #1
 8015f1c:	d101      	bne.n	8015f22 <__sflush_r+0x7a>
 8015f1e:	682b      	ldr	r3, [r5, #0]
 8015f20:	b903      	cbnz	r3, 8015f24 <__sflush_r+0x7c>
 8015f22:	6560      	str	r0, [r4, #84]	; 0x54
 8015f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f26:	602f      	str	r7, [r5, #0]
 8015f28:	2900      	cmp	r1, #0
 8015f2a:	d0ca      	beq.n	8015ec2 <__sflush_r+0x1a>
 8015f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f30:	4299      	cmp	r1, r3
 8015f32:	d002      	beq.n	8015f3a <__sflush_r+0x92>
 8015f34:	4628      	mov	r0, r5
 8015f36:	f7ff fd51 	bl	80159dc <_free_r>
 8015f3a:	2000      	movs	r0, #0
 8015f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8015f3e:	e7c1      	b.n	8015ec4 <__sflush_r+0x1c>
 8015f40:	6a21      	ldr	r1, [r4, #32]
 8015f42:	2301      	movs	r3, #1
 8015f44:	4628      	mov	r0, r5
 8015f46:	47b0      	blx	r6
 8015f48:	1c41      	adds	r1, r0, #1
 8015f4a:	d1c7      	bne.n	8015edc <__sflush_r+0x34>
 8015f4c:	682b      	ldr	r3, [r5, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0c4      	beq.n	8015edc <__sflush_r+0x34>
 8015f52:	2b1d      	cmp	r3, #29
 8015f54:	d001      	beq.n	8015f5a <__sflush_r+0xb2>
 8015f56:	2b16      	cmp	r3, #22
 8015f58:	d101      	bne.n	8015f5e <__sflush_r+0xb6>
 8015f5a:	602f      	str	r7, [r5, #0]
 8015f5c:	e7b1      	b.n	8015ec2 <__sflush_r+0x1a>
 8015f5e:	89a3      	ldrh	r3, [r4, #12]
 8015f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f64:	81a3      	strh	r3, [r4, #12]
 8015f66:	e7ad      	b.n	8015ec4 <__sflush_r+0x1c>
 8015f68:	690f      	ldr	r7, [r1, #16]
 8015f6a:	2f00      	cmp	r7, #0
 8015f6c:	d0a9      	beq.n	8015ec2 <__sflush_r+0x1a>
 8015f6e:	0793      	lsls	r3, r2, #30
 8015f70:	680e      	ldr	r6, [r1, #0]
 8015f72:	bf08      	it	eq
 8015f74:	694b      	ldreq	r3, [r1, #20]
 8015f76:	600f      	str	r7, [r1, #0]
 8015f78:	bf18      	it	ne
 8015f7a:	2300      	movne	r3, #0
 8015f7c:	eba6 0807 	sub.w	r8, r6, r7
 8015f80:	608b      	str	r3, [r1, #8]
 8015f82:	f1b8 0f00 	cmp.w	r8, #0
 8015f86:	dd9c      	ble.n	8015ec2 <__sflush_r+0x1a>
 8015f88:	6a21      	ldr	r1, [r4, #32]
 8015f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015f8c:	4643      	mov	r3, r8
 8015f8e:	463a      	mov	r2, r7
 8015f90:	4628      	mov	r0, r5
 8015f92:	47b0      	blx	r6
 8015f94:	2800      	cmp	r0, #0
 8015f96:	dc06      	bgt.n	8015fa6 <__sflush_r+0xfe>
 8015f98:	89a3      	ldrh	r3, [r4, #12]
 8015f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f9e:	81a3      	strh	r3, [r4, #12]
 8015fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fa4:	e78e      	b.n	8015ec4 <__sflush_r+0x1c>
 8015fa6:	4407      	add	r7, r0
 8015fa8:	eba8 0800 	sub.w	r8, r8, r0
 8015fac:	e7e9      	b.n	8015f82 <__sflush_r+0xda>
 8015fae:	bf00      	nop
 8015fb0:	20400001 	.word	0x20400001

08015fb4 <_fflush_r>:
 8015fb4:	b538      	push	{r3, r4, r5, lr}
 8015fb6:	690b      	ldr	r3, [r1, #16]
 8015fb8:	4605      	mov	r5, r0
 8015fba:	460c      	mov	r4, r1
 8015fbc:	b913      	cbnz	r3, 8015fc4 <_fflush_r+0x10>
 8015fbe:	2500      	movs	r5, #0
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	bd38      	pop	{r3, r4, r5, pc}
 8015fc4:	b118      	cbz	r0, 8015fce <_fflush_r+0x1a>
 8015fc6:	6983      	ldr	r3, [r0, #24]
 8015fc8:	b90b      	cbnz	r3, 8015fce <_fflush_r+0x1a>
 8015fca:	f7ff fbf9 	bl	80157c0 <__sinit>
 8015fce:	4b14      	ldr	r3, [pc, #80]	; (8016020 <_fflush_r+0x6c>)
 8015fd0:	429c      	cmp	r4, r3
 8015fd2:	d11b      	bne.n	801600c <_fflush_r+0x58>
 8015fd4:	686c      	ldr	r4, [r5, #4]
 8015fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d0ef      	beq.n	8015fbe <_fflush_r+0xa>
 8015fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015fe0:	07d0      	lsls	r0, r2, #31
 8015fe2:	d404      	bmi.n	8015fee <_fflush_r+0x3a>
 8015fe4:	0599      	lsls	r1, r3, #22
 8015fe6:	d402      	bmi.n	8015fee <_fflush_r+0x3a>
 8015fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fea:	f7ff fcac 	bl	8015946 <__retarget_lock_acquire_recursive>
 8015fee:	4628      	mov	r0, r5
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	f7ff ff59 	bl	8015ea8 <__sflush_r>
 8015ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ff8:	07da      	lsls	r2, r3, #31
 8015ffa:	4605      	mov	r5, r0
 8015ffc:	d4e0      	bmi.n	8015fc0 <_fflush_r+0xc>
 8015ffe:	89a3      	ldrh	r3, [r4, #12]
 8016000:	059b      	lsls	r3, r3, #22
 8016002:	d4dd      	bmi.n	8015fc0 <_fflush_r+0xc>
 8016004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016006:	f7ff fc9f 	bl	8015948 <__retarget_lock_release_recursive>
 801600a:	e7d9      	b.n	8015fc0 <_fflush_r+0xc>
 801600c:	4b05      	ldr	r3, [pc, #20]	; (8016024 <_fflush_r+0x70>)
 801600e:	429c      	cmp	r4, r3
 8016010:	d101      	bne.n	8016016 <_fflush_r+0x62>
 8016012:	68ac      	ldr	r4, [r5, #8]
 8016014:	e7df      	b.n	8015fd6 <_fflush_r+0x22>
 8016016:	4b04      	ldr	r3, [pc, #16]	; (8016028 <_fflush_r+0x74>)
 8016018:	429c      	cmp	r4, r3
 801601a:	bf08      	it	eq
 801601c:	68ec      	ldreq	r4, [r5, #12]
 801601e:	e7da      	b.n	8015fd6 <_fflush_r+0x22>
 8016020:	0801a42c 	.word	0x0801a42c
 8016024:	0801a44c 	.word	0x0801a44c
 8016028:	0801a40c 	.word	0x0801a40c

0801602c <fiprintf>:
 801602c:	b40e      	push	{r1, r2, r3}
 801602e:	b503      	push	{r0, r1, lr}
 8016030:	4601      	mov	r1, r0
 8016032:	ab03      	add	r3, sp, #12
 8016034:	4805      	ldr	r0, [pc, #20]	; (801604c <fiprintf+0x20>)
 8016036:	f853 2b04 	ldr.w	r2, [r3], #4
 801603a:	6800      	ldr	r0, [r0, #0]
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	f000 f9ab 	bl	8016398 <_vfiprintf_r>
 8016042:	b002      	add	sp, #8
 8016044:	f85d eb04 	ldr.w	lr, [sp], #4
 8016048:	b003      	add	sp, #12
 801604a:	4770      	bx	lr
 801604c:	20000030 	.word	0x20000030

08016050 <_lseek_r>:
 8016050:	b538      	push	{r3, r4, r5, lr}
 8016052:	4d07      	ldr	r5, [pc, #28]	; (8016070 <_lseek_r+0x20>)
 8016054:	4604      	mov	r4, r0
 8016056:	4608      	mov	r0, r1
 8016058:	4611      	mov	r1, r2
 801605a:	2200      	movs	r2, #0
 801605c:	602a      	str	r2, [r5, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	f7ea fe5e 	bl	8000d20 <_lseek>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d102      	bne.n	801606e <_lseek_r+0x1e>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	b103      	cbz	r3, 801606e <_lseek_r+0x1e>
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	2000f034 	.word	0x2000f034

08016074 <__malloc_lock>:
 8016074:	4801      	ldr	r0, [pc, #4]	; (801607c <__malloc_lock+0x8>)
 8016076:	f7ff bc66 	b.w	8015946 <__retarget_lock_acquire_recursive>
 801607a:	bf00      	nop
 801607c:	2000f028 	.word	0x2000f028

08016080 <__malloc_unlock>:
 8016080:	4801      	ldr	r0, [pc, #4]	; (8016088 <__malloc_unlock+0x8>)
 8016082:	f7ff bc61 	b.w	8015948 <__retarget_lock_release_recursive>
 8016086:	bf00      	nop
 8016088:	2000f028 	.word	0x2000f028

0801608c <__ssputs_r>:
 801608c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016090:	688e      	ldr	r6, [r1, #8]
 8016092:	429e      	cmp	r6, r3
 8016094:	4682      	mov	sl, r0
 8016096:	460c      	mov	r4, r1
 8016098:	4690      	mov	r8, r2
 801609a:	461f      	mov	r7, r3
 801609c:	d838      	bhi.n	8016110 <__ssputs_r+0x84>
 801609e:	898a      	ldrh	r2, [r1, #12]
 80160a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80160a4:	d032      	beq.n	801610c <__ssputs_r+0x80>
 80160a6:	6825      	ldr	r5, [r4, #0]
 80160a8:	6909      	ldr	r1, [r1, #16]
 80160aa:	eba5 0901 	sub.w	r9, r5, r1
 80160ae:	6965      	ldr	r5, [r4, #20]
 80160b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80160b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80160b8:	3301      	adds	r3, #1
 80160ba:	444b      	add	r3, r9
 80160bc:	106d      	asrs	r5, r5, #1
 80160be:	429d      	cmp	r5, r3
 80160c0:	bf38      	it	cc
 80160c2:	461d      	movcc	r5, r3
 80160c4:	0553      	lsls	r3, r2, #21
 80160c6:	d531      	bpl.n	801612c <__ssputs_r+0xa0>
 80160c8:	4629      	mov	r1, r5
 80160ca:	f7ff fcf3 	bl	8015ab4 <_malloc_r>
 80160ce:	4606      	mov	r6, r0
 80160d0:	b950      	cbnz	r0, 80160e8 <__ssputs_r+0x5c>
 80160d2:	230c      	movs	r3, #12
 80160d4:	f8ca 3000 	str.w	r3, [sl]
 80160d8:	89a3      	ldrh	r3, [r4, #12]
 80160da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160de:	81a3      	strh	r3, [r4, #12]
 80160e0:	f04f 30ff 	mov.w	r0, #4294967295
 80160e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160e8:	6921      	ldr	r1, [r4, #16]
 80160ea:	464a      	mov	r2, r9
 80160ec:	f7ff fc46 	bl	801597c <memcpy>
 80160f0:	89a3      	ldrh	r3, [r4, #12]
 80160f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80160f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160fa:	81a3      	strh	r3, [r4, #12]
 80160fc:	6126      	str	r6, [r4, #16]
 80160fe:	6165      	str	r5, [r4, #20]
 8016100:	444e      	add	r6, r9
 8016102:	eba5 0509 	sub.w	r5, r5, r9
 8016106:	6026      	str	r6, [r4, #0]
 8016108:	60a5      	str	r5, [r4, #8]
 801610a:	463e      	mov	r6, r7
 801610c:	42be      	cmp	r6, r7
 801610e:	d900      	bls.n	8016112 <__ssputs_r+0x86>
 8016110:	463e      	mov	r6, r7
 8016112:	6820      	ldr	r0, [r4, #0]
 8016114:	4632      	mov	r2, r6
 8016116:	4641      	mov	r1, r8
 8016118:	f7ff fc3e 	bl	8015998 <memmove>
 801611c:	68a3      	ldr	r3, [r4, #8]
 801611e:	1b9b      	subs	r3, r3, r6
 8016120:	60a3      	str	r3, [r4, #8]
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	4433      	add	r3, r6
 8016126:	6023      	str	r3, [r4, #0]
 8016128:	2000      	movs	r0, #0
 801612a:	e7db      	b.n	80160e4 <__ssputs_r+0x58>
 801612c:	462a      	mov	r2, r5
 801612e:	f000 fd35 	bl	8016b9c <_realloc_r>
 8016132:	4606      	mov	r6, r0
 8016134:	2800      	cmp	r0, #0
 8016136:	d1e1      	bne.n	80160fc <__ssputs_r+0x70>
 8016138:	6921      	ldr	r1, [r4, #16]
 801613a:	4650      	mov	r0, sl
 801613c:	f7ff fc4e 	bl	80159dc <_free_r>
 8016140:	e7c7      	b.n	80160d2 <__ssputs_r+0x46>
	...

08016144 <_svfiprintf_r>:
 8016144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016148:	4698      	mov	r8, r3
 801614a:	898b      	ldrh	r3, [r1, #12]
 801614c:	061b      	lsls	r3, r3, #24
 801614e:	b09d      	sub	sp, #116	; 0x74
 8016150:	4607      	mov	r7, r0
 8016152:	460d      	mov	r5, r1
 8016154:	4614      	mov	r4, r2
 8016156:	d50e      	bpl.n	8016176 <_svfiprintf_r+0x32>
 8016158:	690b      	ldr	r3, [r1, #16]
 801615a:	b963      	cbnz	r3, 8016176 <_svfiprintf_r+0x32>
 801615c:	2140      	movs	r1, #64	; 0x40
 801615e:	f7ff fca9 	bl	8015ab4 <_malloc_r>
 8016162:	6028      	str	r0, [r5, #0]
 8016164:	6128      	str	r0, [r5, #16]
 8016166:	b920      	cbnz	r0, 8016172 <_svfiprintf_r+0x2e>
 8016168:	230c      	movs	r3, #12
 801616a:	603b      	str	r3, [r7, #0]
 801616c:	f04f 30ff 	mov.w	r0, #4294967295
 8016170:	e0d1      	b.n	8016316 <_svfiprintf_r+0x1d2>
 8016172:	2340      	movs	r3, #64	; 0x40
 8016174:	616b      	str	r3, [r5, #20]
 8016176:	2300      	movs	r3, #0
 8016178:	9309      	str	r3, [sp, #36]	; 0x24
 801617a:	2320      	movs	r3, #32
 801617c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016180:	f8cd 800c 	str.w	r8, [sp, #12]
 8016184:	2330      	movs	r3, #48	; 0x30
 8016186:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016330 <_svfiprintf_r+0x1ec>
 801618a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801618e:	f04f 0901 	mov.w	r9, #1
 8016192:	4623      	mov	r3, r4
 8016194:	469a      	mov	sl, r3
 8016196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801619a:	b10a      	cbz	r2, 80161a0 <_svfiprintf_r+0x5c>
 801619c:	2a25      	cmp	r2, #37	; 0x25
 801619e:	d1f9      	bne.n	8016194 <_svfiprintf_r+0x50>
 80161a0:	ebba 0b04 	subs.w	fp, sl, r4
 80161a4:	d00b      	beq.n	80161be <_svfiprintf_r+0x7a>
 80161a6:	465b      	mov	r3, fp
 80161a8:	4622      	mov	r2, r4
 80161aa:	4629      	mov	r1, r5
 80161ac:	4638      	mov	r0, r7
 80161ae:	f7ff ff6d 	bl	801608c <__ssputs_r>
 80161b2:	3001      	adds	r0, #1
 80161b4:	f000 80aa 	beq.w	801630c <_svfiprintf_r+0x1c8>
 80161b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161ba:	445a      	add	r2, fp
 80161bc:	9209      	str	r2, [sp, #36]	; 0x24
 80161be:	f89a 3000 	ldrb.w	r3, [sl]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	f000 80a2 	beq.w	801630c <_svfiprintf_r+0x1c8>
 80161c8:	2300      	movs	r3, #0
 80161ca:	f04f 32ff 	mov.w	r2, #4294967295
 80161ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161d2:	f10a 0a01 	add.w	sl, sl, #1
 80161d6:	9304      	str	r3, [sp, #16]
 80161d8:	9307      	str	r3, [sp, #28]
 80161da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161de:	931a      	str	r3, [sp, #104]	; 0x68
 80161e0:	4654      	mov	r4, sl
 80161e2:	2205      	movs	r2, #5
 80161e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e8:	4851      	ldr	r0, [pc, #324]	; (8016330 <_svfiprintf_r+0x1ec>)
 80161ea:	f7ea f829 	bl	8000240 <memchr>
 80161ee:	9a04      	ldr	r2, [sp, #16]
 80161f0:	b9d8      	cbnz	r0, 801622a <_svfiprintf_r+0xe6>
 80161f2:	06d0      	lsls	r0, r2, #27
 80161f4:	bf44      	itt	mi
 80161f6:	2320      	movmi	r3, #32
 80161f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161fc:	0711      	lsls	r1, r2, #28
 80161fe:	bf44      	itt	mi
 8016200:	232b      	movmi	r3, #43	; 0x2b
 8016202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016206:	f89a 3000 	ldrb.w	r3, [sl]
 801620a:	2b2a      	cmp	r3, #42	; 0x2a
 801620c:	d015      	beq.n	801623a <_svfiprintf_r+0xf6>
 801620e:	9a07      	ldr	r2, [sp, #28]
 8016210:	4654      	mov	r4, sl
 8016212:	2000      	movs	r0, #0
 8016214:	f04f 0c0a 	mov.w	ip, #10
 8016218:	4621      	mov	r1, r4
 801621a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801621e:	3b30      	subs	r3, #48	; 0x30
 8016220:	2b09      	cmp	r3, #9
 8016222:	d94e      	bls.n	80162c2 <_svfiprintf_r+0x17e>
 8016224:	b1b0      	cbz	r0, 8016254 <_svfiprintf_r+0x110>
 8016226:	9207      	str	r2, [sp, #28]
 8016228:	e014      	b.n	8016254 <_svfiprintf_r+0x110>
 801622a:	eba0 0308 	sub.w	r3, r0, r8
 801622e:	fa09 f303 	lsl.w	r3, r9, r3
 8016232:	4313      	orrs	r3, r2
 8016234:	9304      	str	r3, [sp, #16]
 8016236:	46a2      	mov	sl, r4
 8016238:	e7d2      	b.n	80161e0 <_svfiprintf_r+0x9c>
 801623a:	9b03      	ldr	r3, [sp, #12]
 801623c:	1d19      	adds	r1, r3, #4
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	9103      	str	r1, [sp, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	bfbb      	ittet	lt
 8016246:	425b      	neglt	r3, r3
 8016248:	f042 0202 	orrlt.w	r2, r2, #2
 801624c:	9307      	strge	r3, [sp, #28]
 801624e:	9307      	strlt	r3, [sp, #28]
 8016250:	bfb8      	it	lt
 8016252:	9204      	strlt	r2, [sp, #16]
 8016254:	7823      	ldrb	r3, [r4, #0]
 8016256:	2b2e      	cmp	r3, #46	; 0x2e
 8016258:	d10c      	bne.n	8016274 <_svfiprintf_r+0x130>
 801625a:	7863      	ldrb	r3, [r4, #1]
 801625c:	2b2a      	cmp	r3, #42	; 0x2a
 801625e:	d135      	bne.n	80162cc <_svfiprintf_r+0x188>
 8016260:	9b03      	ldr	r3, [sp, #12]
 8016262:	1d1a      	adds	r2, r3, #4
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	9203      	str	r2, [sp, #12]
 8016268:	2b00      	cmp	r3, #0
 801626a:	bfb8      	it	lt
 801626c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016270:	3402      	adds	r4, #2
 8016272:	9305      	str	r3, [sp, #20]
 8016274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016340 <_svfiprintf_r+0x1fc>
 8016278:	7821      	ldrb	r1, [r4, #0]
 801627a:	2203      	movs	r2, #3
 801627c:	4650      	mov	r0, sl
 801627e:	f7e9 ffdf 	bl	8000240 <memchr>
 8016282:	b140      	cbz	r0, 8016296 <_svfiprintf_r+0x152>
 8016284:	2340      	movs	r3, #64	; 0x40
 8016286:	eba0 000a 	sub.w	r0, r0, sl
 801628a:	fa03 f000 	lsl.w	r0, r3, r0
 801628e:	9b04      	ldr	r3, [sp, #16]
 8016290:	4303      	orrs	r3, r0
 8016292:	3401      	adds	r4, #1
 8016294:	9304      	str	r3, [sp, #16]
 8016296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801629a:	4826      	ldr	r0, [pc, #152]	; (8016334 <_svfiprintf_r+0x1f0>)
 801629c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80162a0:	2206      	movs	r2, #6
 80162a2:	f7e9 ffcd 	bl	8000240 <memchr>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d038      	beq.n	801631c <_svfiprintf_r+0x1d8>
 80162aa:	4b23      	ldr	r3, [pc, #140]	; (8016338 <_svfiprintf_r+0x1f4>)
 80162ac:	bb1b      	cbnz	r3, 80162f6 <_svfiprintf_r+0x1b2>
 80162ae:	9b03      	ldr	r3, [sp, #12]
 80162b0:	3307      	adds	r3, #7
 80162b2:	f023 0307 	bic.w	r3, r3, #7
 80162b6:	3308      	adds	r3, #8
 80162b8:	9303      	str	r3, [sp, #12]
 80162ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162bc:	4433      	add	r3, r6
 80162be:	9309      	str	r3, [sp, #36]	; 0x24
 80162c0:	e767      	b.n	8016192 <_svfiprintf_r+0x4e>
 80162c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80162c6:	460c      	mov	r4, r1
 80162c8:	2001      	movs	r0, #1
 80162ca:	e7a5      	b.n	8016218 <_svfiprintf_r+0xd4>
 80162cc:	2300      	movs	r3, #0
 80162ce:	3401      	adds	r4, #1
 80162d0:	9305      	str	r3, [sp, #20]
 80162d2:	4619      	mov	r1, r3
 80162d4:	f04f 0c0a 	mov.w	ip, #10
 80162d8:	4620      	mov	r0, r4
 80162da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162de:	3a30      	subs	r2, #48	; 0x30
 80162e0:	2a09      	cmp	r2, #9
 80162e2:	d903      	bls.n	80162ec <_svfiprintf_r+0x1a8>
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d0c5      	beq.n	8016274 <_svfiprintf_r+0x130>
 80162e8:	9105      	str	r1, [sp, #20]
 80162ea:	e7c3      	b.n	8016274 <_svfiprintf_r+0x130>
 80162ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80162f0:	4604      	mov	r4, r0
 80162f2:	2301      	movs	r3, #1
 80162f4:	e7f0      	b.n	80162d8 <_svfiprintf_r+0x194>
 80162f6:	ab03      	add	r3, sp, #12
 80162f8:	9300      	str	r3, [sp, #0]
 80162fa:	462a      	mov	r2, r5
 80162fc:	4b0f      	ldr	r3, [pc, #60]	; (801633c <_svfiprintf_r+0x1f8>)
 80162fe:	a904      	add	r1, sp, #16
 8016300:	4638      	mov	r0, r7
 8016302:	f3af 8000 	nop.w
 8016306:	1c42      	adds	r2, r0, #1
 8016308:	4606      	mov	r6, r0
 801630a:	d1d6      	bne.n	80162ba <_svfiprintf_r+0x176>
 801630c:	89ab      	ldrh	r3, [r5, #12]
 801630e:	065b      	lsls	r3, r3, #25
 8016310:	f53f af2c 	bmi.w	801616c <_svfiprintf_r+0x28>
 8016314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016316:	b01d      	add	sp, #116	; 0x74
 8016318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631c:	ab03      	add	r3, sp, #12
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	462a      	mov	r2, r5
 8016322:	4b06      	ldr	r3, [pc, #24]	; (801633c <_svfiprintf_r+0x1f8>)
 8016324:	a904      	add	r1, sp, #16
 8016326:	4638      	mov	r0, r7
 8016328:	f000 f9d4 	bl	80166d4 <_printf_i>
 801632c:	e7eb      	b.n	8016306 <_svfiprintf_r+0x1c2>
 801632e:	bf00      	nop
 8016330:	0801a51e 	.word	0x0801a51e
 8016334:	0801a528 	.word	0x0801a528
 8016338:	00000000 	.word	0x00000000
 801633c:	0801608d 	.word	0x0801608d
 8016340:	0801a524 	.word	0x0801a524

08016344 <__sfputc_r>:
 8016344:	6893      	ldr	r3, [r2, #8]
 8016346:	3b01      	subs	r3, #1
 8016348:	2b00      	cmp	r3, #0
 801634a:	b410      	push	{r4}
 801634c:	6093      	str	r3, [r2, #8]
 801634e:	da08      	bge.n	8016362 <__sfputc_r+0x1e>
 8016350:	6994      	ldr	r4, [r2, #24]
 8016352:	42a3      	cmp	r3, r4
 8016354:	db01      	blt.n	801635a <__sfputc_r+0x16>
 8016356:	290a      	cmp	r1, #10
 8016358:	d103      	bne.n	8016362 <__sfputc_r+0x1e>
 801635a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801635e:	f000 baf1 	b.w	8016944 <__swbuf_r>
 8016362:	6813      	ldr	r3, [r2, #0]
 8016364:	1c58      	adds	r0, r3, #1
 8016366:	6010      	str	r0, [r2, #0]
 8016368:	7019      	strb	r1, [r3, #0]
 801636a:	4608      	mov	r0, r1
 801636c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016370:	4770      	bx	lr

08016372 <__sfputs_r>:
 8016372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016374:	4606      	mov	r6, r0
 8016376:	460f      	mov	r7, r1
 8016378:	4614      	mov	r4, r2
 801637a:	18d5      	adds	r5, r2, r3
 801637c:	42ac      	cmp	r4, r5
 801637e:	d101      	bne.n	8016384 <__sfputs_r+0x12>
 8016380:	2000      	movs	r0, #0
 8016382:	e007      	b.n	8016394 <__sfputs_r+0x22>
 8016384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016388:	463a      	mov	r2, r7
 801638a:	4630      	mov	r0, r6
 801638c:	f7ff ffda 	bl	8016344 <__sfputc_r>
 8016390:	1c43      	adds	r3, r0, #1
 8016392:	d1f3      	bne.n	801637c <__sfputs_r+0xa>
 8016394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016398 <_vfiprintf_r>:
 8016398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639c:	460d      	mov	r5, r1
 801639e:	b09d      	sub	sp, #116	; 0x74
 80163a0:	4614      	mov	r4, r2
 80163a2:	4698      	mov	r8, r3
 80163a4:	4606      	mov	r6, r0
 80163a6:	b118      	cbz	r0, 80163b0 <_vfiprintf_r+0x18>
 80163a8:	6983      	ldr	r3, [r0, #24]
 80163aa:	b90b      	cbnz	r3, 80163b0 <_vfiprintf_r+0x18>
 80163ac:	f7ff fa08 	bl	80157c0 <__sinit>
 80163b0:	4b89      	ldr	r3, [pc, #548]	; (80165d8 <_vfiprintf_r+0x240>)
 80163b2:	429d      	cmp	r5, r3
 80163b4:	d11b      	bne.n	80163ee <_vfiprintf_r+0x56>
 80163b6:	6875      	ldr	r5, [r6, #4]
 80163b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163ba:	07d9      	lsls	r1, r3, #31
 80163bc:	d405      	bmi.n	80163ca <_vfiprintf_r+0x32>
 80163be:	89ab      	ldrh	r3, [r5, #12]
 80163c0:	059a      	lsls	r2, r3, #22
 80163c2:	d402      	bmi.n	80163ca <_vfiprintf_r+0x32>
 80163c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163c6:	f7ff fabe 	bl	8015946 <__retarget_lock_acquire_recursive>
 80163ca:	89ab      	ldrh	r3, [r5, #12]
 80163cc:	071b      	lsls	r3, r3, #28
 80163ce:	d501      	bpl.n	80163d4 <_vfiprintf_r+0x3c>
 80163d0:	692b      	ldr	r3, [r5, #16]
 80163d2:	b9eb      	cbnz	r3, 8016410 <_vfiprintf_r+0x78>
 80163d4:	4629      	mov	r1, r5
 80163d6:	4630      	mov	r0, r6
 80163d8:	f000 fb06 	bl	80169e8 <__swsetup_r>
 80163dc:	b1c0      	cbz	r0, 8016410 <_vfiprintf_r+0x78>
 80163de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163e0:	07dc      	lsls	r4, r3, #31
 80163e2:	d50e      	bpl.n	8016402 <_vfiprintf_r+0x6a>
 80163e4:	f04f 30ff 	mov.w	r0, #4294967295
 80163e8:	b01d      	add	sp, #116	; 0x74
 80163ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ee:	4b7b      	ldr	r3, [pc, #492]	; (80165dc <_vfiprintf_r+0x244>)
 80163f0:	429d      	cmp	r5, r3
 80163f2:	d101      	bne.n	80163f8 <_vfiprintf_r+0x60>
 80163f4:	68b5      	ldr	r5, [r6, #8]
 80163f6:	e7df      	b.n	80163b8 <_vfiprintf_r+0x20>
 80163f8:	4b79      	ldr	r3, [pc, #484]	; (80165e0 <_vfiprintf_r+0x248>)
 80163fa:	429d      	cmp	r5, r3
 80163fc:	bf08      	it	eq
 80163fe:	68f5      	ldreq	r5, [r6, #12]
 8016400:	e7da      	b.n	80163b8 <_vfiprintf_r+0x20>
 8016402:	89ab      	ldrh	r3, [r5, #12]
 8016404:	0598      	lsls	r0, r3, #22
 8016406:	d4ed      	bmi.n	80163e4 <_vfiprintf_r+0x4c>
 8016408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801640a:	f7ff fa9d 	bl	8015948 <__retarget_lock_release_recursive>
 801640e:	e7e9      	b.n	80163e4 <_vfiprintf_r+0x4c>
 8016410:	2300      	movs	r3, #0
 8016412:	9309      	str	r3, [sp, #36]	; 0x24
 8016414:	2320      	movs	r3, #32
 8016416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801641a:	f8cd 800c 	str.w	r8, [sp, #12]
 801641e:	2330      	movs	r3, #48	; 0x30
 8016420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80165e4 <_vfiprintf_r+0x24c>
 8016424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016428:	f04f 0901 	mov.w	r9, #1
 801642c:	4623      	mov	r3, r4
 801642e:	469a      	mov	sl, r3
 8016430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016434:	b10a      	cbz	r2, 801643a <_vfiprintf_r+0xa2>
 8016436:	2a25      	cmp	r2, #37	; 0x25
 8016438:	d1f9      	bne.n	801642e <_vfiprintf_r+0x96>
 801643a:	ebba 0b04 	subs.w	fp, sl, r4
 801643e:	d00b      	beq.n	8016458 <_vfiprintf_r+0xc0>
 8016440:	465b      	mov	r3, fp
 8016442:	4622      	mov	r2, r4
 8016444:	4629      	mov	r1, r5
 8016446:	4630      	mov	r0, r6
 8016448:	f7ff ff93 	bl	8016372 <__sfputs_r>
 801644c:	3001      	adds	r0, #1
 801644e:	f000 80aa 	beq.w	80165a6 <_vfiprintf_r+0x20e>
 8016452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016454:	445a      	add	r2, fp
 8016456:	9209      	str	r2, [sp, #36]	; 0x24
 8016458:	f89a 3000 	ldrb.w	r3, [sl]
 801645c:	2b00      	cmp	r3, #0
 801645e:	f000 80a2 	beq.w	80165a6 <_vfiprintf_r+0x20e>
 8016462:	2300      	movs	r3, #0
 8016464:	f04f 32ff 	mov.w	r2, #4294967295
 8016468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801646c:	f10a 0a01 	add.w	sl, sl, #1
 8016470:	9304      	str	r3, [sp, #16]
 8016472:	9307      	str	r3, [sp, #28]
 8016474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016478:	931a      	str	r3, [sp, #104]	; 0x68
 801647a:	4654      	mov	r4, sl
 801647c:	2205      	movs	r2, #5
 801647e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016482:	4858      	ldr	r0, [pc, #352]	; (80165e4 <_vfiprintf_r+0x24c>)
 8016484:	f7e9 fedc 	bl	8000240 <memchr>
 8016488:	9a04      	ldr	r2, [sp, #16]
 801648a:	b9d8      	cbnz	r0, 80164c4 <_vfiprintf_r+0x12c>
 801648c:	06d1      	lsls	r1, r2, #27
 801648e:	bf44      	itt	mi
 8016490:	2320      	movmi	r3, #32
 8016492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016496:	0713      	lsls	r3, r2, #28
 8016498:	bf44      	itt	mi
 801649a:	232b      	movmi	r3, #43	; 0x2b
 801649c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80164a0:	f89a 3000 	ldrb.w	r3, [sl]
 80164a4:	2b2a      	cmp	r3, #42	; 0x2a
 80164a6:	d015      	beq.n	80164d4 <_vfiprintf_r+0x13c>
 80164a8:	9a07      	ldr	r2, [sp, #28]
 80164aa:	4654      	mov	r4, sl
 80164ac:	2000      	movs	r0, #0
 80164ae:	f04f 0c0a 	mov.w	ip, #10
 80164b2:	4621      	mov	r1, r4
 80164b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164b8:	3b30      	subs	r3, #48	; 0x30
 80164ba:	2b09      	cmp	r3, #9
 80164bc:	d94e      	bls.n	801655c <_vfiprintf_r+0x1c4>
 80164be:	b1b0      	cbz	r0, 80164ee <_vfiprintf_r+0x156>
 80164c0:	9207      	str	r2, [sp, #28]
 80164c2:	e014      	b.n	80164ee <_vfiprintf_r+0x156>
 80164c4:	eba0 0308 	sub.w	r3, r0, r8
 80164c8:	fa09 f303 	lsl.w	r3, r9, r3
 80164cc:	4313      	orrs	r3, r2
 80164ce:	9304      	str	r3, [sp, #16]
 80164d0:	46a2      	mov	sl, r4
 80164d2:	e7d2      	b.n	801647a <_vfiprintf_r+0xe2>
 80164d4:	9b03      	ldr	r3, [sp, #12]
 80164d6:	1d19      	adds	r1, r3, #4
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	9103      	str	r1, [sp, #12]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	bfbb      	ittet	lt
 80164e0:	425b      	neglt	r3, r3
 80164e2:	f042 0202 	orrlt.w	r2, r2, #2
 80164e6:	9307      	strge	r3, [sp, #28]
 80164e8:	9307      	strlt	r3, [sp, #28]
 80164ea:	bfb8      	it	lt
 80164ec:	9204      	strlt	r2, [sp, #16]
 80164ee:	7823      	ldrb	r3, [r4, #0]
 80164f0:	2b2e      	cmp	r3, #46	; 0x2e
 80164f2:	d10c      	bne.n	801650e <_vfiprintf_r+0x176>
 80164f4:	7863      	ldrb	r3, [r4, #1]
 80164f6:	2b2a      	cmp	r3, #42	; 0x2a
 80164f8:	d135      	bne.n	8016566 <_vfiprintf_r+0x1ce>
 80164fa:	9b03      	ldr	r3, [sp, #12]
 80164fc:	1d1a      	adds	r2, r3, #4
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	9203      	str	r2, [sp, #12]
 8016502:	2b00      	cmp	r3, #0
 8016504:	bfb8      	it	lt
 8016506:	f04f 33ff 	movlt.w	r3, #4294967295
 801650a:	3402      	adds	r4, #2
 801650c:	9305      	str	r3, [sp, #20]
 801650e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80165f4 <_vfiprintf_r+0x25c>
 8016512:	7821      	ldrb	r1, [r4, #0]
 8016514:	2203      	movs	r2, #3
 8016516:	4650      	mov	r0, sl
 8016518:	f7e9 fe92 	bl	8000240 <memchr>
 801651c:	b140      	cbz	r0, 8016530 <_vfiprintf_r+0x198>
 801651e:	2340      	movs	r3, #64	; 0x40
 8016520:	eba0 000a 	sub.w	r0, r0, sl
 8016524:	fa03 f000 	lsl.w	r0, r3, r0
 8016528:	9b04      	ldr	r3, [sp, #16]
 801652a:	4303      	orrs	r3, r0
 801652c:	3401      	adds	r4, #1
 801652e:	9304      	str	r3, [sp, #16]
 8016530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016534:	482c      	ldr	r0, [pc, #176]	; (80165e8 <_vfiprintf_r+0x250>)
 8016536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801653a:	2206      	movs	r2, #6
 801653c:	f7e9 fe80 	bl	8000240 <memchr>
 8016540:	2800      	cmp	r0, #0
 8016542:	d03f      	beq.n	80165c4 <_vfiprintf_r+0x22c>
 8016544:	4b29      	ldr	r3, [pc, #164]	; (80165ec <_vfiprintf_r+0x254>)
 8016546:	bb1b      	cbnz	r3, 8016590 <_vfiprintf_r+0x1f8>
 8016548:	9b03      	ldr	r3, [sp, #12]
 801654a:	3307      	adds	r3, #7
 801654c:	f023 0307 	bic.w	r3, r3, #7
 8016550:	3308      	adds	r3, #8
 8016552:	9303      	str	r3, [sp, #12]
 8016554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016556:	443b      	add	r3, r7
 8016558:	9309      	str	r3, [sp, #36]	; 0x24
 801655a:	e767      	b.n	801642c <_vfiprintf_r+0x94>
 801655c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016560:	460c      	mov	r4, r1
 8016562:	2001      	movs	r0, #1
 8016564:	e7a5      	b.n	80164b2 <_vfiprintf_r+0x11a>
 8016566:	2300      	movs	r3, #0
 8016568:	3401      	adds	r4, #1
 801656a:	9305      	str	r3, [sp, #20]
 801656c:	4619      	mov	r1, r3
 801656e:	f04f 0c0a 	mov.w	ip, #10
 8016572:	4620      	mov	r0, r4
 8016574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016578:	3a30      	subs	r2, #48	; 0x30
 801657a:	2a09      	cmp	r2, #9
 801657c:	d903      	bls.n	8016586 <_vfiprintf_r+0x1ee>
 801657e:	2b00      	cmp	r3, #0
 8016580:	d0c5      	beq.n	801650e <_vfiprintf_r+0x176>
 8016582:	9105      	str	r1, [sp, #20]
 8016584:	e7c3      	b.n	801650e <_vfiprintf_r+0x176>
 8016586:	fb0c 2101 	mla	r1, ip, r1, r2
 801658a:	4604      	mov	r4, r0
 801658c:	2301      	movs	r3, #1
 801658e:	e7f0      	b.n	8016572 <_vfiprintf_r+0x1da>
 8016590:	ab03      	add	r3, sp, #12
 8016592:	9300      	str	r3, [sp, #0]
 8016594:	462a      	mov	r2, r5
 8016596:	4b16      	ldr	r3, [pc, #88]	; (80165f0 <_vfiprintf_r+0x258>)
 8016598:	a904      	add	r1, sp, #16
 801659a:	4630      	mov	r0, r6
 801659c:	f3af 8000 	nop.w
 80165a0:	4607      	mov	r7, r0
 80165a2:	1c78      	adds	r0, r7, #1
 80165a4:	d1d6      	bne.n	8016554 <_vfiprintf_r+0x1bc>
 80165a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80165a8:	07d9      	lsls	r1, r3, #31
 80165aa:	d405      	bmi.n	80165b8 <_vfiprintf_r+0x220>
 80165ac:	89ab      	ldrh	r3, [r5, #12]
 80165ae:	059a      	lsls	r2, r3, #22
 80165b0:	d402      	bmi.n	80165b8 <_vfiprintf_r+0x220>
 80165b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80165b4:	f7ff f9c8 	bl	8015948 <__retarget_lock_release_recursive>
 80165b8:	89ab      	ldrh	r3, [r5, #12]
 80165ba:	065b      	lsls	r3, r3, #25
 80165bc:	f53f af12 	bmi.w	80163e4 <_vfiprintf_r+0x4c>
 80165c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165c2:	e711      	b.n	80163e8 <_vfiprintf_r+0x50>
 80165c4:	ab03      	add	r3, sp, #12
 80165c6:	9300      	str	r3, [sp, #0]
 80165c8:	462a      	mov	r2, r5
 80165ca:	4b09      	ldr	r3, [pc, #36]	; (80165f0 <_vfiprintf_r+0x258>)
 80165cc:	a904      	add	r1, sp, #16
 80165ce:	4630      	mov	r0, r6
 80165d0:	f000 f880 	bl	80166d4 <_printf_i>
 80165d4:	e7e4      	b.n	80165a0 <_vfiprintf_r+0x208>
 80165d6:	bf00      	nop
 80165d8:	0801a42c 	.word	0x0801a42c
 80165dc:	0801a44c 	.word	0x0801a44c
 80165e0:	0801a40c 	.word	0x0801a40c
 80165e4:	0801a51e 	.word	0x0801a51e
 80165e8:	0801a528 	.word	0x0801a528
 80165ec:	00000000 	.word	0x00000000
 80165f0:	08016373 	.word	0x08016373
 80165f4:	0801a524 	.word	0x0801a524

080165f8 <_printf_common>:
 80165f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165fc:	4616      	mov	r6, r2
 80165fe:	4699      	mov	r9, r3
 8016600:	688a      	ldr	r2, [r1, #8]
 8016602:	690b      	ldr	r3, [r1, #16]
 8016604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016608:	4293      	cmp	r3, r2
 801660a:	bfb8      	it	lt
 801660c:	4613      	movlt	r3, r2
 801660e:	6033      	str	r3, [r6, #0]
 8016610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016614:	4607      	mov	r7, r0
 8016616:	460c      	mov	r4, r1
 8016618:	b10a      	cbz	r2, 801661e <_printf_common+0x26>
 801661a:	3301      	adds	r3, #1
 801661c:	6033      	str	r3, [r6, #0]
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	0699      	lsls	r1, r3, #26
 8016622:	bf42      	ittt	mi
 8016624:	6833      	ldrmi	r3, [r6, #0]
 8016626:	3302      	addmi	r3, #2
 8016628:	6033      	strmi	r3, [r6, #0]
 801662a:	6825      	ldr	r5, [r4, #0]
 801662c:	f015 0506 	ands.w	r5, r5, #6
 8016630:	d106      	bne.n	8016640 <_printf_common+0x48>
 8016632:	f104 0a19 	add.w	sl, r4, #25
 8016636:	68e3      	ldr	r3, [r4, #12]
 8016638:	6832      	ldr	r2, [r6, #0]
 801663a:	1a9b      	subs	r3, r3, r2
 801663c:	42ab      	cmp	r3, r5
 801663e:	dc26      	bgt.n	801668e <_printf_common+0x96>
 8016640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016644:	1e13      	subs	r3, r2, #0
 8016646:	6822      	ldr	r2, [r4, #0]
 8016648:	bf18      	it	ne
 801664a:	2301      	movne	r3, #1
 801664c:	0692      	lsls	r2, r2, #26
 801664e:	d42b      	bmi.n	80166a8 <_printf_common+0xb0>
 8016650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016654:	4649      	mov	r1, r9
 8016656:	4638      	mov	r0, r7
 8016658:	47c0      	blx	r8
 801665a:	3001      	adds	r0, #1
 801665c:	d01e      	beq.n	801669c <_printf_common+0xa4>
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	68e5      	ldr	r5, [r4, #12]
 8016662:	6832      	ldr	r2, [r6, #0]
 8016664:	f003 0306 	and.w	r3, r3, #6
 8016668:	2b04      	cmp	r3, #4
 801666a:	bf08      	it	eq
 801666c:	1aad      	subeq	r5, r5, r2
 801666e:	68a3      	ldr	r3, [r4, #8]
 8016670:	6922      	ldr	r2, [r4, #16]
 8016672:	bf0c      	ite	eq
 8016674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016678:	2500      	movne	r5, #0
 801667a:	4293      	cmp	r3, r2
 801667c:	bfc4      	itt	gt
 801667e:	1a9b      	subgt	r3, r3, r2
 8016680:	18ed      	addgt	r5, r5, r3
 8016682:	2600      	movs	r6, #0
 8016684:	341a      	adds	r4, #26
 8016686:	42b5      	cmp	r5, r6
 8016688:	d11a      	bne.n	80166c0 <_printf_common+0xc8>
 801668a:	2000      	movs	r0, #0
 801668c:	e008      	b.n	80166a0 <_printf_common+0xa8>
 801668e:	2301      	movs	r3, #1
 8016690:	4652      	mov	r2, sl
 8016692:	4649      	mov	r1, r9
 8016694:	4638      	mov	r0, r7
 8016696:	47c0      	blx	r8
 8016698:	3001      	adds	r0, #1
 801669a:	d103      	bne.n	80166a4 <_printf_common+0xac>
 801669c:	f04f 30ff 	mov.w	r0, #4294967295
 80166a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a4:	3501      	adds	r5, #1
 80166a6:	e7c6      	b.n	8016636 <_printf_common+0x3e>
 80166a8:	18e1      	adds	r1, r4, r3
 80166aa:	1c5a      	adds	r2, r3, #1
 80166ac:	2030      	movs	r0, #48	; 0x30
 80166ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166b2:	4422      	add	r2, r4
 80166b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166bc:	3302      	adds	r3, #2
 80166be:	e7c7      	b.n	8016650 <_printf_common+0x58>
 80166c0:	2301      	movs	r3, #1
 80166c2:	4622      	mov	r2, r4
 80166c4:	4649      	mov	r1, r9
 80166c6:	4638      	mov	r0, r7
 80166c8:	47c0      	blx	r8
 80166ca:	3001      	adds	r0, #1
 80166cc:	d0e6      	beq.n	801669c <_printf_common+0xa4>
 80166ce:	3601      	adds	r6, #1
 80166d0:	e7d9      	b.n	8016686 <_printf_common+0x8e>
	...

080166d4 <_printf_i>:
 80166d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166d8:	7e0f      	ldrb	r7, [r1, #24]
 80166da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166dc:	2f78      	cmp	r7, #120	; 0x78
 80166de:	4691      	mov	r9, r2
 80166e0:	4680      	mov	r8, r0
 80166e2:	460c      	mov	r4, r1
 80166e4:	469a      	mov	sl, r3
 80166e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166ea:	d807      	bhi.n	80166fc <_printf_i+0x28>
 80166ec:	2f62      	cmp	r7, #98	; 0x62
 80166ee:	d80a      	bhi.n	8016706 <_printf_i+0x32>
 80166f0:	2f00      	cmp	r7, #0
 80166f2:	f000 80d8 	beq.w	80168a6 <_printf_i+0x1d2>
 80166f6:	2f58      	cmp	r7, #88	; 0x58
 80166f8:	f000 80a3 	beq.w	8016842 <_printf_i+0x16e>
 80166fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016704:	e03a      	b.n	801677c <_printf_i+0xa8>
 8016706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801670a:	2b15      	cmp	r3, #21
 801670c:	d8f6      	bhi.n	80166fc <_printf_i+0x28>
 801670e:	a101      	add	r1, pc, #4	; (adr r1, 8016714 <_printf_i+0x40>)
 8016710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016714:	0801676d 	.word	0x0801676d
 8016718:	08016781 	.word	0x08016781
 801671c:	080166fd 	.word	0x080166fd
 8016720:	080166fd 	.word	0x080166fd
 8016724:	080166fd 	.word	0x080166fd
 8016728:	080166fd 	.word	0x080166fd
 801672c:	08016781 	.word	0x08016781
 8016730:	080166fd 	.word	0x080166fd
 8016734:	080166fd 	.word	0x080166fd
 8016738:	080166fd 	.word	0x080166fd
 801673c:	080166fd 	.word	0x080166fd
 8016740:	0801688d 	.word	0x0801688d
 8016744:	080167b1 	.word	0x080167b1
 8016748:	0801686f 	.word	0x0801686f
 801674c:	080166fd 	.word	0x080166fd
 8016750:	080166fd 	.word	0x080166fd
 8016754:	080168af 	.word	0x080168af
 8016758:	080166fd 	.word	0x080166fd
 801675c:	080167b1 	.word	0x080167b1
 8016760:	080166fd 	.word	0x080166fd
 8016764:	080166fd 	.word	0x080166fd
 8016768:	08016877 	.word	0x08016877
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	1d1a      	adds	r2, r3, #4
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	602a      	str	r2, [r5, #0]
 8016774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801677c:	2301      	movs	r3, #1
 801677e:	e0a3      	b.n	80168c8 <_printf_i+0x1f4>
 8016780:	6820      	ldr	r0, [r4, #0]
 8016782:	6829      	ldr	r1, [r5, #0]
 8016784:	0606      	lsls	r6, r0, #24
 8016786:	f101 0304 	add.w	r3, r1, #4
 801678a:	d50a      	bpl.n	80167a2 <_printf_i+0xce>
 801678c:	680e      	ldr	r6, [r1, #0]
 801678e:	602b      	str	r3, [r5, #0]
 8016790:	2e00      	cmp	r6, #0
 8016792:	da03      	bge.n	801679c <_printf_i+0xc8>
 8016794:	232d      	movs	r3, #45	; 0x2d
 8016796:	4276      	negs	r6, r6
 8016798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801679c:	485e      	ldr	r0, [pc, #376]	; (8016918 <_printf_i+0x244>)
 801679e:	230a      	movs	r3, #10
 80167a0:	e019      	b.n	80167d6 <_printf_i+0x102>
 80167a2:	680e      	ldr	r6, [r1, #0]
 80167a4:	602b      	str	r3, [r5, #0]
 80167a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167aa:	bf18      	it	ne
 80167ac:	b236      	sxthne	r6, r6
 80167ae:	e7ef      	b.n	8016790 <_printf_i+0xbc>
 80167b0:	682b      	ldr	r3, [r5, #0]
 80167b2:	6820      	ldr	r0, [r4, #0]
 80167b4:	1d19      	adds	r1, r3, #4
 80167b6:	6029      	str	r1, [r5, #0]
 80167b8:	0601      	lsls	r1, r0, #24
 80167ba:	d501      	bpl.n	80167c0 <_printf_i+0xec>
 80167bc:	681e      	ldr	r6, [r3, #0]
 80167be:	e002      	b.n	80167c6 <_printf_i+0xf2>
 80167c0:	0646      	lsls	r6, r0, #25
 80167c2:	d5fb      	bpl.n	80167bc <_printf_i+0xe8>
 80167c4:	881e      	ldrh	r6, [r3, #0]
 80167c6:	4854      	ldr	r0, [pc, #336]	; (8016918 <_printf_i+0x244>)
 80167c8:	2f6f      	cmp	r7, #111	; 0x6f
 80167ca:	bf0c      	ite	eq
 80167cc:	2308      	moveq	r3, #8
 80167ce:	230a      	movne	r3, #10
 80167d0:	2100      	movs	r1, #0
 80167d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167d6:	6865      	ldr	r5, [r4, #4]
 80167d8:	60a5      	str	r5, [r4, #8]
 80167da:	2d00      	cmp	r5, #0
 80167dc:	bfa2      	ittt	ge
 80167de:	6821      	ldrge	r1, [r4, #0]
 80167e0:	f021 0104 	bicge.w	r1, r1, #4
 80167e4:	6021      	strge	r1, [r4, #0]
 80167e6:	b90e      	cbnz	r6, 80167ec <_printf_i+0x118>
 80167e8:	2d00      	cmp	r5, #0
 80167ea:	d04d      	beq.n	8016888 <_printf_i+0x1b4>
 80167ec:	4615      	mov	r5, r2
 80167ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80167f2:	fb03 6711 	mls	r7, r3, r1, r6
 80167f6:	5dc7      	ldrb	r7, [r0, r7]
 80167f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167fc:	4637      	mov	r7, r6
 80167fe:	42bb      	cmp	r3, r7
 8016800:	460e      	mov	r6, r1
 8016802:	d9f4      	bls.n	80167ee <_printf_i+0x11a>
 8016804:	2b08      	cmp	r3, #8
 8016806:	d10b      	bne.n	8016820 <_printf_i+0x14c>
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	07de      	lsls	r6, r3, #31
 801680c:	d508      	bpl.n	8016820 <_printf_i+0x14c>
 801680e:	6923      	ldr	r3, [r4, #16]
 8016810:	6861      	ldr	r1, [r4, #4]
 8016812:	4299      	cmp	r1, r3
 8016814:	bfde      	ittt	le
 8016816:	2330      	movle	r3, #48	; 0x30
 8016818:	f805 3c01 	strble.w	r3, [r5, #-1]
 801681c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016820:	1b52      	subs	r2, r2, r5
 8016822:	6122      	str	r2, [r4, #16]
 8016824:	f8cd a000 	str.w	sl, [sp]
 8016828:	464b      	mov	r3, r9
 801682a:	aa03      	add	r2, sp, #12
 801682c:	4621      	mov	r1, r4
 801682e:	4640      	mov	r0, r8
 8016830:	f7ff fee2 	bl	80165f8 <_printf_common>
 8016834:	3001      	adds	r0, #1
 8016836:	d14c      	bne.n	80168d2 <_printf_i+0x1fe>
 8016838:	f04f 30ff 	mov.w	r0, #4294967295
 801683c:	b004      	add	sp, #16
 801683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016842:	4835      	ldr	r0, [pc, #212]	; (8016918 <_printf_i+0x244>)
 8016844:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016848:	6829      	ldr	r1, [r5, #0]
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016850:	6029      	str	r1, [r5, #0]
 8016852:	061d      	lsls	r5, r3, #24
 8016854:	d514      	bpl.n	8016880 <_printf_i+0x1ac>
 8016856:	07df      	lsls	r7, r3, #31
 8016858:	bf44      	itt	mi
 801685a:	f043 0320 	orrmi.w	r3, r3, #32
 801685e:	6023      	strmi	r3, [r4, #0]
 8016860:	b91e      	cbnz	r6, 801686a <_printf_i+0x196>
 8016862:	6823      	ldr	r3, [r4, #0]
 8016864:	f023 0320 	bic.w	r3, r3, #32
 8016868:	6023      	str	r3, [r4, #0]
 801686a:	2310      	movs	r3, #16
 801686c:	e7b0      	b.n	80167d0 <_printf_i+0xfc>
 801686e:	6823      	ldr	r3, [r4, #0]
 8016870:	f043 0320 	orr.w	r3, r3, #32
 8016874:	6023      	str	r3, [r4, #0]
 8016876:	2378      	movs	r3, #120	; 0x78
 8016878:	4828      	ldr	r0, [pc, #160]	; (801691c <_printf_i+0x248>)
 801687a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801687e:	e7e3      	b.n	8016848 <_printf_i+0x174>
 8016880:	0659      	lsls	r1, r3, #25
 8016882:	bf48      	it	mi
 8016884:	b2b6      	uxthmi	r6, r6
 8016886:	e7e6      	b.n	8016856 <_printf_i+0x182>
 8016888:	4615      	mov	r5, r2
 801688a:	e7bb      	b.n	8016804 <_printf_i+0x130>
 801688c:	682b      	ldr	r3, [r5, #0]
 801688e:	6826      	ldr	r6, [r4, #0]
 8016890:	6961      	ldr	r1, [r4, #20]
 8016892:	1d18      	adds	r0, r3, #4
 8016894:	6028      	str	r0, [r5, #0]
 8016896:	0635      	lsls	r5, r6, #24
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	d501      	bpl.n	80168a0 <_printf_i+0x1cc>
 801689c:	6019      	str	r1, [r3, #0]
 801689e:	e002      	b.n	80168a6 <_printf_i+0x1d2>
 80168a0:	0670      	lsls	r0, r6, #25
 80168a2:	d5fb      	bpl.n	801689c <_printf_i+0x1c8>
 80168a4:	8019      	strh	r1, [r3, #0]
 80168a6:	2300      	movs	r3, #0
 80168a8:	6123      	str	r3, [r4, #16]
 80168aa:	4615      	mov	r5, r2
 80168ac:	e7ba      	b.n	8016824 <_printf_i+0x150>
 80168ae:	682b      	ldr	r3, [r5, #0]
 80168b0:	1d1a      	adds	r2, r3, #4
 80168b2:	602a      	str	r2, [r5, #0]
 80168b4:	681d      	ldr	r5, [r3, #0]
 80168b6:	6862      	ldr	r2, [r4, #4]
 80168b8:	2100      	movs	r1, #0
 80168ba:	4628      	mov	r0, r5
 80168bc:	f7e9 fcc0 	bl	8000240 <memchr>
 80168c0:	b108      	cbz	r0, 80168c6 <_printf_i+0x1f2>
 80168c2:	1b40      	subs	r0, r0, r5
 80168c4:	6060      	str	r0, [r4, #4]
 80168c6:	6863      	ldr	r3, [r4, #4]
 80168c8:	6123      	str	r3, [r4, #16]
 80168ca:	2300      	movs	r3, #0
 80168cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168d0:	e7a8      	b.n	8016824 <_printf_i+0x150>
 80168d2:	6923      	ldr	r3, [r4, #16]
 80168d4:	462a      	mov	r2, r5
 80168d6:	4649      	mov	r1, r9
 80168d8:	4640      	mov	r0, r8
 80168da:	47d0      	blx	sl
 80168dc:	3001      	adds	r0, #1
 80168de:	d0ab      	beq.n	8016838 <_printf_i+0x164>
 80168e0:	6823      	ldr	r3, [r4, #0]
 80168e2:	079b      	lsls	r3, r3, #30
 80168e4:	d413      	bmi.n	801690e <_printf_i+0x23a>
 80168e6:	68e0      	ldr	r0, [r4, #12]
 80168e8:	9b03      	ldr	r3, [sp, #12]
 80168ea:	4298      	cmp	r0, r3
 80168ec:	bfb8      	it	lt
 80168ee:	4618      	movlt	r0, r3
 80168f0:	e7a4      	b.n	801683c <_printf_i+0x168>
 80168f2:	2301      	movs	r3, #1
 80168f4:	4632      	mov	r2, r6
 80168f6:	4649      	mov	r1, r9
 80168f8:	4640      	mov	r0, r8
 80168fa:	47d0      	blx	sl
 80168fc:	3001      	adds	r0, #1
 80168fe:	d09b      	beq.n	8016838 <_printf_i+0x164>
 8016900:	3501      	adds	r5, #1
 8016902:	68e3      	ldr	r3, [r4, #12]
 8016904:	9903      	ldr	r1, [sp, #12]
 8016906:	1a5b      	subs	r3, r3, r1
 8016908:	42ab      	cmp	r3, r5
 801690a:	dcf2      	bgt.n	80168f2 <_printf_i+0x21e>
 801690c:	e7eb      	b.n	80168e6 <_printf_i+0x212>
 801690e:	2500      	movs	r5, #0
 8016910:	f104 0619 	add.w	r6, r4, #25
 8016914:	e7f5      	b.n	8016902 <_printf_i+0x22e>
 8016916:	bf00      	nop
 8016918:	0801a52f 	.word	0x0801a52f
 801691c:	0801a540 	.word	0x0801a540

08016920 <_read_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	4d07      	ldr	r5, [pc, #28]	; (8016940 <_read_r+0x20>)
 8016924:	4604      	mov	r4, r0
 8016926:	4608      	mov	r0, r1
 8016928:	4611      	mov	r1, r2
 801692a:	2200      	movs	r2, #0
 801692c:	602a      	str	r2, [r5, #0]
 801692e:	461a      	mov	r2, r3
 8016930:	f7ea f996 	bl	8000c60 <_read>
 8016934:	1c43      	adds	r3, r0, #1
 8016936:	d102      	bne.n	801693e <_read_r+0x1e>
 8016938:	682b      	ldr	r3, [r5, #0]
 801693a:	b103      	cbz	r3, 801693e <_read_r+0x1e>
 801693c:	6023      	str	r3, [r4, #0]
 801693e:	bd38      	pop	{r3, r4, r5, pc}
 8016940:	2000f034 	.word	0x2000f034

08016944 <__swbuf_r>:
 8016944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016946:	460e      	mov	r6, r1
 8016948:	4614      	mov	r4, r2
 801694a:	4605      	mov	r5, r0
 801694c:	b118      	cbz	r0, 8016956 <__swbuf_r+0x12>
 801694e:	6983      	ldr	r3, [r0, #24]
 8016950:	b90b      	cbnz	r3, 8016956 <__swbuf_r+0x12>
 8016952:	f7fe ff35 	bl	80157c0 <__sinit>
 8016956:	4b21      	ldr	r3, [pc, #132]	; (80169dc <__swbuf_r+0x98>)
 8016958:	429c      	cmp	r4, r3
 801695a:	d12b      	bne.n	80169b4 <__swbuf_r+0x70>
 801695c:	686c      	ldr	r4, [r5, #4]
 801695e:	69a3      	ldr	r3, [r4, #24]
 8016960:	60a3      	str	r3, [r4, #8]
 8016962:	89a3      	ldrh	r3, [r4, #12]
 8016964:	071a      	lsls	r2, r3, #28
 8016966:	d52f      	bpl.n	80169c8 <__swbuf_r+0x84>
 8016968:	6923      	ldr	r3, [r4, #16]
 801696a:	b36b      	cbz	r3, 80169c8 <__swbuf_r+0x84>
 801696c:	6923      	ldr	r3, [r4, #16]
 801696e:	6820      	ldr	r0, [r4, #0]
 8016970:	1ac0      	subs	r0, r0, r3
 8016972:	6963      	ldr	r3, [r4, #20]
 8016974:	b2f6      	uxtb	r6, r6
 8016976:	4283      	cmp	r3, r0
 8016978:	4637      	mov	r7, r6
 801697a:	dc04      	bgt.n	8016986 <__swbuf_r+0x42>
 801697c:	4621      	mov	r1, r4
 801697e:	4628      	mov	r0, r5
 8016980:	f7ff fb18 	bl	8015fb4 <_fflush_r>
 8016984:	bb30      	cbnz	r0, 80169d4 <__swbuf_r+0x90>
 8016986:	68a3      	ldr	r3, [r4, #8]
 8016988:	3b01      	subs	r3, #1
 801698a:	60a3      	str	r3, [r4, #8]
 801698c:	6823      	ldr	r3, [r4, #0]
 801698e:	1c5a      	adds	r2, r3, #1
 8016990:	6022      	str	r2, [r4, #0]
 8016992:	701e      	strb	r6, [r3, #0]
 8016994:	6963      	ldr	r3, [r4, #20]
 8016996:	3001      	adds	r0, #1
 8016998:	4283      	cmp	r3, r0
 801699a:	d004      	beq.n	80169a6 <__swbuf_r+0x62>
 801699c:	89a3      	ldrh	r3, [r4, #12]
 801699e:	07db      	lsls	r3, r3, #31
 80169a0:	d506      	bpl.n	80169b0 <__swbuf_r+0x6c>
 80169a2:	2e0a      	cmp	r6, #10
 80169a4:	d104      	bne.n	80169b0 <__swbuf_r+0x6c>
 80169a6:	4621      	mov	r1, r4
 80169a8:	4628      	mov	r0, r5
 80169aa:	f7ff fb03 	bl	8015fb4 <_fflush_r>
 80169ae:	b988      	cbnz	r0, 80169d4 <__swbuf_r+0x90>
 80169b0:	4638      	mov	r0, r7
 80169b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b4:	4b0a      	ldr	r3, [pc, #40]	; (80169e0 <__swbuf_r+0x9c>)
 80169b6:	429c      	cmp	r4, r3
 80169b8:	d101      	bne.n	80169be <__swbuf_r+0x7a>
 80169ba:	68ac      	ldr	r4, [r5, #8]
 80169bc:	e7cf      	b.n	801695e <__swbuf_r+0x1a>
 80169be:	4b09      	ldr	r3, [pc, #36]	; (80169e4 <__swbuf_r+0xa0>)
 80169c0:	429c      	cmp	r4, r3
 80169c2:	bf08      	it	eq
 80169c4:	68ec      	ldreq	r4, [r5, #12]
 80169c6:	e7ca      	b.n	801695e <__swbuf_r+0x1a>
 80169c8:	4621      	mov	r1, r4
 80169ca:	4628      	mov	r0, r5
 80169cc:	f000 f80c 	bl	80169e8 <__swsetup_r>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d0cb      	beq.n	801696c <__swbuf_r+0x28>
 80169d4:	f04f 37ff 	mov.w	r7, #4294967295
 80169d8:	e7ea      	b.n	80169b0 <__swbuf_r+0x6c>
 80169da:	bf00      	nop
 80169dc:	0801a42c 	.word	0x0801a42c
 80169e0:	0801a44c 	.word	0x0801a44c
 80169e4:	0801a40c 	.word	0x0801a40c

080169e8 <__swsetup_r>:
 80169e8:	4b32      	ldr	r3, [pc, #200]	; (8016ab4 <__swsetup_r+0xcc>)
 80169ea:	b570      	push	{r4, r5, r6, lr}
 80169ec:	681d      	ldr	r5, [r3, #0]
 80169ee:	4606      	mov	r6, r0
 80169f0:	460c      	mov	r4, r1
 80169f2:	b125      	cbz	r5, 80169fe <__swsetup_r+0x16>
 80169f4:	69ab      	ldr	r3, [r5, #24]
 80169f6:	b913      	cbnz	r3, 80169fe <__swsetup_r+0x16>
 80169f8:	4628      	mov	r0, r5
 80169fa:	f7fe fee1 	bl	80157c0 <__sinit>
 80169fe:	4b2e      	ldr	r3, [pc, #184]	; (8016ab8 <__swsetup_r+0xd0>)
 8016a00:	429c      	cmp	r4, r3
 8016a02:	d10f      	bne.n	8016a24 <__swsetup_r+0x3c>
 8016a04:	686c      	ldr	r4, [r5, #4]
 8016a06:	89a3      	ldrh	r3, [r4, #12]
 8016a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a0c:	0719      	lsls	r1, r3, #28
 8016a0e:	d42c      	bmi.n	8016a6a <__swsetup_r+0x82>
 8016a10:	06dd      	lsls	r5, r3, #27
 8016a12:	d411      	bmi.n	8016a38 <__swsetup_r+0x50>
 8016a14:	2309      	movs	r3, #9
 8016a16:	6033      	str	r3, [r6, #0]
 8016a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a1c:	81a3      	strh	r3, [r4, #12]
 8016a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a22:	e03e      	b.n	8016aa2 <__swsetup_r+0xba>
 8016a24:	4b25      	ldr	r3, [pc, #148]	; (8016abc <__swsetup_r+0xd4>)
 8016a26:	429c      	cmp	r4, r3
 8016a28:	d101      	bne.n	8016a2e <__swsetup_r+0x46>
 8016a2a:	68ac      	ldr	r4, [r5, #8]
 8016a2c:	e7eb      	b.n	8016a06 <__swsetup_r+0x1e>
 8016a2e:	4b24      	ldr	r3, [pc, #144]	; (8016ac0 <__swsetup_r+0xd8>)
 8016a30:	429c      	cmp	r4, r3
 8016a32:	bf08      	it	eq
 8016a34:	68ec      	ldreq	r4, [r5, #12]
 8016a36:	e7e6      	b.n	8016a06 <__swsetup_r+0x1e>
 8016a38:	0758      	lsls	r0, r3, #29
 8016a3a:	d512      	bpl.n	8016a62 <__swsetup_r+0x7a>
 8016a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a3e:	b141      	cbz	r1, 8016a52 <__swsetup_r+0x6a>
 8016a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a44:	4299      	cmp	r1, r3
 8016a46:	d002      	beq.n	8016a4e <__swsetup_r+0x66>
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f7fe ffc7 	bl	80159dc <_free_r>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	6363      	str	r3, [r4, #52]	; 0x34
 8016a52:	89a3      	ldrh	r3, [r4, #12]
 8016a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016a58:	81a3      	strh	r3, [r4, #12]
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	6063      	str	r3, [r4, #4]
 8016a5e:	6923      	ldr	r3, [r4, #16]
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	89a3      	ldrh	r3, [r4, #12]
 8016a64:	f043 0308 	orr.w	r3, r3, #8
 8016a68:	81a3      	strh	r3, [r4, #12]
 8016a6a:	6923      	ldr	r3, [r4, #16]
 8016a6c:	b94b      	cbnz	r3, 8016a82 <__swsetup_r+0x9a>
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a78:	d003      	beq.n	8016a82 <__swsetup_r+0x9a>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f000 f84d 	bl	8016b1c <__smakebuf_r>
 8016a82:	89a0      	ldrh	r0, [r4, #12]
 8016a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a88:	f010 0301 	ands.w	r3, r0, #1
 8016a8c:	d00a      	beq.n	8016aa4 <__swsetup_r+0xbc>
 8016a8e:	2300      	movs	r3, #0
 8016a90:	60a3      	str	r3, [r4, #8]
 8016a92:	6963      	ldr	r3, [r4, #20]
 8016a94:	425b      	negs	r3, r3
 8016a96:	61a3      	str	r3, [r4, #24]
 8016a98:	6923      	ldr	r3, [r4, #16]
 8016a9a:	b943      	cbnz	r3, 8016aae <__swsetup_r+0xc6>
 8016a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016aa0:	d1ba      	bne.n	8016a18 <__swsetup_r+0x30>
 8016aa2:	bd70      	pop	{r4, r5, r6, pc}
 8016aa4:	0781      	lsls	r1, r0, #30
 8016aa6:	bf58      	it	pl
 8016aa8:	6963      	ldrpl	r3, [r4, #20]
 8016aaa:	60a3      	str	r3, [r4, #8]
 8016aac:	e7f4      	b.n	8016a98 <__swsetup_r+0xb0>
 8016aae:	2000      	movs	r0, #0
 8016ab0:	e7f7      	b.n	8016aa2 <__swsetup_r+0xba>
 8016ab2:	bf00      	nop
 8016ab4:	20000030 	.word	0x20000030
 8016ab8:	0801a42c 	.word	0x0801a42c
 8016abc:	0801a44c 	.word	0x0801a44c
 8016ac0:	0801a40c 	.word	0x0801a40c

08016ac4 <abort>:
 8016ac4:	b508      	push	{r3, lr}
 8016ac6:	2006      	movs	r0, #6
 8016ac8:	f000 f8c0 	bl	8016c4c <raise>
 8016acc:	2001      	movs	r0, #1
 8016ace:	f7ea f8bd 	bl	8000c4c <_exit>

08016ad2 <__swhatbuf_r>:
 8016ad2:	b570      	push	{r4, r5, r6, lr}
 8016ad4:	460e      	mov	r6, r1
 8016ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ada:	2900      	cmp	r1, #0
 8016adc:	b096      	sub	sp, #88	; 0x58
 8016ade:	4614      	mov	r4, r2
 8016ae0:	461d      	mov	r5, r3
 8016ae2:	da08      	bge.n	8016af6 <__swhatbuf_r+0x24>
 8016ae4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	602a      	str	r2, [r5, #0]
 8016aec:	061a      	lsls	r2, r3, #24
 8016aee:	d410      	bmi.n	8016b12 <__swhatbuf_r+0x40>
 8016af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016af4:	e00e      	b.n	8016b14 <__swhatbuf_r+0x42>
 8016af6:	466a      	mov	r2, sp
 8016af8:	f000 f8c4 	bl	8016c84 <_fstat_r>
 8016afc:	2800      	cmp	r0, #0
 8016afe:	dbf1      	blt.n	8016ae4 <__swhatbuf_r+0x12>
 8016b00:	9a01      	ldr	r2, [sp, #4]
 8016b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b0a:	425a      	negs	r2, r3
 8016b0c:	415a      	adcs	r2, r3
 8016b0e:	602a      	str	r2, [r5, #0]
 8016b10:	e7ee      	b.n	8016af0 <__swhatbuf_r+0x1e>
 8016b12:	2340      	movs	r3, #64	; 0x40
 8016b14:	2000      	movs	r0, #0
 8016b16:	6023      	str	r3, [r4, #0]
 8016b18:	b016      	add	sp, #88	; 0x58
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}

08016b1c <__smakebuf_r>:
 8016b1c:	898b      	ldrh	r3, [r1, #12]
 8016b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b20:	079d      	lsls	r5, r3, #30
 8016b22:	4606      	mov	r6, r0
 8016b24:	460c      	mov	r4, r1
 8016b26:	d507      	bpl.n	8016b38 <__smakebuf_r+0x1c>
 8016b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b2c:	6023      	str	r3, [r4, #0]
 8016b2e:	6123      	str	r3, [r4, #16]
 8016b30:	2301      	movs	r3, #1
 8016b32:	6163      	str	r3, [r4, #20]
 8016b34:	b002      	add	sp, #8
 8016b36:	bd70      	pop	{r4, r5, r6, pc}
 8016b38:	ab01      	add	r3, sp, #4
 8016b3a:	466a      	mov	r2, sp
 8016b3c:	f7ff ffc9 	bl	8016ad2 <__swhatbuf_r>
 8016b40:	9900      	ldr	r1, [sp, #0]
 8016b42:	4605      	mov	r5, r0
 8016b44:	4630      	mov	r0, r6
 8016b46:	f7fe ffb5 	bl	8015ab4 <_malloc_r>
 8016b4a:	b948      	cbnz	r0, 8016b60 <__smakebuf_r+0x44>
 8016b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b50:	059a      	lsls	r2, r3, #22
 8016b52:	d4ef      	bmi.n	8016b34 <__smakebuf_r+0x18>
 8016b54:	f023 0303 	bic.w	r3, r3, #3
 8016b58:	f043 0302 	orr.w	r3, r3, #2
 8016b5c:	81a3      	strh	r3, [r4, #12]
 8016b5e:	e7e3      	b.n	8016b28 <__smakebuf_r+0xc>
 8016b60:	4b0d      	ldr	r3, [pc, #52]	; (8016b98 <__smakebuf_r+0x7c>)
 8016b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b64:	89a3      	ldrh	r3, [r4, #12]
 8016b66:	6020      	str	r0, [r4, #0]
 8016b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b6c:	81a3      	strh	r3, [r4, #12]
 8016b6e:	9b00      	ldr	r3, [sp, #0]
 8016b70:	6163      	str	r3, [r4, #20]
 8016b72:	9b01      	ldr	r3, [sp, #4]
 8016b74:	6120      	str	r0, [r4, #16]
 8016b76:	b15b      	cbz	r3, 8016b90 <__smakebuf_r+0x74>
 8016b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	f000 f893 	bl	8016ca8 <_isatty_r>
 8016b82:	b128      	cbz	r0, 8016b90 <__smakebuf_r+0x74>
 8016b84:	89a3      	ldrh	r3, [r4, #12]
 8016b86:	f023 0303 	bic.w	r3, r3, #3
 8016b8a:	f043 0301 	orr.w	r3, r3, #1
 8016b8e:	81a3      	strh	r3, [r4, #12]
 8016b90:	89a0      	ldrh	r0, [r4, #12]
 8016b92:	4305      	orrs	r5, r0
 8016b94:	81a5      	strh	r5, [r4, #12]
 8016b96:	e7cd      	b.n	8016b34 <__smakebuf_r+0x18>
 8016b98:	08015759 	.word	0x08015759

08016b9c <_realloc_r>:
 8016b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba0:	4680      	mov	r8, r0
 8016ba2:	4614      	mov	r4, r2
 8016ba4:	460e      	mov	r6, r1
 8016ba6:	b921      	cbnz	r1, 8016bb2 <_realloc_r+0x16>
 8016ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bac:	4611      	mov	r1, r2
 8016bae:	f7fe bf81 	b.w	8015ab4 <_malloc_r>
 8016bb2:	b92a      	cbnz	r2, 8016bc0 <_realloc_r+0x24>
 8016bb4:	f7fe ff12 	bl	80159dc <_free_r>
 8016bb8:	4625      	mov	r5, r4
 8016bba:	4628      	mov	r0, r5
 8016bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc0:	f000 f882 	bl	8016cc8 <_malloc_usable_size_r>
 8016bc4:	4284      	cmp	r4, r0
 8016bc6:	4607      	mov	r7, r0
 8016bc8:	d802      	bhi.n	8016bd0 <_realloc_r+0x34>
 8016bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016bce:	d812      	bhi.n	8016bf6 <_realloc_r+0x5a>
 8016bd0:	4621      	mov	r1, r4
 8016bd2:	4640      	mov	r0, r8
 8016bd4:	f7fe ff6e 	bl	8015ab4 <_malloc_r>
 8016bd8:	4605      	mov	r5, r0
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d0ed      	beq.n	8016bba <_realloc_r+0x1e>
 8016bde:	42bc      	cmp	r4, r7
 8016be0:	4622      	mov	r2, r4
 8016be2:	4631      	mov	r1, r6
 8016be4:	bf28      	it	cs
 8016be6:	463a      	movcs	r2, r7
 8016be8:	f7fe fec8 	bl	801597c <memcpy>
 8016bec:	4631      	mov	r1, r6
 8016bee:	4640      	mov	r0, r8
 8016bf0:	f7fe fef4 	bl	80159dc <_free_r>
 8016bf4:	e7e1      	b.n	8016bba <_realloc_r+0x1e>
 8016bf6:	4635      	mov	r5, r6
 8016bf8:	e7df      	b.n	8016bba <_realloc_r+0x1e>

08016bfa <_raise_r>:
 8016bfa:	291f      	cmp	r1, #31
 8016bfc:	b538      	push	{r3, r4, r5, lr}
 8016bfe:	4604      	mov	r4, r0
 8016c00:	460d      	mov	r5, r1
 8016c02:	d904      	bls.n	8016c0e <_raise_r+0x14>
 8016c04:	2316      	movs	r3, #22
 8016c06:	6003      	str	r3, [r0, #0]
 8016c08:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0c:	bd38      	pop	{r3, r4, r5, pc}
 8016c0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c10:	b112      	cbz	r2, 8016c18 <_raise_r+0x1e>
 8016c12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c16:	b94b      	cbnz	r3, 8016c2c <_raise_r+0x32>
 8016c18:	4620      	mov	r0, r4
 8016c1a:	f000 f831 	bl	8016c80 <_getpid_r>
 8016c1e:	462a      	mov	r2, r5
 8016c20:	4601      	mov	r1, r0
 8016c22:	4620      	mov	r0, r4
 8016c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c28:	f000 b818 	b.w	8016c5c <_kill_r>
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	d00a      	beq.n	8016c46 <_raise_r+0x4c>
 8016c30:	1c59      	adds	r1, r3, #1
 8016c32:	d103      	bne.n	8016c3c <_raise_r+0x42>
 8016c34:	2316      	movs	r3, #22
 8016c36:	6003      	str	r3, [r0, #0]
 8016c38:	2001      	movs	r0, #1
 8016c3a:	e7e7      	b.n	8016c0c <_raise_r+0x12>
 8016c3c:	2400      	movs	r4, #0
 8016c3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016c42:	4628      	mov	r0, r5
 8016c44:	4798      	blx	r3
 8016c46:	2000      	movs	r0, #0
 8016c48:	e7e0      	b.n	8016c0c <_raise_r+0x12>
	...

08016c4c <raise>:
 8016c4c:	4b02      	ldr	r3, [pc, #8]	; (8016c58 <raise+0xc>)
 8016c4e:	4601      	mov	r1, r0
 8016c50:	6818      	ldr	r0, [r3, #0]
 8016c52:	f7ff bfd2 	b.w	8016bfa <_raise_r>
 8016c56:	bf00      	nop
 8016c58:	20000030 	.word	0x20000030

08016c5c <_kill_r>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4d07      	ldr	r5, [pc, #28]	; (8016c7c <_kill_r+0x20>)
 8016c60:	2300      	movs	r3, #0
 8016c62:	4604      	mov	r4, r0
 8016c64:	4608      	mov	r0, r1
 8016c66:	4611      	mov	r1, r2
 8016c68:	602b      	str	r3, [r5, #0]
 8016c6a:	f7e9 ffdd 	bl	8000c28 <_kill>
 8016c6e:	1c43      	adds	r3, r0, #1
 8016c70:	d102      	bne.n	8016c78 <_kill_r+0x1c>
 8016c72:	682b      	ldr	r3, [r5, #0]
 8016c74:	b103      	cbz	r3, 8016c78 <_kill_r+0x1c>
 8016c76:	6023      	str	r3, [r4, #0]
 8016c78:	bd38      	pop	{r3, r4, r5, pc}
 8016c7a:	bf00      	nop
 8016c7c:	2000f034 	.word	0x2000f034

08016c80 <_getpid_r>:
 8016c80:	f7e9 bfca 	b.w	8000c18 <_getpid>

08016c84 <_fstat_r>:
 8016c84:	b538      	push	{r3, r4, r5, lr}
 8016c86:	4d07      	ldr	r5, [pc, #28]	; (8016ca4 <_fstat_r+0x20>)
 8016c88:	2300      	movs	r3, #0
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	4608      	mov	r0, r1
 8016c8e:	4611      	mov	r1, r2
 8016c90:	602b      	str	r3, [r5, #0]
 8016c92:	f7ea f82a 	bl	8000cea <_fstat>
 8016c96:	1c43      	adds	r3, r0, #1
 8016c98:	d102      	bne.n	8016ca0 <_fstat_r+0x1c>
 8016c9a:	682b      	ldr	r3, [r5, #0]
 8016c9c:	b103      	cbz	r3, 8016ca0 <_fstat_r+0x1c>
 8016c9e:	6023      	str	r3, [r4, #0]
 8016ca0:	bd38      	pop	{r3, r4, r5, pc}
 8016ca2:	bf00      	nop
 8016ca4:	2000f034 	.word	0x2000f034

08016ca8 <_isatty_r>:
 8016ca8:	b538      	push	{r3, r4, r5, lr}
 8016caa:	4d06      	ldr	r5, [pc, #24]	; (8016cc4 <_isatty_r+0x1c>)
 8016cac:	2300      	movs	r3, #0
 8016cae:	4604      	mov	r4, r0
 8016cb0:	4608      	mov	r0, r1
 8016cb2:	602b      	str	r3, [r5, #0]
 8016cb4:	f7ea f829 	bl	8000d0a <_isatty>
 8016cb8:	1c43      	adds	r3, r0, #1
 8016cba:	d102      	bne.n	8016cc2 <_isatty_r+0x1a>
 8016cbc:	682b      	ldr	r3, [r5, #0]
 8016cbe:	b103      	cbz	r3, 8016cc2 <_isatty_r+0x1a>
 8016cc0:	6023      	str	r3, [r4, #0]
 8016cc2:	bd38      	pop	{r3, r4, r5, pc}
 8016cc4:	2000f034 	.word	0x2000f034

08016cc8 <_malloc_usable_size_r>:
 8016cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ccc:	1f18      	subs	r0, r3, #4
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	bfbc      	itt	lt
 8016cd2:	580b      	ldrlt	r3, [r1, r0]
 8016cd4:	18c0      	addlt	r0, r0, r3
 8016cd6:	4770      	bx	lr

08016cd8 <_init>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	bf00      	nop
 8016cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cde:	bc08      	pop	{r3}
 8016ce0:	469e      	mov	lr, r3
 8016ce2:	4770      	bx	lr

08016ce4 <_fini>:
 8016ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce6:	bf00      	nop
 8016ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cea:	bc08      	pop	{r3}
 8016cec:	469e      	mov	lr, r3
 8016cee:	4770      	bx	lr
